open import Algebra using (CommutativeRing)

open import Data.Maybe using (Maybe)
open Maybe
open import Data.List using (List)
open List

module Prelude.Polynomial {c РёЊ} (R : CommutativeRing c РёЊ) where

-- TODO switch to preorder based max
open import Data.Nat using (_Ріћ_)
open import Prelude.Nat using (РёЋ)
open РёЋ

open CommutativeRing R using (0#; 1#; _+_; _*_; -_; _-_; ring)
  renaming (Carrier to C)
open CommutativeRing R using (_РЅѕ_; isEquivalence; setoid)
  renaming (refl to РЅѕ-refl; sym to РЅѕ-sym)
open import Relation.Binary.Reasoning.Setoid setoid
open CommutativeRing R using (+-cong; +-cong╦А; +-cong╩│; +-identity╩│; +-identity╦А; +-assoc; +-comm)
open CommutativeRing R using (-Рђ┐inverse╩│; -Рђ┐inverse╦А; -Рђ┐cong)
open CommutativeRing R using (zero╦А; zero╩│; distrib╩│; distrib╦А; *-cong╦А; *-cong╩│; *-assoc; *-comm)
open import Algebra.Properties.Ring ring using (-Рђ┐distrib╩│-*; -Рђ┐+-comm; -0#РЅѕ0#)

open import Polynomial.Simple.AlmostCommutativeRing using (AlmostCommutativeRing; fromCommutativeRing)
open import Polynomial.Simple.Reflection using (solve; solveOver)

ACR : AlmostCommutativeRing c РёЊ
ACR = fromCommutativeRing R (╬╗ _ Рєњ nothing)

data Degree : Set where
  -Рѕъ : Degree
  РЪе_РЪЕ : РёЋ Рєњ Degree

_max_ : Degree Рєњ Degree Рєњ Degree
-Рѕъ max dРѓѓ = dРѓѓ
dРѓЂ max -Рѕъ = dРѓЂ
РЪе dРѓЂ РЪЕ max РЪе dРѓѓ РЪЕ = РЪе dРѓЂ Ріћ dРѓѓ РЪЕ

1+ : Degree Рєњ Degree
1+ -Рѕъ = РЪе 0 РЪЕ
1+ РЪе d РЪЕ = РЪе suc d РЪЕ

data Polynomial : Set c where
  0рхќ : Polynomial
  _+xРѕЎ_ : C Рєњ Polynomial Рєњ Polynomial

deg : Polynomial Рєњ Degree
deg 0рхќ = -Рѕъ
deg (_ +xРѕЎ p) = 1+ (deg p)

_+рхќ_ : Polynomial Рєњ Polynomial Рєњ Polynomial
0рхќ +рхќ q = q
p +рхќ 0рхќ = p
(kРѓЂ +xРѕЎ p) +рхќ (kРѓѓ +xРѕЎ q) = (kРѓЂ + kРѓѓ) +xРѕЎ (p +рхќ q)

open import Relation.Binary.PropositionalEquality using (_РЅА_) renaming (refl to РЅА-refl; sym to РЅА-sym)

lemma : Рѕђ p q Рєњ deg (p +рхќ q) РЅА deg p max deg q
lemma 0рхќ q = РЅА-refl
lemma p 0рхќ = {!!}
lemma (kРѓЂ +xРѕЎ p) (kРѓѓ +xРѕЎ q) = {!!}

-- data РёЎ : Degree Рєњ Set c where
--   ­ЮЋА0 : РёЎ -Рѕъ
--   _+xРѕЎ_ : Рѕђ {d} Рєњ C Рєњ РёЎ d Рєњ РёЎ (1+ d)

-- open import Relation.Binary.PropositionalEquality using (_РЅА_) renaming (refl to РЅА-refl; sym to РЅА-sym)

-- test : Рѕђ dРѓЂ dРѓѓ Рєњ 1+ dРѓЂ max 1+ dРѓѓ РЅА 1+ (dРѓЂ max dРѓѓ)
-- test = ?

-- _РёЎ+_ : Рѕђ {dРѓЂ dРѓѓ} Рєњ РёЎ dРѓЂ Рєњ РёЎ dРѓѓ Рєњ РёЎ (dРѓЂ max dРѓѓ)
-- ­ЮЋА0 РёЎ+ q = q
-- (kРѓЂ +xРѕЎ p) РёЎ+ ­ЮЋА0 = {!!}
-- _РёЎ+_ {dРѓЂ} {dРѓѓ} (kРѓЂ +xРѕЎ p) (kРѓѓ +xРѕЎ q)  rewrite test dРѓЂ dРѓѓ = {!!} +xРѕЎ ?

-- data Polynomial : Set c where
--   0рхќ : Polynomial
--   _+xРѕЎ_ : C Рєњ Polynomial Рєњ Polynomial

-- 1рхќ : Polynomial
-- 1рхќ = 1# +xРѕЎ 0рхќ

-- РЪд_РЪД : Polynomial Рєњ C Рєњ C
-- РЪд 0рхќ РЪД x = 0#
-- РЪд k +xРѕЎ p РЪД x = k + x * РЪд p РЪД x

-- infixl 6 _+рхќ_
-- _+рхќ_ : Polynomial Рєњ Polynomial Рєњ Polynomial
-- 0рхќ +рхќ q = q
-- p +рхќ 0рхќ = p
-- (kРѓЂ +xРѕЎ p) +рхќ (kРѓѓ +xРѕЎ q) = (kРѓЂ + kРѓѓ) +xРѕЎ (p +рхќ q)

-- infixl 7 _РѕЎрхќ_
-- _РѕЎрхќ_ : C Рєњ Polynomial Рєњ Polynomial
-- a РѕЎрхќ 0рхќ = 0рхќ
-- a РѕЎрхќ (k +xРѕЎ p) = (a * k) +xРѕЎ (a РѕЎрхќ p)

-- xРѕЎ_ : Polynomial Рєњ Polynomial
-- xРѕЎ p = 0# +xРѕЎ p

-- ­ЮЉІ : Polynomial
-- ­ЮЉІ = xРѕЎ 1рхќ

-- infixl 7 _*рхќ_
-- _*рхќ_ : Polynomial Рєњ Polynomial Рєњ Polynomial
-- 0рхќ *рхќ q = 0рхќ
-- p *рхќ 0рхќ = 0рхќ
-- (kРѓЂ +xРѕЎ p) *рхќ (kРѓѓ +xРѕЎ q) = (kРѓЂ * kРѓѓ) +xРѕЎ (kРѓЂ РѕЎрхќ q +рхќ kРѓѓ РѕЎрхќ p +рхќ xРѕЎ (p *рхќ q))
-- -- (kРѓЂ + x * p[x]) * (kРѓѓ + x * q[x]) = kРѓЂ * kРѓѓ + x * (kРѓЂ * q[x] + kРѓѓ * p[x] + x * (p[x] * q[x]))

-- -рхќ_ : Polynomial Рєњ Polynomial
-- -рхќ 0рхќ = 0рхќ
-- -рхќ (x +xРѕЎ p) = (- x) +xРѕЎ (-рхќ p)

-- +рхќ-homo : Рѕђ p q x Рєњ РЪд p +рхќ q РЪД x РЅѕ РЪд p РЪД x + РЪд q РЪД x
-- +рхќ-homo 0рхќ q x = РЅѕ-sym (+-identity╦А (РЪд q РЪД x ))
-- +рхќ-homo (kРѓЂ +xРѕЎ p) 0рхќ x = РЅѕ-sym (+-identity╩│ (kРѓЂ + x * РЪд p РЪД x))
-- +рхќ-homo (kРѓЂ +xРѕЎ p) (kРѓѓ +xРѕЎ q) x = begin
--   kРѓЂ + kРѓѓ + x * РЪд p +рхќ q РЪД x            РЅѕРЪе +-cong╦А (*-cong╦А (+рхќ-homo p q x)) РЪЕ
--   kРѓЂ + kРѓѓ + x * (РЪд p РЪД x + РЪд q РЪД x)     РЅѕРЪе lemma kРѓЂ kРѓѓ x (РЪд p РЪД x) (РЪд q РЪД x) РЪЕ
--   kРѓЂ + x * РЪд p РЪД x + (kРѓѓ + x * РЪд q РЪД x) Рѕј
--   where
--   lemma : Рѕђ a b c d e Рєњ a + b + c * (d + e) РЅѕ a + c * d + (b + c * e)
--   lemma = solve ACR

-- РѕЎрхќ-homo : Рѕђ a p x Рєњ РЪд a РѕЎрхќ p РЪД x РЅѕ a * РЪд p РЪД x
-- РѕЎрхќ-homo a 0рхќ x = РЅѕ-sym (zero╩│ a)
-- РѕЎрхќ-homo a (k +xРѕЎ p) x = begin
--   a * k + x * РЪд a РѕЎрхќ p РЪД x  РЅѕРЪе +-cong╦А (*-cong╦А (РѕЎрхќ-homo a p x)) РЪЕ
--   a * k + x * (a * РЪд p РЪД x) РЅѕРЪе lemma a k x (РЪд p РЪД x) РЪЕ
--   a * (k + x * РЪд p РЪД x)     Рѕј
--   where
--   lemma : Рѕђ a b c d Рєњ a * b + c * (a * d) РЅѕ a * (b + c * d)
--   lemma = solve ACR

-- xРѕЎ-homo : Рѕђ p x Рєњ РЪд xРѕЎ p РЪД x РЅѕ x * РЪд p РЪД x
-- xРѕЎ-homo p x = +-identity╦А (x * РЪд p РЪД x)

-- foil : Рѕђ a b c d Рєњ (a + b) * (c + d) РЅѕ a * c + a * d + b * c + b * d
-- foil = solve ACR

-- *рхќ-homo : Рѕђ p q x Рєњ РЪд p *рхќ q РЪД x РЅѕ РЪд p РЪД x * РЪд q РЪД x
-- *рхќ-homo 0рхќ q x = РЅѕ-sym (zero╦А (РЪд q РЪД x))
-- *рхќ-homo (kРѓЂ +xРѕЎ p) 0рхќ x = РЅѕ-sym (zero╩│ (kРѓЂ + x * РЪд p РЪД x ))
-- *рхќ-homo (kРѓЂ +xРѕЎ p) (kРѓѓ +xРѕЎ q) x = begin
--   kРѓЂ * kРѓѓ + x * РЪд kРѓЂ РѕЎрхќ q +рхќ kРѓѓ РѕЎрхќ p +рхќ xРѕЎ (p *рхќ q) РЪД x РЅѕРЪе +-cong╦А (*-cong╦А (+рхќ-homo (kРѓЂ РѕЎрхќ q +рхќ kРѓѓ РѕЎрхќ p) (xРѕЎ (p *рхќ q)) x)) РЪЕ
--   kРѓЂ * kРѓѓ + x * (РЪд kРѓЂ РѕЎрхќ q +рхќ kРѓѓ РѕЎрхќ p РЪД x + РЪд xРѕЎ (p *рхќ q) РЪД x) РЅѕРЪе +-cong╦А (*-cong╦А (+-cong (+рхќ-homo (kРѓЂ РѕЎрхќ q) (kРѓѓ РѕЎрхќ p) x) (xРѕЎ-homo (p *рхќ q) x))) РЪЕ
--   kРѓЂ * kРѓѓ + x * (РЪд kРѓЂ РѕЎрхќ q РЪД x + РЪд kРѓѓ РѕЎрхќ p РЪД x + x * РЪд p *рхќ q РЪД x) РЅѕРЪе +-cong╦А (*-cong╦А (+-cong (+-cong (РѕЎрхќ-homo kРѓЂ q x) (РѕЎрхќ-homo kРѓѓ p x)) (*-cong╦А (*рхќ-homo p q x)))) РЪЕ
--   kРѓЂ * kРѓѓ + x * (kРѓЂ * РЪд q РЪД x + kРѓѓ * РЪд p РЪД x + (x * (РЪд p РЪД x * РЪд q РЪД x))) РЅѕРЪе full kРѓЂ kРѓѓ x (РЪд p РЪД x) (РЪд q РЪД x) РЪЕ
--   (kРѓЂ + x * РЪд p РЪД x) * (kРѓѓ + x * РЪд q РЪД x) Рѕј
--   where
--   lemmaРѓЂ : Рѕђ a b c d e Рєњ c * (a * e + b * d) РЅѕ a * (c * e) + c * d * b
--   lemmaРѓЂ a b c d e = begin
--     c * (a * e + b * d) РЅѕРЪе distrib╦А c (a * e) (b * d) РЪЕ
--     c * (a * e) + c * (b * d) РЅѕРЪе +-cong (РЅѕ-sym (*-assoc c a e)) (*-cong╦А (*-comm b d )) РЪЕ
--     (c * a) * e + c * (d * b) РЅѕРЪе +-cong (*-cong╩│ (*-comm c a)) (РЅѕ-sym (*-assoc c d b)) РЪЕ
--     (a * c) * e + c * d * b   РЅѕРЪе +-cong╩│ (*-assoc a c e) РЪЕ
--     a * (c * e) + c * d * b   Рѕј
--   lemmaРѓѓ : Рѕђ c d e Рєњ c * (c * (d * e)) РЅѕ c * d * (c * e)
--   lemmaРѓѓ c d e = begin
--     c * (c * (d * e)) РЅѕРЪе *-cong╦А (РЅѕ-sym (*-assoc c d e)) РЪЕ
--     c * (c * d * e)   РЅѕРЪе *-cong╦А (*-cong╩│ (*-comm c d)) РЪЕ
--     c * (d * c * e)   РЅѕРЪе *-cong╦А (*-assoc d c e) РЪЕ
--     c * (d * (c * e)) РЅѕРЪе РЅѕ-sym (*-assoc c d (c * e)) РЪЕ
--     c * d * (c * e)   Рѕј
--   full : Рѕђ a b c d e Рєњ a * b + c * (a * e + b * d + (c * (d * e))) РЅѕ (a + c * d) * (b + c * e)
--   full a b c d e = begin
--     a * b + c * (a * e + b * d + (c * (d * e)))                 РЅѕРЪе +-cong╦А (distrib╦А c (a * e + b * d) (c * (d * e))) РЪЕ
--     a * b + (c * (a * e + b * d) + c * (c * (d * e)))           РЅѕРЪе +-cong╦А (+-cong (lemmaРѓЂ a b c d e) (lemmaРѓѓ c d e)) РЪЕ
--     a * b + ((a * (c * e) + (c * d) * b) + ((c * d) * (c * e))) РЅѕРЪе РЅѕ-sym (+-assoc (a * b) (a * (c * e) + (c * d) * b) ((c * d) * (c * e))) РЪЕ
--     a * b + (a * (c * e) + (c * d) * b) + (c * d) * (c * e)     РЅѕРЪе +-cong╩│ (РЅѕ-sym (+-assoc (a * b) (a * (c * e)) ((c * d) * b))) РЪЕ
--     a * b + a * (c * e) + (c * d) * b + (c * d) * (c * e)       РЅѕРЪе РЅѕ-sym (foil a (c * d) b (c * e)) РЪЕ
--     (a + c * d) * (b + c * e)                                   Рѕј

-- -рхќРђ┐homo : Рѕђ p x Рєњ РЪд -рхќ p РЪД x РЅѕ - РЪд p РЪД x
-- -рхќРђ┐homo 0рхќ x = РЅѕ-sym -0#РЅѕ0#
-- -рхќРђ┐homo (k +xРѕЎ p) x = begin
--   - k + x * РЪд -рхќ p РЪД x  РЅѕРЪе +-cong╦А (*-cong╦А (-рхќРђ┐homo p x)) РЪЕ
--   - k + x * - РЪд p РЪД x   РЅѕРЪе +-cong╦А (РЅѕ-sym (-Рђ┐distrib╩│-* x (РЪд p РЪД x))) РЪЕ
--   - k + - (x * РЪд p РЪД x) РЅѕРЪе -Рђ┐+-comm k (x * РЪд p РЪД x ) РЪЕ
--   - (k + x * РЪд p РЪД x)   Рѕј

-- -- 1 + x + x^2
-- ex1 : Polynomial
-- ex1 = 1# +xРѕЎ (1# +xРѕЎ (1# +xРѕЎ 0рхќ))

-- -- 1 + x + x^2
-- ex2 : Polynomial
-- ex2 = 1рхќ +рхќ ­ЮЉІ +рхќ ­ЮЉІ *рхќ ­ЮЉІ
