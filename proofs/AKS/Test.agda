open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Data.Unit using (‚ä§; tt)
open import Agda.Builtin.FromNat using (Number)

module AKS.Test where

open import AKS.Nat using ()
open import AKS.Rational using (show-‚Ñö)
open import AKS.Rational.Properties using (+-*-/-decField)
open import AKS.Polynomial.Base +-*-/-decField
open import AKS.Polynomial.Properties +-*-/-decField

ex : Polynomial
ex = 1·µñ +·µñ ùëã^ 1 +·µñ ùëã^ 2

ex-unit‚ÇÅ : show-Polynomial show-‚Ñö ex ‚â° "1 + 1 * X^1 + 1 * X^2"
ex-unit‚ÇÅ = refl

ex-unit‚ÇÇ : show-Polynomial show-‚Ñö (ex *·µñ ex) ‚â° "1 + 2 * X^1 + 3 * X^2 + 2 * X^3 + 1 * X^4"
ex-unit‚ÇÇ = refl

open import AKS.Unsafe using (TODO)
open import Data.Product using (_,_)

test = show-Polynomial show-‚Ñö ((ex div·µñ (ùëã^ 1)) {TODO})
