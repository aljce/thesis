open import Level using () renaming (_โ_ to _โหก_)

open import Data.Product using (_,_; projโ)
open import Data.Sum using (_โ_; injโ; injโ)

open import Relation.Nullary using (yes; no)
open import Relation.Binary using (IsEquivalence; Tri)
open Tri
open import Relation.Binary.PropositionalEquality using (_โก_; _โข_; refl; sym)
open import Algebra.Bundles using (RawRing)
open import AKS.Algebra.Bundles using (DecField)

module AKS.Polynomial.Base {c โ} (F : DecField c โ)  where

open import Data.Unit using (โค; tt)
open import Agda.Builtin.FromNat using (Number)
open import AKS.Nat using (โ; _โธ_; _<_; lte) renaming (_+_ to _+โ_; _โ_ to _โโ_)
open โ
open import AKS.Nat using (โขโยฌโ; <-cmp; suc-injective-โค; <-irrefl)
open import AKS.Nat using (โโบ; โ_โโ; โ_โโ)

open DecField F
  using (0#; 1#; _+_; _*_; -_; _-_; _โปยน; _/_; C/0)
  renaming (Carrier to C)
open DecField F using (_โ_; _โ?_; isEquivalence)
open IsEquivalence isEquivalence using ()
  renaming (refl to โ-refl; sym to โ-sym; trans to โ-trans)
open DecField F
  using (*-commutativeMonoid; 1#โ0#; -1#โ0#; _*/0_)
open import AKS.Exponentiation *-commutativeMonoid using (_^_; _^โบ_)

data Degree : Set where
  -โ : Degree
  โจ_โฉ : โ โ Degree

instance
  Degree-number : Number Degree
  Degree-number = record
    { Constraint = ฮป _ โ โค
    ; fromNat = ฮป n โ โจ n โฉ
    }

_โ_ : Degree โ Degree โ Degree
-โ โ dโ = dโ
โจ dโ โฉ โ -โ = โจ dโ โฉ
โจ dโ โฉ โ โจ dโ โฉ = โจ dโ โโ dโ โฉ

data Spine : Set (c โหก โ) where
  K : C/0 โ Spine
  _+x^_โ_ : C/0 โ โโบ โ Spine โ Spine

data Polynomial : Set (c โหก โ) where
  0แต : Polynomial
  x^_โ_ : โ โ Spine โ Polynomial

โฆ_โงหข : Spine โ C โ C
โฆ K c โงหข x = projโ c
โฆ c +x^ n โ p โงหข x = projโ c + x ^โบ n * โฆ p โงหข x

โฆ_โง : Polynomial โ C โ C
โฆ 0แต โง x = 0#
โฆ x^ n โ p โง x = x ^ n * โฆ p โงหข x

1แต : Polynomial
1แต = x^ 0 โ K (1# , 1#โ0#)

_+?_ : โ (kโ kโ : C/0) โ (projโ kโ + projโ kโ โ 0#) โ C/0
kโ +? kโ with projโ kโ + projโ kโ โ? 0#
... | yes kโ+kโโ0 = injโ kโ+kโโ0
... | no  kโ+kโโ0 = injโ (projโ kโ + projโ kโ , kโ+kโโ0)

+-spine-โก-K : โ โ C/0 โ Spine โ Polynomial
+-spine-โก-K n cโ (K cโ) with cโ +? cโ
... | injโ _ = 0แต
... | injโ cโ+cโ = x^ n โ K cโ+cโ
+-spine-โก-K n cโ (cโ +x^ iโ โ q) with cโ +? cโ
... | injโ _ = x^ (n +โ โ iโ โโ) โ q
... | injโ cโ+cโ = x^ n โ (cโ+cโ +x^ iโ โ q)

+-spine-โก : โ โ Spine โ Spine โ Polynomial
+-spine-< : โ โ Spine โ โโบ โ Spine โ Polynomial
+-spine : โ โ Spine โ โ โ Spine โ Polynomial

+-spine-โก n (K cโ) q = +-spine-โก-K n cโ q
+-spine-โก n (cโ +x^ iโ โ p) (K cโ) = +-spine-โก-K n cโ (cโ +x^ iโ โ p)
+-spine-โก n (cโ +x^ iโ โ p) (cโ +x^ iโ โ q) with cโ +? cโ
... | injโ _ = +-spine (n +โ โ iโ โโ) p (n +โ โ iโ โโ) q
... | injโ cโ+cโ with +-spine โ iโ โโ p โ iโ โโ q
...   | 0แต = x^ n โ K cโ+cโ
...   | x^ zero โ r = +-spine-โก-K n cโ+cโ r
...   | x^ suc nโ โ r = x^ n โ (cโ+cโ +x^ โ suc nโ โโ โ r)

+-spine-< nโ (K cโ) nโ q = x^ nโ โ (cโ +x^ nโ โ q)
+-spine-< nโ (cโ +x^ iโ โ p) nโ q with +-spine โ iโ โโ p โ nโ โโ q
... | 0แต = x^ nโ โ K cโ
... | x^ zero โ r = +-spine-โก-K nโ cโ r
... | x^ suc nโ โ r = x^ nโ โ (cโ +x^ โ suc nโ โโ โ r)

m<nโnโธmโข0 : โ {m n} โ m < n โ n โธ m โข 0
m<nโnโธmโข0 {zero} {n} m<n nโธmโก0 = <-irrefl (sym nโธmโก0) m<n
m<nโnโธmโข0 {suc m} {suc n} m<n nโธmโก0 = m<nโnโธmโข0 (suc-injective-โค m<n) nโธmโก0

+-spine nโ p nโ q with <-cmp nโ nโ
+-spine nโ p nโ q | tri< nโ<nโ _ _ = +-spine-< nโ p (โ nโ โธ nโ โโ {โขโยฌโ (m<nโnโธmโข0 nโ<nโ)}) q
+-spine nโ p nโ q | triโ _ nโโกnโ _ = +-spine-โก nโ p q
+-spine nโ p nโ q | tri> _ _ nโ>nโ = +-spine-< nโ q (โ nโ โธ nโ โโ {โขโยฌโ (m<nโnโธmโข0 nโ>nโ)}) p

infixl 6 _+แต_
_+แต_ : Polynomial โ Polynomial โ Polynomial
0แต +แต q = q
(x^ nโ โ p) +แต 0แต = x^ nโ โ p
(x^ nโ โ p) +แต (x^ nโ โ q) = +-spine nโ p nโ q

๐ : Polynomial
๐ = x^ 1 โ K (1# , 1#โ0#)

โแต-spine : C/0 โ Spine โ Spine
โแต-spine cโ (K cโ) = K (cโ */0 cโ)
โแต-spine cโ (cโ +x^ n โ p) = (cโ */0 cโ) +x^ n โ (โแต-spine cโ p)

infixl 7 _โแต_
_โแต_ : C/0 โ Polynomial โ Polynomial
c โแต 0แต = 0แต
c โแต (x^ n โ p) = x^ n โ (โแต-spine c p)

*แต-spine : โ โ Spine โ โ โ Spine โ Polynomial
*แต-spine oโ (K cโ) oโ q = x^ (oโ +โ oโ) โ (โแต-spine cโ q)
*แต-spine oโ (cโ +x^ nโ โ p) oโ (K cโ) = x^ (oโ +โ oโ) โ (โแต-spine cโ (cโ +x^ nโ โ p))
*แต-spine oโ (cโ +x^ nโ โ p) oโ (cโ +x^ nโ โ q) =
  x^ (oโ +โ oโ) โ K (cโ */0 cโ) +แต
  cโ โแต x^ (oโ +โ oโ +โ โ nโ โโ) โ q +แต
  cโ โแต (x^ (oโ +โ oโ +โ โ nโ โโ) โ p) +แต
  *แต-spine (oโ +โ โ nโ โโ) p (oโ +โ โ nโ โโ) q
-- (cโ + x ^ nโ * p[x]) * (cโ + x ^ nโ * q[x]) = (cโ * cโ) + (cโ * x ^ nโ * q[x]) + (x ^ nโ * p[x] * cโ) + (x ^ nโ * p[x] * x ^ nโ * q[x])

infixl 7 _*แต_
_*แต_ : Polynomial โ Polynomial โ Polynomial
0แต *แต q = 0แต
(x^ nโ โ p) *แต 0แต = 0แต
(x^ nโ โ p) *แต (x^ nโ โ q) = *แต-spine nโ p nโ q

-แต_ : Polynomial โ Polynomial
-แต p = (- 1# , -1#โ0#) โแต p

infix 4 _โแต_
record _โแต_ (p : Polynomial) (q : Polynomial) : Set (c โหก โ) where
  constructor โโ
  field
    โx[pโโqโ] : โ x โ โฆ p โง x โ โฆ q โง x

data _โหข_ : Spine โ Spine โ Set (c โหก โ) where
  Kโ : โ {cโ cโ} โ projโ cโ โ projโ cโ โ K cโ โหข K cโ
  +โ : โ {cโ cโ} {nโ nโ} {p q} โ projโ cโ โ projโ cโ โ nโ โก nโ โ p โหข q โ (cโ +x^ nโ โ p) โหข (cโ +x^ nโ โ q)

infix 4 _โโฑ_
data _โโฑ_ : Polynomial โ Polynomial โ Set (c โหก โ) where
  0แตโ : 0แต โโฑ 0แต
  0แตโ : โ {oโ oโ} {p q} โ oโ โก oโ โ p โหข q โ x^ oโ โ p โโฑ x^ oโ โ q

-- _โโฑ?_ : Decidable _โโฑ_
-- p โโฑ? q = ?

-- lemma : โ {p q} โ p โแต q โ p โโฑ q
-- lemma {0แต} {0แต} pโแตq = 0แตโ
-- lemma {0แต} {x^ oโ โ q} (โโ โx[pโโqโ]) = {!!}
-- lemma {x^ oโ โ p} {0แต} pโแตq = {!!}
-- lemma {x^ oโ โ p} {x^ x โ xโ} (โโ โx[pโโqโ]) = {!!}

+แต-*แต-rawRing : RawRing (c โหก โ) (c โหก โ)
+แต-*แต-rawRing = record
  { Carrier = Polynomial
  ; _โ_ = _โแต_
  ; _+_ = _+แต_
  ; _*_ = _*แต_
  ; -_ = -แต_
  ; 0# = 0แต
  ; 1# = 1แต
  }

-- 1 + x + x^2
ex2 : Polynomial
ex2 = 1แต +แต ๐ +แต ๐ *แต ๐
