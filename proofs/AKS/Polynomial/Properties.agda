open import Level using () renaming (_‚äî_ to _‚äîÀ°_)
open import Function using (_$_; flip)

open import Function.Equivalence as FE using ()
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Decidable using (map)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary using (Setoid; IsEquivalence; Decidable; DecSetoid; IsDecEquivalence; Tri)
open import Relation.Binary.Definitions using (Recomputable)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_) renaming (refl to ‚â°-refl; sym to ‚â°-sym; cong to ‚â°-cong; cong‚ÇÇ to ‚â°-cong‚ÇÇ; setoid to ‚â°-setoid)
open Tri

open import Data.Empty.Irrelevant using (‚ä•-elim)
open import Data.Maybe using (Maybe; nothing; just)
open import Data.List using ([]; _‚à∑_)
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)

open import Algebra.Bundles using (CommutativeRing)
open import AKS.Algebra.Bundles using (DecField; IntegralDomain)

module AKS.Polynomial.Properties {c ‚Ñì} (F : DecField c ‚Ñì) where

open import AKS.Nat using (‚Ñï; zero; suc; _<_; _‚â§_; lte; _‚âü_; _‚âü‚Å∫_; _‚à∏_; ‚Ñï‚Å∫; ‚Ñï+; ‚üÖ_‚áì‚üÜ; ‚üÖ_‚áë‚üÜ; pred) renaming (_+_ to _+‚Ñï_)
open import AKS.Nat using (<-cmp; <-‚â§-connex; m+[n‚à∏m]‚â°n; ‚Ñï‚Üí‚Ñï‚Å∫‚Üí‚Ñï; ‚üÖ‚áì‚üÜ-injective; m<n‚áín‚à∏m‚â¢0; ‚â¢‚áí¬¨‚âü; <‚áí‚â§; +-suc)
open import AKS.Nat using (0‚â§n; suc-mono-‚â§; ‚â§-reflexive; +-mono-<; module ‚â§-Reasoning)
open import AKS.Nat using (_‚äî_; ‚äî-identity ≥; ‚äî-identityÀ°; +-distribÀ°-‚äî; ‚äî-least-<; m‚â§n‚áím‚äîn‚â°n)
open import AKS.Nat using (Acc; acc; <-well-founded)
import Data.Nat.Properties as Nat

open import Polynomial.Simple.AlmostCommutativeRing using (AlmostCommutativeRing; fromCommutativeRing)
open import Polynomial.Simple.Reflection using (solve; solveOver)
open import Polynomial.Simple.AlmostCommutativeRing.Instances using (module Nat)
open Nat.Reflection using (‚àÄ‚ü®_‚ü©)

open DecField F
  using (0#; 1#; _+_; _*_; -_; _-_; _‚Åª¬π; _/_)
  renaming (Carrier to C)
open DecField F
  using (C/0; _*-nonzero_; _/-nonzero_; -1#-nonzero; 0#‚ââ1#; 1#‚ââ0#; *-cancelÀ°)
open DecField F using (_‚âà_; _‚ââ_; _‚âà?_; setoid)
open Setoid setoid using (refl; sym; trans)
open import Relation.Binary.Reasoning.MultiSetoid
open DecField F using (ring; commutativeRing; *-commutativeMonoid)
open CommutativeRing commutativeRing using (+-assoc; +-comm; +-cong; +-congÀ°; +-cong ≥; +-identityÀ°; +-identity ≥)
open CommutativeRing commutativeRing using (*-assoc; *-comm; *-cong; *-congÀ°; *-cong ≥; *-identityÀ°; *-identity ≥; zeroÀ°; zero ≥)
open CommutativeRing commutativeRing using (distribÀ°; distrib ≥; -‚Äøcong; -‚ÄøinverseÀ°; -‚Äøinverse ≥)
open import Algebra.Properties.Ring ring using (-‚ÄødistribÀ°-*)
open import AKS.Exponentiation *-commutativeMonoid using (_^_; _^‚Å∫_; ^-homo; ^-^‚Å∫-homo; x^n‚âàx^‚Å∫n)

open import AKS.Polynomial.Base F using
  ( Polynomial‚Å±; 0‚Å±; 1‚Å±; _+x‚àô_; _+‚Å±_; -‚Å±_; _‚àô‚Å±_; _*‚Å±_; x‚àô_; expand; expandÀ¢; simplify; +‚Å±-*‚Å±-rawRing
  ; _‚âà‚Å±_; _‚ââ‚Å±_; 0‚âà0; 0‚âà+; +‚âà0; +‚âà+; ‚âà‚Å±-refl; ‚âà‚Å±-sym; ‚âà‚Å±-trans
  ; Spine; K; _+x^_‚àô_; Polynomial; 0·µñ; x^_‚àô_; ‚ü¶_‚üß; ‚ü¶_‚üßÀ¢; _+?_; ùêæ; ùëã; _‚àôùëã^_
  ; 1·µñ; _+·µñ_; +·µñ-spine; +·µñ-spine-‚â°-K; +·µñ-spine-‚â°; +·µñ-spine-<; -·µñ_; _-·µñ_; _*·µñ_; *·µñ-spine; _‚àô·µñ_; ‚àô·µñ-spine; +·µñ-*·µñ-rawRing
  ; _‚âà·µñ_; _‚ââ·µñ_; 0·µñ‚âà; 0·µñ‚ââ; _‚âàÀ¢_; K‚âà; +‚âà; ‚âà·µñ-refl; ‚âà·µñ-sym; ‚âà·µñ-trans
  ; Degree; deg; degree; degreeÀ¢; _‚äî·µà_; _+·µà_; _‚â§·µà_; -‚àû‚â§_; ‚â§·µà-refl; module ‚â§·µà-Reasoning; -‚àû; ‚ü®_‚ü©; degree‚Å±
  )
open import Algebra.Structures {A = Polynomial‚Å±} _‚âà‚Å±_ using (IsCommutativeRing; IsRing; IsAbelianGroup; IsGroup; IsMonoid; IsSemigroup; IsMagma)
open import Algebra.Definitions {A = Polynomial‚Å±} _‚âà‚Å±_ using
  ( _DistributesOver_; _DistributesOver ≥_; _DistributesOverÀ°_
  ; RightIdentity; LeftIdentity; Identity; Associative; Commutative
  ; RightInverse; LeftInverse; Inverse
  ; LeftCongruent; RightCongruent; Congruent‚ÇÇ; Congruent‚ÇÅ
  )
open import AKS.Algebra.Structures using (IsNonZeroCommutativeRing; IsIntegralDomain)
open import Relation.Binary.Morphism.Structures using (IsRelHomomorphism)
open import AKS.Algebra.Morphism.Structures using (IsRingHomomorphism; IsRingMonomorphism)
open import AKS.Algebra.Morphism.Consequences using (module RingConsequences)

+-*-almostCommutativeRing : AlmostCommutativeRing c ‚Ñì
+-*-almostCommutativeRing = fromCommutativeRing commutativeRing (Œª _ ‚Üí nothing)

expand-cong : ‚àÄ {p} {q} ‚Üí p ‚âà·µñ q ‚Üí expand p ‚âà‚Å± expand q
expand-cong 0·µñ‚âà = ‚âà‚Å±-refl
expand-cong (0·µñ‚ââ ‚â°-refl p‚âàÀ¢q) = expandÀ¢-cong p‚âàÀ¢q
  where
  expandÀ¢-cong : ‚àÄ {n} {p} {q} ‚Üí p ‚âàÀ¢ q ‚Üí expandÀ¢ n p ‚âà‚Å± expandÀ¢ n q
  expandÀ¢-cong {zero} {K c‚ÇÅ} {K c‚ÇÇ} (K‚âà c‚ÇÅ‚âàc‚ÇÇ) = +‚âà+ c‚ÇÅ‚âàc‚ÇÇ 0‚âà0
  expandÀ¢-cong {zero} {c‚ÇÅ +x^ i ‚àô p} {c‚ÇÇ +x^ i ‚àô q} (+‚âà c‚ÇÅ‚âàc‚ÇÇ ‚â°-refl p‚âàÀ¢q) = +‚âà+ c‚ÇÅ‚âàc‚ÇÇ (expandÀ¢-cong p‚âàÀ¢q)
  expandÀ¢-cong {suc n} {p} {q} p‚âàÀ¢q = +‚âà+ refl (expandÀ¢-cong {n} p‚âàÀ¢q)

0‚ââexpandÀ¢[‚ââ0] : ‚àÄ n p ‚Üí 0‚Å± ‚ââ‚Å± expandÀ¢ n p
0‚ââexpandÀ¢[‚ââ0] zero (K c) (0‚âà+ c‚âà0 _) = contradiction c‚âà0 (proj‚ÇÇ c)
0‚ââexpandÀ¢[‚ââ0] zero (c +x^ i ‚àô p) (0‚âà+ c‚âà0 _) = contradiction c‚âà0 (proj‚ÇÇ c)
0‚ââexpandÀ¢[‚ââ0] (suc n) p (0‚âà+ _ 0‚Å±‚âàexpand) = 0‚ââexpandÀ¢[‚ââ0] n p 0‚Å±‚âàexpand

0‚ââexpand[‚ââ0] : ‚àÄ n p ‚Üí 0‚Å± ‚ââ‚Å± expand (x^ n ‚àô p)
0‚ââexpand[‚ââ0] = 0‚ââexpandÀ¢[‚ââ0]

expand-injective : ‚àÄ {p q} ‚Üí expand p ‚âà‚Å± expand q ‚Üí p ‚âà·µñ q
expand-injective {0·µñ} {0·µñ} pf = ‚âà·µñ-refl
expand-injective {0·µñ} {x^ o‚ÇÇ ‚àô q} pf = contradiction pf          (0‚ââexpand[‚ââ0] o‚ÇÇ q)
expand-injective {x^ o‚ÇÅ ‚àô p} {0·µñ} pf = contradiction (‚âà‚Å±-sym pf) (0‚ââexpand[‚ââ0] o‚ÇÅ p)
expand-injective {x^ o‚ÇÅ ‚àô p} {x^ o‚ÇÇ ‚àô q} pf = expandÀ¢-injective o‚ÇÅ o‚ÇÇ p q pf
  where
  expandÀ¢-injective : ‚àÄ o‚ÇÅ o‚ÇÇ p q ‚Üí expandÀ¢ o‚ÇÅ p ‚âà‚Å± expandÀ¢ o‚ÇÇ q ‚Üí x^ o‚ÇÅ ‚àô p ‚âà·µñ x^ o‚ÇÇ ‚àô q
  expandÀ¢-injective zero zero (K c‚ÇÅ)          (K c‚ÇÇ)          (+‚âà+ c‚ÇÅ‚âàc‚ÇÇ pf) = 0·µñ‚ââ ‚â°-refl (K‚âà c‚ÇÅ‚âàc‚ÇÇ)
  expandÀ¢-injective zero zero (K c‚ÇÅ)          (c‚ÇÇ +x^ i‚ÇÇ ‚àô q) (+‚âà+ c‚ÇÅ‚âàc‚ÇÇ pf) = contradiction pf          (0‚ââexpandÀ¢[‚ââ0] _ _)
  expandÀ¢-injective zero zero (c‚ÇÅ +x^ i‚ÇÅ ‚àô p) (K c‚ÇÇ)          (+‚âà+ c‚ÇÅ‚âàc‚ÇÇ pf) = contradiction (‚âà‚Å±-sym pf) (0‚ââexpandÀ¢[‚ââ0] _ _)
  expandÀ¢-injective zero zero (c‚ÇÅ +x^ i‚ÇÅ ‚àô p) (c‚ÇÇ +x^ i‚ÇÇ ‚àô q) (+‚âà+ c‚ÇÅ‚âàc‚ÇÇ pf) with expandÀ¢-injective (pred ‚üÖ i‚ÇÅ ‚áì‚üÜ) (pred ‚üÖ i‚ÇÇ ‚áì‚üÜ) p q pf
  ... | 0·µñ‚ââ i‚ÇÅ‚â°i‚ÇÇ p‚âàÀ¢q = 0·µñ‚ââ ‚â°-refl (+‚âà c‚ÇÅ‚âàc‚ÇÇ (‚üÖ‚áì‚üÜ-injective i‚ÇÅ‚â°i‚ÇÇ) p‚âàÀ¢q)
  expandÀ¢-injective zero (suc o‚ÇÇ) (K c‚ÇÅ)          q               (+‚âà+ c‚ÇÅ‚âàc‚ÇÇ pf) = contradiction pf (0‚ââexpandÀ¢[‚ââ0] _ _)
  expandÀ¢-injective zero (suc o‚ÇÇ) (c‚ÇÅ +x^ i‚ÇÅ ‚àô p) (K c‚ÇÇ)          (+‚âà+ c‚ÇÅ‚âà0  pf) = contradiction c‚ÇÅ‚âà0 (proj‚ÇÇ c‚ÇÅ)
  expandÀ¢-injective zero (suc o‚ÇÇ) (c‚ÇÅ +x^ i‚ÇÅ ‚àô p) (c‚ÇÇ +x^ i‚ÇÇ ‚àô q) (+‚âà+ c‚ÇÅ‚âà0  pf) = contradiction c‚ÇÅ‚âà0 (proj‚ÇÇ c‚ÇÅ)
  expandÀ¢-injective (suc o‚ÇÅ) zero p               (K c‚ÇÇ)          (+‚âà+ c‚ÇÅ‚âàc‚ÇÇ pf) = contradiction (‚âà‚Å±-sym pf) (0‚ââexpandÀ¢[‚ââ0] _ _)
  expandÀ¢-injective (suc o‚ÇÅ) zero (K c‚ÇÅ)          (c‚ÇÇ +x^ i‚ÇÇ ‚àô q) (+‚âà+ 0‚âàc‚ÇÇ  pf) = contradiction (sym 0‚âàc‚ÇÇ) (proj‚ÇÇ c‚ÇÇ)
  expandÀ¢-injective (suc o‚ÇÅ) zero (c‚ÇÅ +x^ i‚ÇÅ ‚àô p) (c‚ÇÇ +x^ i‚ÇÇ ‚àô q) (+‚âà+ 0‚âàc‚ÇÇ  pf) = contradiction (sym 0‚âàc‚ÇÇ) (proj‚ÇÇ c‚ÇÇ)
  expandÀ¢-injective (suc o‚ÇÅ) (suc o‚ÇÇ) p q (+‚âà+ _ pf) with expandÀ¢-injective o‚ÇÅ o‚ÇÇ p q pf
  ... | 0·µñ‚ââ ‚â°-refl p‚âàÀ¢q = 0·µñ‚ââ ‚â°-refl p‚âàÀ¢q

infix 4 _‚âàÀ¢?_
_‚âàÀ¢?_ : Decidable _‚âàÀ¢_
(K c‚ÇÅ) ‚âàÀ¢? (K c‚ÇÇ) with proj‚ÇÅ c‚ÇÅ ‚âà? proj‚ÇÅ c‚ÇÇ
... | no ¬¨c‚ÇÅ‚âàc‚ÇÇ = no Œª { (K‚âà c‚ÇÅ‚âàc‚ÇÇ) ‚Üí contradiction c‚ÇÅ‚âàc‚ÇÇ ¬¨c‚ÇÅ‚âàc‚ÇÇ }
... | yes c‚ÇÅ‚âàc‚ÇÇ = yes (K‚âà c‚ÇÅ‚âàc‚ÇÇ)
(K c‚ÇÅ) ‚âàÀ¢? (c‚ÇÇ +x^ m ‚àô q) = no Œª ()
(c‚ÇÅ +x^ n ‚àô p) ‚âàÀ¢? (K c‚ÇÇ) = no Œª ()
(c‚ÇÅ +x^ n ‚àô p) ‚âàÀ¢? (c‚ÇÇ +x^ m ‚àô q) with proj‚ÇÅ c‚ÇÅ ‚âà? proj‚ÇÅ c‚ÇÇ
... | no ¬¨c‚ÇÅ‚âàc‚ÇÇ = no Œª { (+‚âà c‚ÇÅ‚âàc‚ÇÇ _ _) ‚Üí contradiction c‚ÇÅ‚âàc‚ÇÇ ¬¨c‚ÇÅ‚âàc‚ÇÇ }
... | yes c‚ÇÅ‚âàc‚ÇÇ with n ‚âü‚Å∫ m
...   | no  n‚â¢m = no Œª { (+‚âà _ n‚â°m _) ‚Üí contradiction n‚â°m n‚â¢m }
...   | yes n‚â°m with p ‚âàÀ¢? q
...     | no ¬¨p‚âàÀ¢q = no Œª { (+‚âà _ _ p‚âàÀ¢q) ‚Üí contradiction p‚âàÀ¢q ¬¨p‚âàÀ¢q }
...     | yes p‚âàÀ¢q = yes (+‚âà c‚ÇÅ‚âàc‚ÇÇ n‚â°m p‚âàÀ¢q)

infix 4 _‚âà·µñ?_
_‚âà·µñ?_ : Decidable _‚âà·µñ_
0·µñ ‚âà·µñ? 0·µñ = yes ‚âà·µñ-refl
0·µñ ‚âà·µñ? (x^ m ‚àô q) = no Œª ()
(x^ n ‚àô p) ‚âà·µñ? 0·µñ = no Œª ()
(x^ n ‚àô p) ‚âà·µñ? (x^ m ‚àô q) with n ‚âü m
... | no  n‚â¢m = no Œª { (0·µñ‚ââ n‚â°m _) ‚Üí contradiction n‚â°m n‚â¢m }
... | yes n‚â°m with p ‚âàÀ¢? q
...   | no ¬¨p‚âàÀ¢q = no Œª { (0·µñ‚ââ _ p‚âàÀ¢q) ‚Üí contradiction p‚âàÀ¢q ¬¨p‚âàÀ¢q }
...   | yes p‚âàÀ¢q = yes (0·µñ‚ââ n‚â°m p‚âàÀ¢q)

‚âà·µñ-isEquivalence : IsEquivalence _‚âà·µñ_
‚âà·µñ-isEquivalence = record
  { refl = ‚âà·µñ-refl
  ; sym = ‚âà·µñ-sym
  ; trans = ‚âà·µñ-trans
  }

‚âà·µñ-isDecEquivalence : IsDecEquivalence _‚âà·µñ_
‚âà·µñ-isDecEquivalence = record
  { isEquivalence = ‚âà·µñ-isEquivalence
  ; _‚âü_ = _‚âà·µñ?_
  }

‚âà·µñ-setoid : Setoid (c ‚äîÀ° ‚Ñì) (c ‚äîÀ° ‚Ñì)
‚âà·µñ-setoid = record
  { Carrier = Polynomial
  ; _‚âà_ = _‚âà·µñ_
  ; isEquivalence = ‚âà·µñ-isEquivalence
  }

‚âà·µñ-decSetoid : DecSetoid (c ‚äîÀ° ‚Ñì) (c ‚äîÀ° ‚Ñì)
‚âà·µñ-decSetoid = record
  { Carrier = Polynomial
  ; _‚âà_ = _‚âà·µñ_
  ; isDecEquivalence = ‚âà·µñ-isDecEquivalence
  }

‚âà·µñ-recomputable : Recomputable _‚âà·µñ_
‚âà·µñ-recomputable {p} {q} [p‚âàq]‚ÇÅ with p ‚âà·µñ? q
... | yes [p‚âàq]‚ÇÇ = [p‚âàq]‚ÇÇ
... | no ¬¨[p‚âàq]  = ‚ä•-elim (¬¨[p‚âàq] [p‚âàq]‚ÇÅ)

‚ü¶‚üß-preserves-‚âà·µñ‚Üí‚âà : ‚àÄ {p q} ‚Üí p ‚âà·µñ q ‚Üí ‚àÄ x ‚Üí ‚ü¶ p ‚üß x ‚âà ‚ü¶ q ‚üß x
‚ü¶‚üß-preserves-‚âà·µñ‚Üí‚âà {0·µñ} {0·µñ} 0·µñ‚âà x = refl
‚ü¶‚üß-preserves-‚âà·µñ‚Üí‚âà {x^ n ‚àô p} {x^ n ‚àô q} (0·µñ‚ââ ‚â°-refl p‚âàÀ¢q) x = *-congÀ° (‚ü¶‚üß-preserves-‚âà·µñ‚Üí‚âàÀ¢ p q p‚âàÀ¢q x)
  where
  ‚ü¶‚üß-preserves-‚âà·µñ‚Üí‚âàÀ¢ : ‚àÄ p q ‚Üí p ‚âàÀ¢ q ‚Üí ‚àÄ x ‚Üí ‚ü¶ p ‚üßÀ¢ x ‚âà ‚ü¶ q ‚üßÀ¢ x
  ‚ü¶‚üß-preserves-‚âà·µñ‚Üí‚âàÀ¢ (K c‚ÇÅ) (K c‚ÇÇ) (K‚âà c‚ÇÅ‚âàc‚ÇÇ) x = c‚ÇÅ‚âàc‚ÇÇ
  ‚ü¶‚üß-preserves-‚âà·µñ‚Üí‚âàÀ¢ (c‚ÇÅ +x^ n ‚àô p) (c‚ÇÇ +x^ n ‚àô q) (+‚âà c‚ÇÅ‚âàc‚ÇÇ ‚â°-refl p‚âàÀ¢q) x = begin‚ü® setoid ‚ü©
    proj‚ÇÅ c‚ÇÅ + x ^‚Å∫ n * ‚ü¶ p ‚üßÀ¢ x ‚âà‚ü® +-cong c‚ÇÅ‚âàc‚ÇÇ (*-congÀ° (‚ü¶‚üß-preserves-‚âà·µñ‚Üí‚âàÀ¢ p q p‚âàÀ¢q x)) ‚ü©
    proj‚ÇÅ c‚ÇÇ + x ^‚Å∫ n * ‚ü¶ q ‚üßÀ¢ x ‚àé

_‚âà‚Å±?_ : Decidable _‚âà‚Å±_
0‚Å± ‚âà‚Å±? 0‚Å± = yes 0‚âà0
0‚Å± ‚âà‚Å±? (c‚ÇÇ +x‚àô q) with c‚ÇÇ ‚âà? 0#
... | no  c‚ÇÇ‚ââ0 = no Œª { (0‚âà+ c‚ÇÇ‚âà0 _) ‚Üí contradiction c‚ÇÇ‚âà0 c‚ÇÇ‚ââ0 }
... | yes c‚ÇÇ‚âà0 with 0‚Å± ‚âà‚Å±? q
...   | no  0‚ââq = no Œª { (0‚âà+ _ 0‚âàq) ‚Üí contradiction 0‚âàq 0‚ââq }
...   | yes 0‚âàq = yes (0‚âà+ c‚ÇÇ‚âà0 0‚âàq)
(c‚ÇÅ +x‚àô p) ‚âà‚Å±? 0‚Å± with c‚ÇÅ ‚âà? 0#
... | no  c‚ÇÅ‚ââ0 = no Œª { (+‚âà0 c‚ÇÅ‚âà0 _) ‚Üí contradiction c‚ÇÅ‚âà0 c‚ÇÅ‚ââ0 }
... | yes c‚ÇÅ‚âà0 with p ‚âà‚Å±? 0‚Å±
...   | no  p‚ââ0 = no Œª { (+‚âà0 _ 0‚âàp) ‚Üí contradiction (‚âà‚Å±-sym 0‚âàp) p‚ââ0 }
...   | yes p‚âà0 = yes (+‚âà0 c‚ÇÅ‚âà0 (‚âà‚Å±-sym p‚âà0))
(c‚ÇÅ +x‚àô p) ‚âà‚Å±? (c‚ÇÇ +x‚àô q) with c‚ÇÅ ‚âà? c‚ÇÇ
... | no  c‚ÇÅ‚ââc‚ÇÇ = no Œª { (+‚âà+ c‚ÇÅ‚âàc‚ÇÇ _) ‚Üí contradiction c‚ÇÅ‚âàc‚ÇÇ c‚ÇÅ‚ââc‚ÇÇ}
... | yes c‚ÇÅ‚âàc‚ÇÇ with p ‚âà‚Å±? q
...   | no  p‚ââq = no Œª { (+‚âà+ _ p‚âàq) ‚Üí contradiction p‚âàq p‚ââq}
...   | yes p‚âàq = yes (+‚âà+ c‚ÇÅ‚âàc‚ÇÇ p‚âàq)

‚âà‚Å±-isEquivalence : IsEquivalence _‚âà‚Å±_
‚âà‚Å±-isEquivalence = record
  { refl = ‚âà‚Å±-refl
  ; sym = ‚âà‚Å±-sym
  ; trans = ‚âà‚Å±-trans
  }

‚âà‚Å±-isDecEquivalence : IsDecEquivalence _‚âà‚Å±_
‚âà‚Å±-isDecEquivalence = record
  { isEquivalence = ‚âà‚Å±-isEquivalence
  ; _‚âü_ = _‚âà‚Å±?_
  }

‚âà‚Å±-setoid : Setoid c (c ‚äîÀ° ‚Ñì)
‚âà‚Å±-setoid = record
  { Carrier = Polynomial‚Å±
  ; _‚âà_ = _‚âà‚Å±_
  ; isEquivalence = ‚âà‚Å±-isEquivalence
  }

‚âà‚Å±-decSetoid : DecSetoid c (c ‚äîÀ° ‚Ñì)
‚âà‚Å±-decSetoid = record
  { Carrier = Polynomial‚Å±
  ; _‚âà_ = _‚âà‚Å±_
  ; isDecEquivalence = ‚âà‚Å±-isDecEquivalence
  }

‚âà‚Å±-recomputable : Recomputable _‚âà‚Å±_
‚âà‚Å±-recomputable {p} {q} [p‚âàq]‚ÇÅ with p ‚âà‚Å±? q
... | yes [p‚âàq]‚ÇÇ = [p‚âàq]‚ÇÇ
... | no ¬¨[p‚âàq]  = ‚ä•-elim (¬¨[p‚âàq] [p‚âàq]‚ÇÅ)

+‚Å±-comm : Commutative _+‚Å±_
+‚Å±-comm 0‚Å± 0‚Å± = ‚âà‚Å±-refl
+‚Å±-comm 0‚Å± (c‚ÇÇ +x‚àô q) = ‚âà‚Å±-refl
+‚Å±-comm (c‚ÇÅ +x‚àô p) 0‚Å± = ‚âà‚Å±-refl
+‚Å±-comm (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) = +‚âà+ (+-comm c‚ÇÅ c‚ÇÇ) (+‚Å±-comm p q)

+‚Å±-identityÀ° : LeftIdentity 0‚Å± _+‚Å±_
+‚Å±-identityÀ° _ = ‚âà‚Å±-refl

+‚Å±-identity ≥ : RightIdentity 0‚Å± _+‚Å±_
+‚Å±-identity ≥ 0‚Å± = ‚âà‚Å±-refl
+‚Å±-identity ≥ (c +x‚àô p) = ‚âà‚Å±-refl

+‚Å±-identity : Identity 0‚Å± _+‚Å±_
+‚Å±-identity = +‚Å±-identityÀ° , +‚Å±-identity ≥

+‚Å±-congÀ° : LeftCongruent _+‚Å±_
+‚Å±-congÀ° {0‚Å±}       {p}        {q}        p‚âàq = p‚âàq
+‚Å±-congÀ° {c‚ÇÅ +x‚àô r} {0‚Å±}       {0‚Å±}       0‚âà0 = ‚âà‚Å±-refl
+‚Å±-congÀ° {c‚ÇÅ +x‚àô r} {0‚Å±}       {c‚ÇÉ +x‚àô q} (0‚âà+ c‚ÇÉ‚âà0 0‚âàq)=
  +‚âà+ (begin‚ü® setoid ‚ü© c‚ÇÅ ‚âà‚ü® sym (+-identity ≥ c‚ÇÅ) ‚ü© c‚ÇÅ + 0# ‚âà‚ü® +-congÀ° (sym c‚ÇÉ‚âà0) ‚ü© c‚ÇÅ + c‚ÇÉ ‚àé)
      (begin‚ü® ‚âà‚Å±-setoid ‚ü© r ‚âà‚ü® ‚âà‚Å±-sym (+‚Å±-identity ≥ r) ‚ü© r +‚Å± 0‚Å± ‚âà‚ü® +‚Å±-congÀ° 0‚âàq ‚ü© r +‚Å± q ‚àé)
+‚Å±-congÀ° {c‚ÇÅ +x‚àô r} {c‚ÇÇ +x‚àô p} {0‚Å±}       (+‚âà0 c‚ÇÇ‚âà0 0‚âàp) =
  +‚âà+ (begin‚ü® setoid ‚ü© c‚ÇÅ + c‚ÇÇ ‚âà‚ü® +-congÀ° c‚ÇÇ‚âà0 ‚ü© c‚ÇÅ + 0# ‚âà‚ü® +-identity ≥ c‚ÇÅ ‚ü© c‚ÇÅ ‚àé)
      (begin‚ü® ‚âà‚Å±-setoid ‚ü© r +‚Å± p ‚âà‚ü® +‚Å±-congÀ° (‚âà‚Å±-sym 0‚âàp) ‚ü© r +‚Å± 0‚Å± ‚âà‚ü® +‚Å±-identity ≥ r ‚ü© r ‚àé)
+‚Å±-congÀ° {c‚ÇÅ +x‚àô r} {c‚ÇÇ +x‚àô p} {c‚ÇÉ +x‚àô q} (+‚âà+ c‚ÇÇ‚âàc‚ÇÉ p‚âàq) = +‚âà+ (+-congÀ° c‚ÇÇ‚âàc‚ÇÉ) (+‚Å±-congÀ° p‚âàq)

+‚Å±-cong ≥ : RightCongruent _+‚Å±_
+‚Å±-cong ≥ {r} {p} {q} p‚âàq = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  p +‚Å± r ‚âà‚ü® +‚Å±-comm p r ‚ü©
  r +‚Å± p ‚âà‚ü® +‚Å±-congÀ° p‚âàq ‚ü©
  r +‚Å± q ‚âà‚ü® +‚Å±-comm r q ‚ü©
  q +‚Å± r ‚àé

+‚Å±-cong : Congruent‚ÇÇ _+‚Å±_
+‚Å±-cong {p} {q} {r} {s} p‚âàq r‚âàs = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  p +‚Å± r ‚âà‚ü® +‚Å±-congÀ° r‚âàs ‚ü©
  p +‚Å± s ‚âà‚ü® +‚Å±-cong ≥ p‚âàq ‚ü©
  q +‚Å± s ‚àé

+‚Å±-isMagma : IsMagma _+‚Å±_
+‚Å±-isMagma = record
  { isEquivalence = ‚âà‚Å±-isEquivalence
  ; ‚àô-cong = +‚Å±-cong
  }

+‚Å±-assoc : Associative _+‚Å±_
+‚Å±-assoc 0‚Å± q r = ‚âà‚Å±-refl
+‚Å±-assoc (c‚ÇÅ +x‚àô p) 0‚Å± r = ‚âà‚Å±-refl
+‚Å±-assoc (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) 0‚Å± = ‚âà‚Å±-refl
+‚Å±-assoc (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) (c‚ÇÉ +x‚àô r) = +‚âà+ (+-assoc c‚ÇÅ c‚ÇÇ c‚ÇÉ) (+‚Å±-assoc p q r )

+‚Å±-isSemigroup : IsSemigroup _+‚Å±_
+‚Å±-isSemigroup = record
  { isMagma = +‚Å±-isMagma
  ; assoc = +‚Å±-assoc
  }

open import Algebra.FunctionProperties.Consequences ‚âà‚Å±-setoid using (comm+idÀ°‚áíid ≥; comm+invÀ°‚áíinv ≥; comm+distrÀ°‚áídistr ≥)

+‚Å±-isMonoid : IsMonoid _+‚Å±_ 0‚Å±
+‚Å±-isMonoid = record
  { isSemigroup = +‚Å±-isSemigroup
  ; identity = +‚Å±-identity
  }

-‚Å±‚ÄøinverseÀ° : LeftInverse 0‚Å± -‚Å±_ _+‚Å±_
-‚Å±‚ÄøinverseÀ° 0‚Å± = ‚âà‚Å±-refl
-‚Å±‚ÄøinverseÀ° (c +x‚àô p) = +‚âà0
  (begin‚ü® setoid ‚ü©
   - 1# * c + c ‚âà‚ü® +-cong ≥ (sym (-‚ÄødistribÀ°-* 1# c)) ‚ü©
   - (1# * c) + c ‚âà‚ü® +-cong ≥ (-‚Äøcong (*-identityÀ° c)) ‚ü©
   - c + c ‚âà‚ü® -‚ÄøinverseÀ° c ‚ü©
   0# ‚àé
  ) (‚âà‚Å±-sym (-‚Å±‚ÄøinverseÀ° p))

-‚Å±‚Äøinverse ≥ : RightInverse 0‚Å± -‚Å±_ _+‚Å±_
-‚Å±‚Äøinverse ≥ = comm+invÀ°‚áíinv ≥ +‚Å±-comm -‚Å±‚ÄøinverseÀ°

-‚Å±‚Äøinverse : Inverse 0‚Å± -‚Å±_ _+‚Å±_
-‚Å±‚Äøinverse = -‚Å±‚ÄøinverseÀ° , -‚Å±‚Äøinverse ≥

‚àô‚Å±-cong : ‚àÄ {c‚ÇÅ c‚ÇÇ} {p q} ‚Üí c‚ÇÅ ‚âà c‚ÇÇ ‚Üí p ‚âà‚Å± q ‚Üí c‚ÇÅ ‚àô‚Å± p ‚âà‚Å± c‚ÇÇ ‚àô‚Å± q
‚àô‚Å±-cong {c‚ÇÅ} {c‚ÇÇ} {0‚Å±}       {0‚Å±}       c‚ÇÅ‚âàc‚ÇÇ 0‚âà0 = 0‚âà0
‚àô‚Å±-cong {c‚ÇÅ} {c‚ÇÇ} {0‚Å±}       {c‚ÇÑ +x‚àô q} c‚ÇÅ‚âàc‚ÇÇ (0‚âà+ c‚ÇÑ‚âà0 0‚âàq) = 0‚âà+ (begin‚ü® setoid ‚ü© c‚ÇÇ * c‚ÇÑ ‚âà‚ü® *-congÀ° c‚ÇÑ‚âà0 ‚ü© c‚ÇÇ * 0# ‚âà‚ü® zero ≥ c‚ÇÇ ‚ü© 0# ‚àé) (‚àô‚Å±-cong c‚ÇÅ‚âàc‚ÇÇ 0‚âàq)
‚àô‚Å±-cong {c‚ÇÅ} {c‚ÇÇ} {c‚ÇÉ +x‚àô p} {0‚Å±}       c‚ÇÅ‚âàc‚ÇÇ (+‚âà0 c‚ÇÉ‚âà0 0‚âàp) = +‚âà0 (begin‚ü® setoid ‚ü© c‚ÇÅ * c‚ÇÉ ‚âà‚ü® *-congÀ° c‚ÇÉ‚âà0 ‚ü© c‚ÇÅ * 0# ‚âà‚ü® zero ≥ c‚ÇÅ ‚ü© 0# ‚àé) (‚àô‚Å±-cong (sym c‚ÇÅ‚âàc‚ÇÇ) 0‚âàp)
‚àô‚Å±-cong {c‚ÇÅ} {c‚ÇÇ} {c‚ÇÉ +x‚àô p} {c‚ÇÑ +x‚àô q} c‚ÇÅ‚âàc‚ÇÇ (+‚âà+ c‚ÇÉ‚âàc‚ÇÑ p‚âàq) = +‚âà+ (*-cong c‚ÇÅ‚âàc‚ÇÇ c‚ÇÉ‚âàc‚ÇÑ) (‚àô‚Å±-cong c‚ÇÅ‚âàc‚ÇÇ p‚âàq)

-‚Å±‚Äøcong : Congruent‚ÇÅ (-‚Å±_)
-‚Å±‚Äøcong = ‚àô‚Å±-cong refl

+‚Å±-isGroup : IsGroup _+‚Å±_ 0‚Å± (-‚Å±_)
+‚Å±-isGroup = record
  { isMonoid = +‚Å±-isMonoid
  ; inverse = -‚Å±‚Äøinverse
  ; ‚Åª¬π-cong = -‚Å±‚Äøcong
  }

+‚Å±-isAbelianGroup : IsAbelianGroup _+‚Å±_ 0‚Å± (-‚Å±_)
+‚Å±-isAbelianGroup = record
  { isGroup = +‚Å±-isGroup
  ; comm = +‚Å±-comm
  }

*‚Å±-comm : Commutative _*‚Å±_
*‚Å±-comm 0‚Å± 0‚Å± = ‚âà‚Å±-refl
*‚Å±-comm 0‚Å± (c‚ÇÇ +x‚àô q) = ‚âà‚Å±-refl
*‚Å±-comm (c‚ÇÅ +x‚àô p) 0‚Å± = ‚âà‚Å±-refl
*‚Å±-comm (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) = +‚âà+ (*-comm c‚ÇÅ c‚ÇÇ) (+‚Å±-cong (+‚Å±-comm (c‚ÇÅ ‚àô‚Å± q) (c‚ÇÇ ‚àô‚Å± p)) (+‚âà+ refl (*‚Å±-comm p q)))

0‚âà0‚àôp : ‚àÄ p ‚Üí 0‚Å± ‚âà‚Å± 0# ‚àô‚Å± p
0‚âà0‚àôp 0‚Å± = 0‚âà0
0‚âà0‚àôp (c +x‚àô p) = 0‚âà+ (zeroÀ° c) (0‚âà0‚àôp p)

*‚Å±-zero ≥ : ‚àÄ r ‚Üí r *‚Å± 0‚Å± ‚âà‚Å± 0‚Å±
*‚Å±-zero ≥ 0‚Å± = ‚âà‚Å±-refl
*‚Å±-zero ≥ (c +x‚àô p) = ‚âà‚Å±-refl

*‚Å±-congÀ° : LeftCongruent _*‚Å±_
*‚Å±-congÀ° {0‚Å±}       {p}        {q}        p‚âàq = ‚âà‚Å±-refl
*‚Å±-congÀ° {c‚ÇÅ +x‚àô r} {0‚Å±}       {0‚Å±}       0‚âà0 = ‚âà‚Å±-refl
*‚Å±-congÀ° {c‚ÇÅ +x‚àô r} {0‚Å±}       {c‚ÇÉ +x‚àô q} (0‚âà+ c‚ÇÉ‚âà0 0‚âàq) = 0‚âà+ (begin‚ü® setoid ‚ü© c‚ÇÅ * c‚ÇÉ ‚âà‚ü® *-congÀ° c‚ÇÉ‚âà0 ‚ü© c‚ÇÅ * 0# ‚âà‚ü® zero ≥ c‚ÇÅ ‚ü© 0# ‚àé) $
  begin‚ü® ‚âà‚Å±-setoid ‚ü©
  c‚ÇÅ ‚àô‚Å± 0‚Å± +‚Å± 0‚Å± +‚Å± 0‚Å±               ‚âà‚ü® +‚Å±-cong (+‚Å±-cong (‚àô‚Å±-cong (refl {c‚ÇÅ}) 0‚âàq) (0‚âà0‚àôp r)) (0‚âà+ refl (‚âà‚Å±-sym (*‚Å±-zero ≥ r))) ‚ü©
  c‚ÇÅ ‚àô‚Å± q +‚Å± 0# ‚àô‚Å± r +‚Å± x‚àô (r *‚Å± 0‚Å±) ‚âà‚ü® +‚Å±-cong (+‚Å±-congÀ° {c‚ÇÅ ‚àô‚Å± q} (‚àô‚Å±-cong (sym c‚ÇÉ‚âà0) ‚âà‚Å±-refl)) (+‚âà+ refl (*‚Å±-congÀ° {r} 0‚âàq)) ‚ü©
  c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÉ ‚àô‚Å± r +‚Å± x‚àô (r *‚Å± q)  ‚àé
*‚Å±-congÀ° {c‚ÇÅ +x‚àô r} {c‚ÇÇ +x‚àô p} {0‚Å±}       (+‚âà0 c‚ÇÇ‚âà0 0‚âàp) = +‚âà0 (begin‚ü® setoid ‚ü© c‚ÇÅ * c‚ÇÇ ‚âà‚ü® *-congÀ° c‚ÇÇ‚âà0 ‚ü© c‚ÇÅ * 0# ‚âà‚ü® zero ≥ c‚ÇÅ ‚ü© 0# ‚àé) $
  begin‚ü® ‚âà‚Å±-setoid ‚ü©
  c‚ÇÅ ‚àô‚Å± 0‚Å± +‚Å± 0‚Å± +‚Å± 0‚Å±               ‚âà‚ü® +‚Å±-cong (+‚Å±-cong (‚àô‚Å±-cong (refl {c‚ÇÅ}) 0‚âàp) (0‚âà0‚àôp r)) (0‚âà+ refl (‚âà‚Å±-sym (*‚Å±-zero ≥ r))) ‚ü©
  c‚ÇÅ ‚àô‚Å± p +‚Å± 0# ‚àô‚Å± r +‚Å± x‚àô (r *‚Å± 0‚Å±) ‚âà‚ü® +‚Å±-cong (+‚Å±-congÀ° {c‚ÇÅ ‚àô‚Å± p} (‚àô‚Å±-cong (sym c‚ÇÇ‚âà0) ‚âà‚Å±-refl)) (+‚âà+ refl (*‚Å±-congÀ° {r} 0‚âàp)) ‚ü©
  c‚ÇÅ ‚àô‚Å± p +‚Å± c‚ÇÇ ‚àô‚Å± r +‚Å± x‚àô (r *‚Å± p)  ‚àé
*‚Å±-congÀ° {c‚ÇÅ +x‚àô r} {c‚ÇÇ +x‚àô p} {c‚ÇÉ +x‚àô q} (+‚âà+ c‚ÇÇ‚âàc‚ÇÉ p‚âàq) = +‚âà+ (*-congÀ° c‚ÇÇ‚âàc‚ÇÉ) (+‚Å±-cong (+‚Å±-cong (‚àô‚Å±-cong refl p‚âàq) (‚àô‚Å±-cong c‚ÇÇ‚âàc‚ÇÉ ‚âà‚Å±-refl)) (+‚âà+ refl (*‚Å±-congÀ° p‚âàq)))

*‚Å±-cong ≥ : RightCongruent _*‚Å±_
*‚Å±-cong ≥ {r} {p} {q} p‚âàq = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  p *‚Å± r ‚âà‚ü® *‚Å±-comm p r ‚ü©
  r *‚Å± p ‚âà‚ü® *‚Å±-congÀ° p‚âàq ‚ü©
  r *‚Å± q ‚âà‚ü® *‚Å±-comm r q ‚ü©
  q *‚Å± r ‚àé

*‚Å±-cong : Congruent‚ÇÇ _*‚Å±_
*‚Å±-cong {p} {q} {r} {s} p‚âàq r‚âàs = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  p *‚Å± r ‚âà‚ü® *‚Å±-congÀ° r‚âàs ‚ü©
  p *‚Å± s ‚âà‚ü® *‚Å±-cong ≥ p‚âàq ‚ü©
  q *‚Å± s ‚àé

*‚Å±-isMagma : IsMagma _*‚Å±_
*‚Å±-isMagma = record
  { isEquivalence = ‚âà‚Å±-isEquivalence
  ; ‚àô-cong = *‚Å±-cong
  }

‚àô‚Å±-distrib-+‚Å± : ‚àÄ c p q ‚Üí c ‚àô‚Å± (p +‚Å± q) ‚âà‚Å± c ‚àô‚Å± p +‚Å± c ‚àô‚Å± q
‚àô‚Å±-distrib-+‚Å± c‚ÇÅ 0‚Å± q = ‚âà‚Å±-refl
‚àô‚Å±-distrib-+‚Å± c‚ÇÅ (c‚ÇÇ +x‚àô p) 0‚Å± = ‚âà‚Å±-refl
‚àô‚Å±-distrib-+‚Å± c‚ÇÅ (c‚ÇÇ +x‚àô p) (c‚ÇÉ +x‚àô q) = +‚âà+ (distribÀ° c‚ÇÅ c‚ÇÇ c‚ÇÉ) (‚àô‚Å±-distrib-+‚Å± c‚ÇÅ p q)

‚àô‚Å±-distrib-* : ‚àÄ c‚ÇÅ c‚ÇÇ p ‚Üí (c‚ÇÅ * c‚ÇÇ) ‚àô‚Å± p ‚âà‚Å± c‚ÇÅ ‚àô‚Å± (c‚ÇÇ ‚àô‚Å± p)
‚àô‚Å±-distrib-* c‚ÇÅ c‚ÇÇ 0‚Å± = ‚âà‚Å±-refl
‚àô‚Å±-distrib-* c‚ÇÅ c‚ÇÇ (c‚ÇÉ +x‚àô p) = +‚âà+ (*-assoc c‚ÇÅ c‚ÇÇ c‚ÇÉ) (‚àô‚Å±-distrib-* c‚ÇÅ c‚ÇÇ p)

x‚àô-distrib-+‚Å± : ‚àÄ p q ‚Üí x‚àô (p +‚Å± q) ‚âà‚Å± x‚àô p +‚Å± x‚àô q
x‚àô-distrib-+‚Å± 0‚Å± q = +‚âà+ (sym (+-identity ≥ 0#)) (+‚Å±-identityÀ° q)
x‚àô-distrib-+‚Å± (c‚ÇÅ +x‚àô p) 0‚Å± = +‚âà+ (sym (+-identity ≥ 0#)) ‚âà‚Å±-refl
x‚àô-distrib-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) = +‚âà+ (sym (+-identity ≥ 0#)) ‚âà‚Å±-refl

‚àô‚Å±-distrib-+ : ‚àÄ c‚ÇÅ c‚ÇÇ p ‚Üí (c‚ÇÅ + c‚ÇÇ) ‚àô‚Å± p ‚âà‚Å± c‚ÇÅ ‚àô‚Å± p +‚Å± c‚ÇÇ ‚àô‚Å± p
‚àô‚Å±-distrib-+ c‚ÇÅ c‚ÇÇ 0‚Å± = ‚âà‚Å±-refl
‚àô‚Å±-distrib-+ c‚ÇÅ c‚ÇÇ (c‚ÇÉ +x‚àô p) = +‚âà+ (distrib ≥ c‚ÇÉ c‚ÇÅ c‚ÇÇ) (‚àô‚Å±-distrib-+ c‚ÇÅ c‚ÇÇ p)

*‚Å±-distribÀ°-+‚Å± : _*‚Å±_ DistributesOverÀ° _+‚Å±_
*‚Å±-distribÀ°-+‚Å± 0‚Å± p q = ‚âà‚Å±-refl
*‚Å±-distribÀ°-+‚Å± (c‚ÇÅ +x‚àô r) 0‚Å± q = ‚âà‚Å±-refl
*‚Å±-distribÀ°-+‚Å± (c‚ÇÅ +x‚àô r) (c‚ÇÇ +x‚àô p) 0‚Å± = ‚âà‚Å±-refl
*‚Å±-distribÀ°-+‚Å± (c‚ÇÅ +x‚àô r) (c‚ÇÇ +x‚àô p) (c‚ÇÉ +x‚àô q) = +‚âà+ (distribÀ° c‚ÇÅ c‚ÇÇ c‚ÇÉ) $ begin‚ü® ‚âà‚Å±-setoid ‚ü©
  c‚ÇÅ ‚àô‚Å± (p +‚Å± q) +‚Å± (c‚ÇÇ + c‚ÇÉ) ‚àô‚Å± r +‚Å± x‚àô (r *‚Å± (p +‚Å± q))                         ‚âà‚ü® +‚Å±-cong (+‚Å±-cong (‚àô‚Å±-distrib-+‚Å± c‚ÇÅ p q) (‚àô‚Å±-distrib-+ c‚ÇÇ c‚ÇÉ r)) (+‚âà+ refl (*‚Å±-distribÀ°-+‚Å± r p q)) ‚ü©
  (c‚ÇÅ ‚àô‚Å± p +‚Å± c‚ÇÅ ‚àô‚Å± q) +‚Å± (c‚ÇÇ ‚àô‚Å± r +‚Å± c‚ÇÉ ‚àô‚Å± r) +‚Å± x‚àô (r *‚Å± p +‚Å± r *‚Å± q)          ‚âà‚ü® +‚Å±-cong (‚âà‚Å±-sym (+‚Å±-assoc (c‚ÇÅ ‚àô‚Å± p +‚Å± c‚ÇÅ ‚àô‚Å± q) _ _)) (x‚àô-distrib-+‚Å± (r *‚Å± p) (r *‚Å± q)) ‚ü©
  ((c‚ÇÅ ‚àô‚Å± p +‚Å± c‚ÇÅ ‚àô‚Å± q) +‚Å± c‚ÇÇ ‚àô‚Å± r) +‚Å± c‚ÇÉ ‚àô‚Å± r +‚Å± (x‚àô (r *‚Å± p) +‚Å± x‚àô (r *‚Å± q))   ‚âà‚ü® final (c‚ÇÅ ‚àô‚Å± p) _ _ _ _ _ ‚ü©
  c‚ÇÅ ‚àô‚Å± p +‚Å± c‚ÇÇ ‚àô‚Å± r +‚Å± x‚àô (r *‚Å± p) +‚Å± (c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÉ ‚àô‚Å± r +‚Å± x‚àô (r *‚Å± q))       ‚àé
  where
  final : ‚àÄ a b c d x y ‚Üí ((a +‚Å± b) +‚Å± c) +‚Å± d +‚Å± (x +‚Å± y) ‚âà‚Å± a +‚Å± c +‚Å± x +‚Å± (b +‚Å± d +‚Å± y)
  final a b c d x y = begin‚ü® ‚âà‚Å±-setoid ‚ü©
    (((a +‚Å± b) +‚Å± c) +‚Å± d) +‚Å± (x +‚Å± y) ‚âà‚ü® +‚Å±-cong ≥ (+‚Å±-cong ≥ (+‚Å±-assoc a b c)) ‚ü©
    ((a +‚Å± (b +‚Å± c)) +‚Å± d) +‚Å± (x +‚Å± y) ‚âà‚ü® +‚Å±-cong ≥ (+‚Å±-cong ≥ (+‚Å±-congÀ° {a} (+‚Å±-comm b c))) ‚ü©
    ((a +‚Å± (c +‚Å± b)) +‚Å± d) +‚Å± (x +‚Å± y) ‚âà‚ü® +‚Å±-cong ≥ (+‚Å±-assoc a (c +‚Å± b) d) ‚ü©
    (a +‚Å± ((c +‚Å± b) +‚Å± d)) +‚Å± (x +‚Å± y) ‚âà‚ü® +‚Å±-cong ≥ (+‚Å±-congÀ° {a} (+‚Å±-assoc c b d)) ‚ü©
    (a +‚Å± (c +‚Å± (b +‚Å± d))) +‚Å± (x +‚Å± y) ‚âà‚ü® +‚Å±-cong ≥ (‚âà‚Å±-sym (+‚Å±-assoc a c (b +‚Å± d))) ‚ü©
    ((a +‚Å± c) +‚Å± (b +‚Å± d)) +‚Å± (x +‚Å± y) ‚âà‚ü® +‚Å±-assoc (a +‚Å± c) (b +‚Å± d) (x +‚Å± y) ‚ü©
    (a +‚Å± c) +‚Å± ((b +‚Å± d) +‚Å± (x +‚Å± y)) ‚âà‚ü® +‚Å±-congÀ° {a +‚Å± c} (‚âà‚Å±-sym (+‚Å±-assoc (b +‚Å± d) x y)) ‚ü©
    (a +‚Å± c) +‚Å± (((b +‚Å± d) +‚Å± x) +‚Å± y) ‚âà‚ü® +‚Å±-congÀ° {a +‚Å± c} (+‚Å±-cong ≥ (+‚Å±-comm (b +‚Å± d) x)) ‚ü©
    (a +‚Å± c) +‚Å± ((x +‚Å± (b +‚Å± d)) +‚Å± y) ‚âà‚ü® +‚Å±-congÀ° {a +‚Å± c} (+‚Å±-assoc x (b +‚Å± d) y) ‚ü©
    (a +‚Å± c) +‚Å± (x +‚Å± ((b +‚Å± d) +‚Å± y)) ‚âà‚ü® ‚âà‚Å±-sym (+‚Å±-assoc (a +‚Å± c) x (b +‚Å± d +‚Å± y)) ‚ü©
    ((a +‚Å± c) +‚Å± x) +‚Å± ((b +‚Å± d) +‚Å± y) ‚àé

*‚Å±-distrib ≥-+‚Å± : _*‚Å±_ DistributesOver ≥ _+‚Å±_
*‚Å±-distrib ≥-+‚Å± = comm+distrÀ°‚áídistr ≥ +‚Å±-cong *‚Å±-comm *‚Å±-distribÀ°-+‚Å±

*‚Å±-distrib-+‚Å± : _*‚Å±_ DistributesOver _+‚Å±_
*‚Å±-distrib-+‚Å± = *‚Å±-distribÀ°-+‚Å± , *‚Å±-distrib ≥-+‚Å±

open import AKS.Unsafe using (TODO)

+x‚àô-distrib ≥-*‚Å± : ‚àÄ c p q ‚Üí (c +x‚àô p) *‚Å± q ‚âà‚Å± c ‚àô‚Å± q +‚Å± x‚àô (p *‚Å± q)
+x‚àô-distrib ≥-*‚Å± c‚ÇÅ p 0‚Å± = 0‚âà+ refl (‚âà‚Å±-sym (*‚Å±-zero ≥ p))
+x‚àô-distrib ≥-*‚Å± c‚ÇÅ p (c‚ÇÇ +x‚àô q) = +‚âà+ (sym (+-identity ≥ (c‚ÇÅ * c‚ÇÇ))) $ begin‚ü® ‚âà‚Å±-setoid ‚ü©
  (c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p) +‚Å± x‚àô (p *‚Å± q) ‚âà‚ü® +‚Å±-congÀ° (+‚âà+ refl (*‚Å±-comm p q)) ‚ü©
  (c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p) +‚Å± x‚àô (q *‚Å± p) ‚âà‚ü® +‚Å±-assoc (c‚ÇÅ ‚àô‚Å± q) (c‚ÇÇ ‚àô‚Å± p) (x‚àô (q *‚Å± p)) ‚ü©
  c‚ÇÅ ‚àô‚Å± q +‚Å± (c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (q *‚Å± p)) ‚âà‚ü® +‚Å±-congÀ° (‚âà‚Å±-sym (+x‚àô-distrib ≥-*‚Å± c‚ÇÇ q p)) ‚ü©
  c‚ÇÅ ‚àô‚Å± q +‚Å± (c‚ÇÇ +x‚àô q) *‚Å± p          ‚âà‚ü® +‚Å±-congÀ° (*‚Å±-comm (c‚ÇÇ +x‚àô q) p) ‚ü©
  c‚ÇÅ ‚àô‚Å± q +‚Å± p *‚Å± (c‚ÇÇ +x‚àô q)          ‚àé

+x‚àô-distribÀ°-*‚Å± : ‚àÄ c p q ‚Üí p *‚Å± (c +x‚àô q) ‚âà‚Å± c ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q)
+x‚àô-distribÀ°-*‚Å± c p q = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  p *‚Å± (c +x‚àô q)        ‚âà‚ü® *‚Å±-comm p (c +x‚àô q) ‚ü©
  (c +x‚àô q) *‚Å± p        ‚âà‚ü® +x‚àô-distrib ≥-*‚Å± c q p ‚ü©
  c ‚àô‚Å± p +‚Å± x‚àô (q *‚Å± p) ‚âà‚ü® +‚Å±-congÀ° (+‚âà+ refl (*‚Å±-comm q p)) ‚ü©
  c ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q) ‚àé

x‚àô-distrib-*‚Å± : ‚àÄ p q ‚Üí x‚àô (p *‚Å± q) ‚âà‚Å± p *‚Å± (x‚àô q)
x‚àô-distrib-*‚Å± 0‚Å± q = +‚âà0 refl ‚âà‚Å±-refl
x‚àô-distrib-*‚Å± (c‚ÇÅ +x‚àô p) 0‚Å± = +‚âà+ (sym (zero ≥ c‚ÇÅ)) $ begin‚ü® ‚âà‚Å±-setoid ‚ü©
  0‚Å± +‚Å± 0‚Å±                ‚âà‚ü® +‚Å±-cong (0‚âà0‚àôp p) (0‚âà+ refl (‚âà‚Å±-sym (*‚Å±-zero ≥ p))) ‚ü©
  0# ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± 0‚Å±) ‚àé
x‚àô-distrib-*‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) = +‚âà+ (sym (zero ≥ c‚ÇÅ)) $ begin‚ü® ‚âà‚Å±-setoid ‚ü©
  (c‚ÇÅ * c‚ÇÇ) +x‚àô (c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q))            ‚âà‚ü® TODO ‚ü©
  (c‚ÇÅ * c‚ÇÇ) +x‚àô (c‚ÇÅ ‚àô‚Å± q +‚Å± (c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q)))          ‚âà‚ü® +‚âà+ refl (+‚Å±-congÀ° (‚âà‚Å±-sym (+x‚àô-distribÀ°-*‚Å± c‚ÇÇ p q))) ‚ü©
  (c‚ÇÅ * c‚ÇÇ) +x‚àô (c‚ÇÅ ‚àô‚Å± q +‚Å± p *‚Å± (c‚ÇÇ +x‚àô q))                   ‚âà‚ü® TODO ‚ü©
  ((c‚ÇÅ * c‚ÇÇ) +x‚àô (c‚ÇÅ ‚àô‚Å± q)) +‚Å± 0# ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± (c‚ÇÇ +x‚àô q)) ‚àé


*‚Å±-assoc : Associative _*‚Å±_
*‚Å±-assoc 0‚Å± q r = ‚âà‚Å±-refl
*‚Å±-assoc (c‚ÇÅ +x‚àô p) 0‚Å± r = ‚âà‚Å±-refl
*‚Å±-assoc (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) 0‚Å± = ‚âà‚Å±-refl
*‚Å±-assoc (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) (c‚ÇÉ +x‚àô r) = +‚âà+ (*-assoc c‚ÇÅ c‚ÇÇ c‚ÇÉ) $ begin‚ü® ‚âà‚Å±-setoid ‚ü©
  (c‚ÇÅ * c‚ÇÇ) ‚àô‚Å± r +‚Å±  c‚ÇÉ ‚àô‚Å± (c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q)) +‚Å± x‚àô ((c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q)) *‚Å± r)
  ‚âà‚ü® TODO ‚ü©
  c‚ÇÅ ‚àô‚Å± (c‚ÇÇ ‚àô‚Å± r) +‚Å± (c‚ÇÉ ‚àô‚Å± (c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p) +‚Å± c‚ÇÉ ‚àô‚Å± (x‚àô (p *‚Å± q))) +‚Å± x‚àô ((c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q)) *‚Å± r)
  ‚âà‚ü® TODO ‚ü©
  c‚ÇÅ ‚àô‚Å± (c‚ÇÇ ‚àô‚Å± r +‚Å± c‚ÇÉ ‚àô‚Å± q +‚Å± x‚àô (q *‚Å± r)) +‚Å± c‚ÇÇ * c‚ÇÉ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± (c‚ÇÇ ‚àô‚Å± r +‚Å± c‚ÇÉ ‚àô‚Å± q +‚Å± x‚àô (q *‚Å± r))) ‚àé

*‚Å±-isSemigroup : IsSemigroup _*‚Å±_
*‚Å±-isSemigroup = record
  { isMagma = *‚Å±-isMagma
  ; assoc = *‚Å±-assoc
  }

‚àô‚Å±-identity : ‚àÄ p ‚Üí 1# ‚àô‚Å± p ‚âà‚Å± p
‚àô‚Å±-identity 0‚Å± = ‚âà‚Å±-refl
‚àô‚Å±-identity (c +x‚àô p) = +‚âà+ (*-identityÀ° c) (‚àô‚Å±-identity p)

*‚Å±-identityÀ° : LeftIdentity 1‚Å± _*‚Å±_
*‚Å±-identityÀ° 0‚Å± = ‚âà‚Å±-refl
*‚Å±-identityÀ° (c +x‚àô p) = +‚âà+ (*-identityÀ° c) $ begin‚ü® ‚âà‚Å±-setoid ‚ü©
  1# ‚àô‚Å± p +‚Å± 0‚Å± +‚Å± (0# +x‚àô 0‚Å±) ‚âà‚ü® +‚Å±-cong (+‚Å±-cong ≥ (‚àô‚Å±-identity p)) (+‚âà0 refl 0‚âà0) ‚ü©
  p +‚Å± 0‚Å± +‚Å± 0‚Å±                ‚âà‚ü® +‚Å±-identity ≥ (p +‚Å± 0‚Å±) ‚ü©
  p +‚Å± 0‚Å±                      ‚âà‚ü® +‚Å±-identity ≥ p ‚ü©
  p ‚àé

*‚Å±-identity ≥ : RightIdentity 1‚Å± _*‚Å±_
*‚Å±-identity ≥ = comm+idÀ°‚áíid ≥ *‚Å±-comm *‚Å±-identityÀ°

*‚Å±-identity : Identity 1‚Å± _*‚Å±_
*‚Å±-identity = *‚Å±-identityÀ° , *‚Å±-identity ≥

*‚Å±-1‚Å±-isMonoid : IsMonoid _*‚Å±_ 1‚Å±
*‚Å±-1‚Å±-isMonoid = record
  { isSemigroup = *‚Å±-isSemigroup
  ; identity = *‚Å±-identity
  }

+‚Å±-*‚Å±-isRing : IsRing _+‚Å±_ _*‚Å±_ -‚Å±_ 0‚Å± 1‚Å±
+‚Å±-*‚Å±-isRing = record
  { +-isAbelianGroup = +‚Å±-isAbelianGroup
  ; *-isMonoid = *‚Å±-1‚Å±-isMonoid
  ; distrib = *‚Å±-distrib-+‚Å±
  }

+‚Å±-*‚Å±-isCommutativeRing : IsCommutativeRing _+‚Å±_ _*‚Å±_ -‚Å±_ 0‚Å± 1‚Å±
+‚Å±-*‚Å±-isCommutativeRing = record
  { isRing = +‚Å±-*‚Å±-isRing
  ; *-comm = *‚Å±-comm
  }

+‚Å±-*‚Å±-commutativeRing : CommutativeRing c (c ‚äîÀ° ‚Ñì)
+‚Å±-*‚Å±-commutativeRing = record { isCommutativeRing = +‚Å±-*‚Å±-isCommutativeRing }

open CommutativeRing +‚Å±-*‚Å±-commutativeRing using () renaming (+-rawMonoid to +‚Å±-rawMonoid; zeroÀ° to *‚Å±-zeroÀ°)

+‚Å±-*‚Å±-almostCommutativeRing : AlmostCommutativeRing c (c ‚äîÀ° ‚Ñì)
+‚Å±-*‚Å±-almostCommutativeRing = fromCommutativeRing +‚Å±-*‚Å±-commutativeRing isZero
  where
  isZero : ‚àÄ x ‚Üí Maybe (0‚Å± ‚âà‚Å± x)
  isZero 0‚Å± = just ‚âà‚Å±-refl
  isZero (_ +x‚àô _) = nothing


0‚Å±‚ââ1‚Å± : 0‚Å± ‚ââ‚Å± 1‚Å±
0‚Å±‚ââ1‚Å± (0‚âà+ 1#‚âà0# _) = contradiction 1#‚âà0# 1#‚ââ0#

+‚Å±-*‚Å±-isNonZeroCommutativeRing : IsNonZeroCommutativeRing Polynomial‚Å± _‚âà‚Å±_ _+‚Å±_ _*‚Å±_ -‚Å±_ 0‚Å± 1‚Å±
+‚Å±-*‚Å±-isNonZeroCommutativeRing = record
  { isCommutativeRing = +‚Å±-*‚Å±-isCommutativeRing
  ; 0#‚ââ1# = 0‚Å±‚ââ1‚Å±
  }

+‚ââ0 : ‚àÄ {c} {p} ‚Üí c ‚âà 0# ‚Üí c +x‚àô p ‚ââ‚Å± 0‚Å± ‚Üí p ‚ââ‚Å± 0‚Å±
+‚ââ0 c‚âà0 c+x‚àôp‚ââ0‚Å± p‚âà0 = contradiction (+‚âà0 c‚âà0 (‚âà‚Å±-sym p‚âà0)) c+x‚àôp‚ââ0‚Å±

*‚Å±-cancelÀ°-lemma‚ÇÅ : ‚àÄ c‚ÇÅ p c‚ÇÇ q ‚Üí c‚ÇÅ ‚âà 0# ‚Üí 0‚Å± ‚âà‚Å± c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q) ‚Üí p *‚Å± 0‚Å± ‚âà‚Å± p *‚Å± (c‚ÇÇ +x‚àô q)
*‚Å±-cancelÀ°-lemma‚ÇÅ c‚ÇÅ p c‚ÇÇ q c‚ÇÅ‚âà0 pf = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  p *‚Å± 0‚Å±                           ‚âà‚ü® *‚Å±-zero ≥ p ‚ü©
  0‚Å±                                ‚âà‚ü® pf ‚ü©
  c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q) ‚âà‚ü® +‚Å±-cong ≥ (+‚Å±-cong ≥ (‚àô‚Å±-cong c‚ÇÅ‚âà0 (‚âà‚Å±-refl {q}))) ‚ü©
  0# ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q) ‚âà‚ü® +‚Å±-cong ≥ (+‚Å±-cong ≥ (‚âà‚Å±-sym (0‚âà0‚àôp q))) ‚ü©
  0‚Å± +‚Å± c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q)      ‚âà‚ü® ‚âà‚Å±-sym (+x‚àô-distribÀ°-*‚Å± c‚ÇÇ p q) ‚ü©
  p *‚Å± (c‚ÇÇ +x‚àô q)                   ‚àé

*‚Å±-cancelÀ°-lemma‚ÇÇ : ‚àÄ c‚ÇÅ p c‚ÇÇ q ‚Üí c‚ÇÇ ‚âà 0# ‚Üí 0‚Å± ‚âà‚Å± c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q) ‚Üí (c‚ÇÅ +x‚àô p) *‚Å± 0‚Å± ‚âà‚Å± (c‚ÇÅ +x‚àô p) *‚Å± q
*‚Å±-cancelÀ°-lemma‚ÇÇ c‚ÇÅ p c‚ÇÇ q c‚ÇÇ‚âà0 pf = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  (c‚ÇÅ +x‚àô p) *‚Å± 0‚Å±                  ‚âà‚ü® pf ‚ü©
  c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q) ‚âà‚ü® +‚Å±-cong ≥ (+‚Å±-congÀ° {c‚ÇÅ ‚àô‚Å± q} (‚àô‚Å±-cong c‚ÇÇ‚âà0 ‚âà‚Å±-refl)) ‚ü©
  c‚ÇÅ ‚àô‚Å± q +‚Å± 0# ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q) ‚âà‚ü® +‚Å±-cong ≥ (+‚Å±-congÀ° {c‚ÇÅ ‚àô‚Å± q} (‚âà‚Å±-sym (0‚âà0‚àôp p))) ‚ü©
  c‚ÇÅ ‚àô‚Å± q +‚Å± 0‚Å± +‚Å± x‚àô (p *‚Å± q)      ‚âà‚ü® +‚Å±-cong ≥ (+‚Å±-identity ≥ (c‚ÇÅ ‚àô‚Å± q)) ‚ü©
  c‚ÇÅ ‚àô‚Å± q +‚Å± x‚àô (p *‚Å± q)            ‚âà‚ü® ‚âà‚Å±-sym (+x‚àô-distrib ≥-*‚Å± c‚ÇÅ p q) ‚ü©
  (c‚ÇÅ +x‚àô p) *‚Å± q ‚àé


*‚Å±-cancelÀ° : ‚àÄ p {q r} ‚Üí p ‚ââ‚Å± 0‚Å± ‚Üí p *‚Å± q ‚âà‚Å± p *‚Å± r ‚Üí q ‚âà‚Å± r
*‚Å±-cancelÀ° 0‚Å±         {q}        {r}        p‚ââ0 p*q‚âàp*r = contradiction ‚âà‚Å±-refl p‚ââ0
*‚Å±-cancelÀ° (c‚ÇÅ +x‚àô p) {0‚Å±}       {0‚Å±}       p‚ââ0 p*q‚âàp*r = ‚âà‚Å±-refl
*‚Å±-cancelÀ° (c‚ÇÅ +x‚àô p) {0‚Å±}       {c‚ÇÉ +x‚àô r} p‚ââ0 (0‚âà+ c‚ÇÅ*c‚ÇÉ‚âà0 pf) with c‚ÇÅ ‚âà? 0#
... | yes c‚ÇÅ‚âà0 = *‚Å±-cancelÀ° p (+‚ââ0 c‚ÇÅ‚âà0 p‚ââ0) (*‚Å±-cancelÀ°-lemma‚ÇÅ c‚ÇÅ p c‚ÇÉ r c‚ÇÅ‚âà0 pf)
... | no  c‚ÇÅ‚ââ0 = 0‚âà+ c‚ÇÉ‚âà0 $ *‚Å±-cancelÀ° (c‚ÇÅ +x‚àô p) p‚ââ0 (*‚Å±-cancelÀ°-lemma‚ÇÇ c‚ÇÅ p c‚ÇÉ r c‚ÇÉ‚âà0 pf)
  where
  c‚ÇÉ‚âà0 = *-cancelÀ° c‚ÇÅ c‚ÇÅ‚ââ0 $ begin‚ü® setoid ‚ü© c‚ÇÅ * c‚ÇÉ ‚âà‚ü® c‚ÇÅ*c‚ÇÉ‚âà0 ‚ü© 0# ‚âà‚ü® sym (zero ≥ c‚ÇÅ) ‚ü© c‚ÇÅ * 0# ‚àé
*‚Å±-cancelÀ° (c‚ÇÅ +x‚àô p) {c‚ÇÇ +x‚àô q} {0‚Å±}       p‚ââ0 (+‚âà0 c‚ÇÅ*c‚ÇÇ‚âà0 pf) with c‚ÇÅ ‚âà? 0#
... | yes c‚ÇÅ‚âà0 = *‚Å±-cancelÀ° p (+‚ââ0 c‚ÇÅ‚âà0 p‚ââ0) (‚âà‚Å±-sym (*‚Å±-cancelÀ°-lemma‚ÇÅ c‚ÇÅ p c‚ÇÇ q c‚ÇÅ‚âà0 pf) )
... | no  c‚ÇÅ‚ââ0 = +‚âà0 c‚ÇÇ‚âà0 $ ‚âà‚Å±-sym (*‚Å±-cancelÀ° (c‚ÇÅ +x‚àô p) {q} {0‚Å±} p‚ââ0 (‚âà‚Å±-sym (*‚Å±-cancelÀ°-lemma‚ÇÇ c‚ÇÅ p c‚ÇÇ q c‚ÇÇ‚âà0 pf)))
  where
  c‚ÇÇ‚âà0 = *-cancelÀ° c‚ÇÅ c‚ÇÅ‚ââ0 $ begin‚ü® setoid ‚ü© c‚ÇÅ * c‚ÇÇ ‚âà‚ü® c‚ÇÅ*c‚ÇÇ‚âà0 ‚ü© 0# ‚âà‚ü® sym (zero ≥ c‚ÇÅ) ‚ü© c‚ÇÅ * 0# ‚àé
*‚Å±-cancelÀ° (c‚ÇÅ +x‚àô p) {c‚ÇÇ +x‚àô q} {c‚ÇÉ +x‚àô r} p‚ââ0 (+‚âà+ c‚ÇÅ*c‚ÇÇ‚âàc‚ÇÅ*c‚ÇÉ pf) with c‚ÇÅ ‚âà? 0#
... | yes c‚ÇÅ‚âà0 = *‚Å±-cancelÀ° p (+‚ââ0 c‚ÇÅ‚âà0 p‚ââ0) $ begin‚ü® ‚âà‚Å±-setoid ‚ü©
  0‚Å± +‚Å± p *‚Å± (c‚ÇÇ +x‚àô q)               ‚âà‚ü® +‚Å±-cong (0‚âà0‚àôp q) (+x‚àô-distribÀ°-*‚Å± c‚ÇÇ p q) ‚ü©
  0# ‚àô‚Å± q +‚Å± (c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q)) ‚âà‚ü® +‚Å±-cong ≥ (‚àô‚Å±-cong (sym c‚ÇÅ‚âà0) (‚âà‚Å±-refl {q})) ‚ü©
  c‚ÇÅ ‚àô‚Å± q +‚Å± (c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q)) ‚âà‚ü® ‚âà‚Å±-sym (+‚Å±-assoc (c‚ÇÅ ‚àô‚Å± q) _ _) ‚ü©
  (c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p) +‚Å± x‚àô (p *‚Å± q) ‚âà‚ü® pf ‚ü©
  (c‚ÇÅ ‚àô‚Å± r +‚Å± c‚ÇÉ ‚àô‚Å± p) +‚Å± x‚àô (p *‚Å± r) ‚âà‚ü® +‚Å±-assoc (c‚ÇÅ ‚àô‚Å± r) _ _ ‚ü©
  c‚ÇÅ ‚àô‚Å± r +‚Å± (c‚ÇÉ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± r)) ‚âà‚ü® +‚Å±-cong ≥ (‚àô‚Å±-cong c‚ÇÅ‚âà0 (‚âà‚Å±-refl {r})) ‚ü©
  0# ‚àô‚Å± r +‚Å± (c‚ÇÉ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± r)) ‚âà‚ü® +‚Å±-cong (‚âà‚Å±-sym (0‚âà0‚àôp r)) (‚âà‚Å±-sym (+x‚àô-distribÀ°-*‚Å± c‚ÇÉ p r)) ‚ü©
  0‚Å± +‚Å± p *‚Å± (c‚ÇÉ +x‚àô r)               ‚àé
... | no  c‚ÇÅ‚ââ0 = +‚âà+ c‚ÇÇ‚âàc‚ÇÉ $ *‚Å±-cancelÀ° (c‚ÇÅ +x‚àô p) p‚ââ0 $ begin‚ü® ‚âà‚Å±-setoid ‚ü©
  0‚Å± +‚Å± (c‚ÇÅ +x‚àô p) *‚Å± q                                 ‚âà‚ü® +‚Å±-cong (‚âà‚Å±-sym (-‚Å±‚ÄøinverseÀ° (c‚ÇÇ ‚àô‚Å± p))) (+x‚àô-distrib ≥-*‚Å± c‚ÇÅ p q) ‚ü©
  (-‚Å± (c‚ÇÇ ‚àô‚Å± p) +‚Å± c‚ÇÇ ‚àô‚Å± p) +‚Å± (c‚ÇÅ ‚àô‚Å± q +‚Å± x‚àô (p *‚Å± q)) ‚âà‚ü® lemma (-‚Å± (c‚ÇÇ ‚àô‚Å± p)) (c‚ÇÇ ‚àô‚Å± p) (c‚ÇÅ ‚àô‚Å± q) (x‚àô (p *‚Å± q)) ‚ü©
  -‚Å± (c‚ÇÇ ‚àô‚Å± p) +‚Å± ((c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p) +‚Å± x‚àô (p *‚Å± q)) ‚âà‚ü® +‚Å±-cong (-‚Å±‚Äøcong (‚àô‚Å±-cong c‚ÇÇ‚âàc‚ÇÉ (‚âà‚Å±-refl {p}))) pf ‚ü©
  -‚Å± (c‚ÇÉ ‚àô‚Å± p) +‚Å± ((c‚ÇÅ ‚àô‚Å± r +‚Å± c‚ÇÉ ‚àô‚Å± p) +‚Å± x‚àô (p *‚Å± r)) ‚âà‚ü® ‚âà‚Å±-sym (lemma (-‚Å± (c‚ÇÉ ‚àô‚Å± p)) (c‚ÇÉ ‚àô‚Å± p) (c‚ÇÅ ‚àô‚Å± r) (x‚àô (p *‚Å± r))) ‚ü©
  (-‚Å± (c‚ÇÉ ‚àô‚Å± p) +‚Å± c‚ÇÉ ‚àô‚Å± p) +‚Å± (c‚ÇÅ ‚àô‚Å± r +‚Å± x‚àô (p *‚Å± r)) ‚âà‚ü® +‚Å±-cong (-‚Å±‚ÄøinverseÀ° (c‚ÇÉ ‚àô‚Å± p)) (‚âà‚Å±-sym (+x‚àô-distrib ≥-*‚Å± c‚ÇÅ p r)) ‚ü©
  0‚Å± +‚Å± (c‚ÇÅ +x‚àô p) *‚Å± r                                 ‚àé
  where
  c‚ÇÇ‚âàc‚ÇÉ = *-cancelÀ° c‚ÇÅ c‚ÇÅ‚ââ0 c‚ÇÅ*c‚ÇÇ‚âàc‚ÇÅ*c‚ÇÉ
  lemma : ‚àÄ a b c d ‚Üí (a +‚Å± b) +‚Å± (c +‚Å± d) ‚âà‚Å± a +‚Å± ((c +‚Å± b) +‚Å± d)
  lemma = solve +‚Å±-*‚Å±-almostCommutativeRing

+‚Å±-*‚Å±-isIntegralDomain : IsIntegralDomain Polynomial‚Å± _‚âà‚Å±_ _+‚Å±_ _*‚Å±_ -‚Å±_ 0‚Å± 1‚Å±
+‚Å±-*‚Å±-isIntegralDomain = record
  { isNonZeroCommutativeRing = +‚Å±-*‚Å±-isNonZeroCommutativeRing
  ; *-cancelÀ° = *‚Å±-cancelÀ°
  }

+‚Å±-*‚Å±-integralDomain : IntegralDomain c (c ‚äîÀ° ‚Ñì)
+‚Å±-*‚Å±-integralDomain = record { isIntegralDomain = +‚Å±-*‚Å±-isIntegralDomain }

expandÀ¢-+x^-lemma : ‚àÄ o n c p ‚Üí expandÀ¢ o (c +x^ n ‚àô p) ‚âà‚Å± expandÀ¢ o (K c) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) p
expandÀ¢-+x^-lemma zero (‚Ñï+ n) c‚ÇÅ p = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  proj‚ÇÅ c‚ÇÅ        +x‚àô expandÀ¢ n p ‚âà‚ü® +‚âà+ (sym (+-identity ≥ (proj‚ÇÅ c‚ÇÅ))) ‚âà‚Å±-refl ‚ü©
  (proj‚ÇÅ c‚ÇÅ + 0#) +x‚àô expandÀ¢ n p ‚àé
expandÀ¢-+x^-lemma (suc o) n c‚ÇÅ p = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expandÀ¢ (suc o) (c‚ÇÅ +x^ n ‚àô p) ‚âà‚ü® +‚âà+ (sym (+-identity ≥ 0#)) (expandÀ¢-+x^-lemma o n c‚ÇÅ p) ‚ü©
  expandÀ¢ (suc o) (K c‚ÇÅ) +‚Å± expandÀ¢ (suc (o +‚Ñï ‚üÖ n ‚áì‚üÜ)) p ‚àé

expandÀ¢-‚â°-cong : ‚àÄ {o‚ÇÅ o‚ÇÇ} {p} ‚Üí o‚ÇÅ ‚â° o‚ÇÇ ‚Üí expandÀ¢ o‚ÇÅ p ‚âà‚Å± expandÀ¢ o‚ÇÇ p
expandÀ¢-‚â°-cong ‚â°-refl = ‚âà‚Å±-refl

expandÀ¢-raise‚ÇÅ : ‚àÄ n o‚ÇÅ p o‚ÇÇ q ‚Üí 0‚Å± ‚âà‚Å± expandÀ¢ o‚ÇÅ p +‚Å± expandÀ¢ o‚ÇÇ q ‚Üí 0‚Å± ‚âà‚Å± expandÀ¢ (n +‚Ñï o‚ÇÅ) p +‚Å± expandÀ¢ (n +‚Ñï o‚ÇÇ) q
expandÀ¢-raise‚ÇÅ zero    o‚ÇÅ p o‚ÇÇ q pf = pf
expandÀ¢-raise‚ÇÅ (suc n) o‚ÇÅ p o‚ÇÇ q pf = 0‚âà+ (+-identity ≥ 0#) (expandÀ¢-raise‚ÇÅ n o‚ÇÅ p o‚ÇÇ q pf)

expandÀ¢-raise‚ÇÇ : ‚àÄ n o‚ÇÅ r o‚ÇÇ p o‚ÇÉ q ‚Üí expandÀ¢ o‚ÇÅ r ‚âà‚Å± expandÀ¢ o‚ÇÇ p +‚Å± expandÀ¢ o‚ÇÉ q ‚Üí expandÀ¢ (n +‚Ñï o‚ÇÅ) r ‚âà‚Å± expandÀ¢ (n +‚Ñï o‚ÇÇ) p +‚Å± expandÀ¢ (n +‚Ñï o‚ÇÉ) q
expandÀ¢-raise‚ÇÇ zero    o‚ÇÅ r o‚ÇÇ p o‚ÇÉ q pf = pf
expandÀ¢-raise‚ÇÇ (suc n) o‚ÇÅ r o‚ÇÇ p o‚ÇÉ q pf = +‚âà+ (sym (+-identity ≥ 0#)) (expandÀ¢-raise‚ÇÇ n o‚ÇÅ r o‚ÇÇ p o‚ÇÉ q pf)


expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÅ : ‚àÄ o c‚ÇÅ c‚ÇÇ ‚Üí proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ ‚âà 0# ‚Üí 0‚Å± ‚âà‚Å± expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ o (K c‚ÇÇ)
expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÅ zero c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚âà0 = 0‚âà+ c‚ÇÅ+c‚ÇÇ‚âà0 0‚âà0
expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÅ (suc o) c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚âà0 = 0‚âà+ (+-identity ≥ 0#) (expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÅ o c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚âà0)

expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÇ : ‚àÄ o c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚ââ0 ‚Üí expandÀ¢ o (K (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ , c‚ÇÅ+c‚ÇÇ‚ââ0)) ‚âà‚Å± expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ o (K c‚ÇÇ)
expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÇ zero c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚ââ0 = ‚âà‚Å±-refl
expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÇ (suc o) c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚ââ0 = +‚âà+ (sym (+-identity ≥ 0#)) (expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÇ o c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚ââ0)

expand-+·µñ-spine-‚â°-K-homo : ‚àÄ o c p ‚Üí expand (+·µñ-spine-‚â°-K o c p) ‚âà‚Å± expandÀ¢ o (K c) +‚Å± expandÀ¢ o p
expand-+·µñ-spine-‚â°-K-homo o c‚ÇÅ (K c‚ÇÇ) with proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ ‚âà? 0#
... | yes c‚ÇÅ+c‚ÇÇ‚âà0 = expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÅ o c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚âà0
... | no  c‚ÇÅ+c‚ÇÇ‚ââ0 = expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÇ o c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚ââ0
expand-+·µñ-spine-‚â°-K-homo o c‚ÇÅ (c‚ÇÇ +x^ n‚ÇÇ ‚àô p) with proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ ‚âà? 0#
... | yes c‚ÇÅ+c‚ÇÇ‚âà0 = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) p                                           ‚âà‚ü® ‚âà‚Å±-sym (+‚Å±-identityÀ° (expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) p)) ‚ü©
  0‚Å± +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) p                                     ‚âà‚ü® +‚Å±-cong ≥ (expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÅ o c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚âà0) ‚ü©
  (expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ o (K c‚ÇÇ)) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) p ‚âà‚ü® +‚Å±-assoc (expandÀ¢ o (K c‚ÇÅ)) (expandÀ¢ o (K c‚ÇÇ)) (expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) p) ‚ü©
  expandÀ¢ o (K c‚ÇÅ) +‚Å± (expandÀ¢ o (K c‚ÇÇ) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) p) ‚âà‚ü® +‚Å±-congÀ° (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o n‚ÇÇ c‚ÇÇ p)) ‚ü©
  expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ o (c‚ÇÇ +x^ n‚ÇÇ ‚àô p) ‚àé
... | no  c‚ÇÅ+c‚ÇÇ‚ââ0 = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expandÀ¢ o ((proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ , c‚ÇÅ+c‚ÇÇ‚ââ0) +x^ n‚ÇÇ ‚àô p)                    ‚âà‚ü® expandÀ¢-+x^-lemma o n‚ÇÇ (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ , c‚ÇÅ+c‚ÇÇ‚ââ0) p ‚ü©
  expandÀ¢ o (K (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ , c‚ÇÅ+c‚ÇÇ‚ââ0)) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) p ‚âà‚ü® +‚Å±-cong ≥ (expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÇ o c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚ââ0) ‚ü©
  (expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ o (K c‚ÇÇ)) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) p        ‚âà‚ü® +‚Å±-assoc (expandÀ¢ o (K c‚ÇÅ)) (expandÀ¢ o (K c‚ÇÇ)) (expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) p)  ‚ü©
  expandÀ¢ o (K c‚ÇÅ) +‚Å± (expandÀ¢ o (K c‚ÇÇ) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) p)        ‚âà‚ü® +‚Å±-congÀ° (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o n‚ÇÇ c‚ÇÇ p)) ‚ü©
  expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ o (c‚ÇÇ +x^ n‚ÇÇ ‚àô p)          ‚àé

expand-+·µñ-spine-‚â°-homo : ‚àÄ o p q ‚Üí expand (+·µñ-spine-‚â° o p q) ‚âà‚Å± expandÀ¢ o p +‚Å± expandÀ¢ o q
expand-+·µñ-spine-<-homo : ‚àÄ o‚ÇÅ p o‚ÇÇ q o‚ÇÅ<o‚ÇÇ ‚Üí expand (+·µñ-spine-< o‚ÇÅ p o‚ÇÇ q o‚ÇÅ<o‚ÇÇ) ‚âà‚Å± expandÀ¢ o‚ÇÅ p +‚Å± expandÀ¢ o‚ÇÇ q
expand-+·µñ-spine-homo   : ‚àÄ o‚ÇÅ p o‚ÇÇ q ‚Üí expand (+·µñ-spine o‚ÇÅ p o‚ÇÇ q) ‚âà‚Å± expandÀ¢ o‚ÇÅ p +‚Å± expandÀ¢ o‚ÇÇ q

expand-+·µñ-spine-‚â°-homo-permute : ‚àÄ a b x y ‚Üí (a +‚Å± b) +‚Å± (x +‚Å± y) ‚âà‚Å± (a +‚Å± x) +‚Å± (b +‚Å± y)
expand-+·µñ-spine-‚â°-homo-permute = solve +‚Å±-*‚Å±-almostCommutativeRing

expand-+·µñ-spine-‚â°-homo o (K c‚ÇÅ) q = expand-+·µñ-spine-‚â°-K-homo o c‚ÇÅ q
expand-+·µñ-spine-‚â°-homo o (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) (K c‚ÇÇ) = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expand (+·µñ-spine-‚â°-K o c‚ÇÇ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p))    ‚âà‚ü® expand-+·µñ-spine-‚â°-K-homo o c‚ÇÇ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) ‚ü©
  expandÀ¢ o (K c‚ÇÇ) +‚Å± expandÀ¢ o (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) ‚âà‚ü® +‚Å±-comm (expandÀ¢ o (K c‚ÇÇ)) (expandÀ¢ o (c‚ÇÅ +x^ n‚ÇÅ ‚àô p)) ‚ü©
  expandÀ¢ o (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) +‚Å± expandÀ¢ o (K c‚ÇÇ) ‚àé
expand-+·µñ-spine-‚â°-homo o (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) (c‚ÇÇ +x^ n‚ÇÇ ‚àô q) with proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ ‚âà? 0#
... | yes c‚ÇÅ+c‚ÇÇ‚âà0 = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expand (+·µñ-spine (o +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q)                                              ‚âà‚ü® expand-+·µñ-spine-homo (o +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q ‚ü©
  expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q                                             ‚âà‚ü® ‚âà‚Å±-sym (+‚Å±-identityÀ° (expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q)) ‚ü©
  0‚Å± +‚Å± (expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q)                                     ‚âà‚ü® +‚Å±-cong ≥ (expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÅ o c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚âà0) ‚ü©
  (expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ o (K c‚ÇÇ)) +‚Å± (expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q) ‚âà‚ü® expand-+·µñ-spine-‚â°-homo-permute (expandÀ¢ o (K c‚ÇÅ)) (expandÀ¢ o (K c‚ÇÇ)) _ _ ‚ü©
  (expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p) +‚Å± (expandÀ¢ o (K c‚ÇÇ) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q) ‚âà‚ü® +‚Å±-cong (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o n‚ÇÅ c‚ÇÅ p)) (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o n‚ÇÇ c‚ÇÇ q)) ‚ü©
  expandÀ¢ o (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) +‚Å± expandÀ¢ o (c‚ÇÇ +x^ n‚ÇÇ ‚àô q)                                           ‚àé
  where
... | no c‚ÇÅ+c‚ÇÇ‚ââ0  with +·µñ-spine ‚üÖ n‚ÇÅ ‚áì‚üÜ p ‚üÖ n‚ÇÇ ‚áì‚üÜ q | expand-+·µñ-spine-homo ‚üÖ n‚ÇÅ ‚áì‚üÜ p ‚üÖ n‚ÇÇ ‚áì‚üÜ q
...   | 0·µñ | pf = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expandÀ¢ o (K (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ , c‚ÇÅ+c‚ÇÇ‚ââ0))                                                     ‚âà‚ü® ‚âà‚Å±-sym (+‚Å±-identity ≥ _) ‚ü©
  expandÀ¢ o (K (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ , c‚ÇÅ+c‚ÇÇ‚ââ0)) +‚Å± 0‚Å±                                               ‚âà‚ü® +‚Å±-cong (expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÇ o c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚ââ0) (expandÀ¢-raise‚ÇÅ o ‚üÖ n‚ÇÅ ‚áì‚üÜ p ‚üÖ n‚ÇÇ ‚áì‚üÜ q pf) ‚ü©
  (expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ o (K c‚ÇÇ)) +‚Å± (expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q) ‚âà‚ü® expand-+·µñ-spine-‚â°-homo-permute (expandÀ¢ o (K c‚ÇÅ)) (expandÀ¢ o (K c‚ÇÇ)) _ _ ‚ü©
  (expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p) +‚Å± (expandÀ¢ o (K c‚ÇÇ) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q) ‚âà‚ü® +‚Å±-cong (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o n‚ÇÅ c‚ÇÅ p)) (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o n‚ÇÇ c‚ÇÇ q)) ‚ü©
  expandÀ¢ o (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) +‚Å± expandÀ¢ o (c‚ÇÇ +x^ n‚ÇÇ ‚àô q)                                           ‚àé
...   | x^ zero   ‚àô r | pf = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expand (+·µñ-spine-‚â°-K o (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ , c‚ÇÅ+c‚ÇÇ‚ââ0) r)                                        ‚âà‚ü® expand-+·µñ-spine-‚â°-K-homo o (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ , c‚ÇÅ+c‚ÇÇ‚ââ0) r ‚ü©
  expandÀ¢ o (K (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ , c‚ÇÅ+c‚ÇÇ‚ââ0)) +‚Å± expandÀ¢ o r                                     ‚âà‚ü® +‚Å±-cong (expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÇ o c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚ââ0) (expandÀ¢-‚â°-cong (‚â°-sym (Nat.+-identity ≥ o))) ‚ü©
  (expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ o (K c‚ÇÇ)) +‚Å± expandÀ¢ (o +‚Ñï 0) r                                     ‚âà‚ü® +‚Å±-congÀ° (expandÀ¢-raise‚ÇÇ o 0 r ‚üÖ n‚ÇÅ ‚áì‚üÜ p ‚üÖ n‚ÇÇ ‚áì‚üÜ q pf) ‚ü©
  (expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ o (K c‚ÇÇ)) +‚Å± (expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q) ‚âà‚ü® expand-+·µñ-spine-‚â°-homo-permute (expandÀ¢ o (K c‚ÇÅ)) (expandÀ¢ o (K c‚ÇÇ)) _ _ ‚ü©
  (expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p) +‚Å± (expandÀ¢ o (K c‚ÇÇ) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q) ‚âà‚ü® +‚Å±-cong (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o n‚ÇÅ c‚ÇÅ p)) (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o n‚ÇÇ c‚ÇÇ q)) ‚ü©
  expandÀ¢ o (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) +‚Å± expandÀ¢ o (c‚ÇÇ +x^ n‚ÇÇ ‚àô q)                                           ‚àé
...   | x^ suc n‚ÇÉ ‚àô r | pf = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expandÀ¢ o ((proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ , c‚ÇÅ+c‚ÇÇ‚ââ0) +x^ ‚üÖ suc n‚ÇÉ ‚áë‚üÜ ‚àô r)                                  ‚âà‚ü® expandÀ¢-+x^-lemma o ‚üÖ suc n‚ÇÉ ‚áë‚üÜ (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ , c‚ÇÅ+c‚ÇÇ‚ââ0) r ‚ü©
  expandÀ¢ o (K (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ , c‚ÇÅ+c‚ÇÇ‚ââ0)) +‚Å± expandÀ¢ (o +‚Ñï suc n‚ÇÉ) r                         ‚âà‚ü® +‚Å±-cong ≥ (expandÀ¢-+·µñ-spine-‚â°-K-homo-lemma‚ÇÇ o c‚ÇÅ c‚ÇÇ c‚ÇÅ+c‚ÇÇ‚ââ0) ‚ü©
  (expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ o (K c‚ÇÇ)) +‚Å± expandÀ¢ (o +‚Ñï suc n‚ÇÉ) r                                ‚âà‚ü® +‚Å±-congÀ° (expandÀ¢-raise‚ÇÇ o (suc n‚ÇÉ) r ‚üÖ n‚ÇÅ ‚áì‚üÜ p ‚üÖ n‚ÇÇ ‚áì‚üÜ q pf) ‚ü©
  (expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ o (K c‚ÇÇ)) +‚Å± (expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q) ‚âà‚ü® expand-+·µñ-spine-‚â°-homo-permute (expandÀ¢ o (K c‚ÇÅ)) (expandÀ¢ o (K c‚ÇÇ)) _ _ ‚ü©
  (expandÀ¢ o (K c‚ÇÅ) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p) +‚Å± (expandÀ¢ o (K c‚ÇÇ) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q) ‚âà‚ü® +‚Å±-cong (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o n‚ÇÅ c‚ÇÅ p)) (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o n‚ÇÇ c‚ÇÇ q)) ‚ü©
  expandÀ¢ o (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) +‚Å± expandÀ¢ o (c‚ÇÇ +x^ n‚ÇÇ ‚àô q)                                           ‚àé

expand-+·µñ-spine-<-homo o‚ÇÅ (K c‚ÇÅ) o‚ÇÇ q o‚ÇÅ<o‚ÇÇ = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expandÀ¢ o‚ÇÅ (c‚ÇÅ +x^ ‚üÖ o‚ÇÇ ‚à∏ o‚ÇÅ ‚áë‚üÜ ‚àô q)                     ‚âà‚ü® expandÀ¢-+x^-lemma o‚ÇÅ ‚üÖ o‚ÇÇ ‚à∏ o‚ÇÅ ‚áë‚üÜ c‚ÇÅ q ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) +‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ ‚üÖ o‚ÇÇ ‚à∏ o‚ÇÅ ‚áë‚üÜ ‚áì‚üÜ) q ‚âà‚ü® +‚Å±-congÀ° (expandÀ¢-‚â°-cong lemma) ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) +‚Å± expandÀ¢ o‚ÇÇ q                        ‚àé
  where
  lemma : o‚ÇÅ +‚Ñï ‚üÖ ‚üÖ o‚ÇÇ ‚à∏ o‚ÇÅ ‚áë‚üÜ ‚áì‚üÜ ‚â° o‚ÇÇ
  lemma = begin‚ü® ‚â°-setoid ‚Ñï ‚ü©
    o‚ÇÅ +‚Ñï ‚üÖ ‚üÖ o‚ÇÇ ‚à∏ o‚ÇÅ ‚áë‚üÜ ‚áì‚üÜ ‚â°‚ü® ‚â°-cong (Œª x ‚Üí o‚ÇÅ +‚Ñï x) (‚Ñï‚Üí‚Ñï‚Å∫‚Üí‚Ñï (o‚ÇÇ ‚à∏ o‚ÇÅ) {‚â¢‚áí¬¨‚âü (m<n‚áín‚à∏m‚â¢0 o‚ÇÅ<o‚ÇÇ)}) ‚ü©
    o‚ÇÅ +‚Ñï (o‚ÇÇ ‚à∏ o‚ÇÅ)         ‚â°‚ü® m+[n‚à∏m]‚â°n {o‚ÇÅ} {o‚ÇÇ} (<‚áí‚â§ o‚ÇÅ<o‚ÇÇ) ‚ü©
    o‚ÇÇ ‚àé
expand-+·µñ-spine-<-homo o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) o‚ÇÇ q o‚ÇÅ<o‚ÇÇ with +·µñ-spine ‚üÖ n‚ÇÅ ‚áì‚üÜ p (o‚ÇÇ ‚à∏ o‚ÇÅ) q | expand-+·µñ-spine-homo ‚üÖ n‚ÇÅ ‚áì‚üÜ p (o‚ÇÇ ‚à∏ o‚ÇÅ) q
... | 0·µñ | pf = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ)                                                               ‚âà‚ü® ‚âà‚Å±-sym (+‚Å±-identity ≥ (expandÀ¢ o‚ÇÅ (K c‚ÇÅ))) ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) +‚Å± 0‚Å±                                                         ‚âà‚ü® +‚Å±-congÀ° (expandÀ¢-raise‚ÇÅ o‚ÇÅ ‚üÖ n‚ÇÅ ‚áì‚üÜ p (o‚ÇÇ ‚à∏ o‚ÇÅ) q pf) ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) +‚Å± (expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p +‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï (o‚ÇÇ ‚à∏ o‚ÇÅ)) q) ‚âà‚ü® ‚âà‚Å±-sym (+‚Å±-assoc (expandÀ¢ o‚ÇÅ (K c‚ÇÅ)) _ _) ‚ü©
  (expandÀ¢ o‚ÇÅ (K c‚ÇÅ) +‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p) +‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï (o‚ÇÇ ‚à∏ o‚ÇÅ)) q ‚âà‚ü® +‚Å±-cong (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o‚ÇÅ n‚ÇÅ c‚ÇÅ p)) (expandÀ¢-‚â°-cong (m+[n‚à∏m]‚â°n (<‚áí‚â§ o‚ÇÅ<o‚ÇÇ))) ‚ü©
  expandÀ¢ o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) +‚Å± expandÀ¢ o‚ÇÇ q                                       ‚àé
... | x^ zero   ‚àô r | pf = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expand (+·µñ-spine-‚â°-K o‚ÇÅ c‚ÇÅ r)                                                   ‚âà‚ü® expand-+·µñ-spine-‚â°-K-homo o‚ÇÅ c‚ÇÅ r ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) +‚Å± expandÀ¢ o‚ÇÅ r                                               ‚âà‚ü® +‚Å±-congÀ° (expandÀ¢-‚â°-cong (‚â°-sym (Nat.+-identity ≥ o‚ÇÅ))) ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) +‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï 0) r                                        ‚âà‚ü® +‚Å±-congÀ° (expandÀ¢-raise‚ÇÇ o‚ÇÅ 0 r ‚üÖ n‚ÇÅ ‚áì‚üÜ p (o‚ÇÇ ‚à∏ o‚ÇÅ) q pf) ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) +‚Å± (expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p +‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï (o‚ÇÇ ‚à∏ o‚ÇÅ)) q) ‚âà‚ü® ‚âà‚Å±-sym (+‚Å±-assoc (expandÀ¢ o‚ÇÅ (K c‚ÇÅ)) _ _) ‚ü©
  (expandÀ¢ o‚ÇÅ (K c‚ÇÅ) +‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p) +‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï (o‚ÇÇ ‚à∏ o‚ÇÅ)) q ‚âà‚ü® +‚Å±-cong (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o‚ÇÅ n‚ÇÅ c‚ÇÅ p)) (expandÀ¢-‚â°-cong (m+[n‚à∏m]‚â°n (<‚áí‚â§ o‚ÇÅ<o‚ÇÇ))) ‚ü©
  expandÀ¢ o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) +‚Å± expandÀ¢ o‚ÇÇ q                                       ‚àé
... | x^ suc o‚ÇÉ ‚àô r | pf = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expandÀ¢ o‚ÇÅ (c‚ÇÅ +x^ ‚üÖ suc o‚ÇÉ ‚áë‚üÜ ‚àô r)                                             ‚âà‚ü® expandÀ¢-+x^-lemma o‚ÇÅ ‚üÖ suc o‚ÇÉ ‚áë‚üÜ c‚ÇÅ r ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) +‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï suc o‚ÇÉ) r                                   ‚âà‚ü® +‚Å±-congÀ° (expandÀ¢-raise‚ÇÇ o‚ÇÅ (suc o‚ÇÉ) r ‚üÖ n‚ÇÅ ‚áì‚üÜ p (o‚ÇÇ ‚à∏ o‚ÇÅ) q pf) ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) +‚Å± (expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p +‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï (o‚ÇÇ ‚à∏ o‚ÇÅ)) q) ‚âà‚ü® ‚âà‚Å±-sym (+‚Å±-assoc (expandÀ¢ o‚ÇÅ (K c‚ÇÅ)) _ _) ‚ü©
  (expandÀ¢ o‚ÇÅ (K c‚ÇÅ) +‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p) +‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï (o‚ÇÇ ‚à∏ o‚ÇÅ)) q ‚âà‚ü® +‚Å±-cong (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o‚ÇÅ n‚ÇÅ c‚ÇÅ p)) (expandÀ¢-‚â°-cong (m+[n‚à∏m]‚â°n (<‚áí‚â§ o‚ÇÅ<o‚ÇÇ))) ‚ü©
  expandÀ¢ o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) +‚Å± expandÀ¢ o‚ÇÇ q                                       ‚àé

expand-+·µñ-spine-homo o‚ÇÅ p o‚ÇÇ q with <-cmp o‚ÇÅ o‚ÇÇ
... | tri< o‚ÇÅ<o‚ÇÇ _ _  = expand-+·µñ-spine-<-homo o‚ÇÅ p o‚ÇÇ q o‚ÇÅ<o‚ÇÇ
... | tri‚âà _ ‚â°-refl _ = expand-+·µñ-spine-‚â°-homo o‚ÇÅ p q
... | tri> _ _ o‚ÇÅ>o‚ÇÇ  = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expand (+·µñ-spine-< o‚ÇÇ q o‚ÇÅ p o‚ÇÅ>o‚ÇÇ) ‚âà‚ü® expand-+·µñ-spine-<-homo o‚ÇÇ q o‚ÇÅ p o‚ÇÅ>o‚ÇÇ ‚ü©
  expandÀ¢ o‚ÇÇ q +‚Å± expandÀ¢ o‚ÇÅ p        ‚âà‚ü® +‚Å±-comm (expandÀ¢ o‚ÇÇ q) (expandÀ¢ o‚ÇÅ p) ‚ü©
  expandÀ¢ o‚ÇÅ p +‚Å± expandÀ¢ o‚ÇÇ q        ‚àé

expand-+·µñ-homo : ‚àÄ p q ‚Üí expand (p +·µñ q) ‚âà‚Å± expand p +‚Å± expand q
expand-+·µñ-homo 0·µñ q = ‚âà‚Å±-refl
expand-+·µñ-homo (x^ o‚ÇÅ ‚àô p) 0·µñ = ‚âà‚Å±-sym (+‚Å±-identity ≥ (expand (x^ o‚ÇÅ ‚àô p)))
expand-+·µñ-homo (x^ o‚ÇÅ ‚àô p) (x^ o‚ÇÇ ‚àô q) = expand-+·µñ-spine-homo o‚ÇÅ p o‚ÇÇ q

expandÀ¢-*·µñ-K-lemma : ‚àÄ o‚ÇÅ o‚ÇÇ c‚ÇÅ c‚ÇÇ ‚Üí expandÀ¢ (o‚ÇÅ +‚Ñï o‚ÇÇ) (K (c‚ÇÅ *-nonzero c‚ÇÇ)) ‚âà‚Å± expandÀ¢ o‚ÇÅ (K c‚ÇÅ) *‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ)
expandÀ¢-*·µñ-K-lemma zero zero c‚ÇÅ c‚ÇÇ = +‚âà+ refl (0‚âà+ refl 0‚âà0)
expandÀ¢-*·µñ-K-lemma zero (suc o‚ÇÇ) c‚ÇÅ c‚ÇÇ = +‚âà+ (sym (zero ≥ (proj‚ÇÅ c‚ÇÅ))) $ begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expandÀ¢ o‚ÇÇ (K (c‚ÇÅ *-nonzero c‚ÇÇ))                              ‚âà‚ü® expandÀ¢-*·µñ-K-lemma zero o‚ÇÇ c‚ÇÅ c‚ÇÇ ‚ü©
  (proj‚ÇÅ c‚ÇÅ +x‚àô 0‚Å±) *‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ)                        ‚âà‚ü® +x‚àô-distrib ≥-*‚Å± (proj‚ÇÅ c‚ÇÅ) 0‚Å± (expandÀ¢ o‚ÇÇ (K c‚ÇÇ)) ‚ü©
  proj‚ÇÅ c‚ÇÅ ‚àô‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ) +‚Å± x‚àô (0‚Å± *‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ)) ‚âà‚ü® ‚âà‚Å±-refl ‚ü©
  proj‚ÇÅ c‚ÇÅ ‚àô‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ) +‚Å± x‚àô 0‚Å±                        ‚âà‚ü® +‚Å±-cong ≥ (‚âà‚Å±-sym (+‚Å±-identity ≥ (proj‚ÇÅ c‚ÇÅ ‚àô‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ)))) ‚ü©
  proj‚ÇÅ c‚ÇÅ ‚àô‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ) +‚Å± 0‚Å± +‚Å± x‚àô 0‚Å±                  ‚àé

expandÀ¢-*·µñ-K-lemma (suc o‚ÇÅ) o‚ÇÇ c‚ÇÅ c‚ÇÇ = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  0# +x‚àô expandÀ¢ (o‚ÇÅ +‚Ñï o‚ÇÇ) (K (c‚ÇÅ *-nonzero c‚ÇÇ))  ‚âà‚ü® +‚âà+ refl (expandÀ¢-*·µñ-K-lemma o‚ÇÅ o‚ÇÇ c‚ÇÅ c‚ÇÇ) ‚ü©
  0# +x‚àô (expandÀ¢ o‚ÇÅ (K c‚ÇÅ) *‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ))  ‚âà‚ü® ‚âà‚Å±-refl ‚ü©
  0‚Å± +‚Å± x‚àô (expandÀ¢ o‚ÇÅ (K c‚ÇÅ) *‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ)) ‚âà‚ü® +‚Å±-cong ≥ (0‚âà0‚àôp (expandÀ¢ o‚ÇÇ (K c‚ÇÇ))) ‚ü©
  0# ‚àô‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ) +‚Å± x‚àô (expandÀ¢ o‚ÇÅ (K c‚ÇÅ) *‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ)) ‚âà‚ü® ‚âà‚Å±-sym (+x‚àô-distrib ≥-*‚Å± 0# _ _) ‚ü©
  (0# +x‚àô expandÀ¢ o‚ÇÅ (K c‚ÇÅ)) *‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ)  ‚àé

expandÀ¢-‚àô·µñ-spine-homo : ‚àÄ o‚ÇÅ c o‚ÇÇ p ‚Üí expandÀ¢ (o‚ÇÅ +‚Ñï o‚ÇÇ) (‚àô·µñ-spine c p) ‚âà‚Å± expandÀ¢ o‚ÇÅ (K c) *‚Å± expandÀ¢ o‚ÇÇ p
expandÀ¢-‚àô·µñ-spine-homo o‚ÇÅ c‚ÇÅ o‚ÇÇ (K c‚ÇÇ) = expandÀ¢-*·µñ-K-lemma o‚ÇÅ o‚ÇÇ c‚ÇÅ c‚ÇÇ
expandÀ¢-‚àô·µñ-spine-homo o‚ÇÅ c‚ÇÅ o‚ÇÇ (c‚ÇÇ +x^ n‚ÇÇ ‚àô q) = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expandÀ¢ (o‚ÇÅ +‚Ñï o‚ÇÇ) ((c‚ÇÅ *-nonzero c‚ÇÇ) +x^ n‚ÇÇ ‚àô ‚àô·µñ-spine c‚ÇÅ q)                                ‚âà‚ü® expandÀ¢-+x^-lemma (o‚ÇÅ +‚Ñï o‚ÇÇ) n‚ÇÇ (c‚ÇÅ *-nonzero c‚ÇÇ) (‚àô·µñ-spine c‚ÇÅ q) ‚ü©
  expandÀ¢ (o‚ÇÅ +‚Ñï o‚ÇÇ) (K (c‚ÇÅ *-nonzero c‚ÇÇ)) +‚Å± expandÀ¢ ((o‚ÇÅ +‚Ñï o‚ÇÇ) +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) (‚àô·µñ-spine c‚ÇÅ q)  ‚âà‚ü® +‚Å±-congÀ° (expandÀ¢-‚â°-cong (Nat.+-assoc o‚ÇÅ o‚ÇÇ ‚üÖ n‚ÇÇ ‚áì‚üÜ)) ‚ü©
  expandÀ¢ (o‚ÇÅ +‚Ñï o‚ÇÇ) (K (c‚ÇÅ *-nonzero c‚ÇÇ)) +‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ)) (‚àô·µñ-spine c‚ÇÅ q)  ‚âà‚ü® +‚Å±-cong (expandÀ¢-*·µñ-K-lemma o‚ÇÅ o‚ÇÇ c‚ÇÅ c‚ÇÇ) (expandÀ¢-‚àô·µñ-spine-homo o‚ÇÅ c‚ÇÅ (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q) ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) *‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ) +‚Å± expandÀ¢ o‚ÇÅ (K c‚ÇÅ) *‚Å± expandÀ¢ (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q     ‚âà‚ü® ‚âà‚Å±-sym (*‚Å±-distribÀ°-+‚Å± (expandÀ¢ o‚ÇÅ (K c‚ÇÅ)) (expandÀ¢ o‚ÇÇ (K c‚ÇÇ)) _) ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) *‚Å± (expandÀ¢ o‚ÇÇ (K c‚ÇÇ) +‚Å± expandÀ¢ (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q)                        ‚âà‚ü® *‚Å±-congÀ° (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o‚ÇÇ n‚ÇÇ c‚ÇÇ q)) ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) *‚Å± expandÀ¢ o‚ÇÇ (c‚ÇÇ +x^ n‚ÇÇ ‚àô q)                                              ‚àé

expand-*·µñ-spine-homo : ‚àÄ o‚ÇÅ p o‚ÇÇ q ‚Üí expand (*·µñ-spine o‚ÇÅ p o‚ÇÇ q) ‚âà‚Å± expandÀ¢ o‚ÇÅ p *‚Å± expandÀ¢ o‚ÇÇ q
expand-*·µñ-spine-homo o‚ÇÅ (K c‚ÇÅ)          o‚ÇÇ q = expandÀ¢-‚àô·µñ-spine-homo o‚ÇÅ c‚ÇÅ o‚ÇÇ q
expand-*·µñ-spine-homo o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) o‚ÇÇ (K c‚ÇÇ) = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expandÀ¢ (o‚ÇÅ +‚Ñï o‚ÇÇ) (‚àô·µñ-spine c‚ÇÇ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p)) ‚âà‚ü® expandÀ¢-‚â°-cong (Nat.+-comm o‚ÇÅ o‚ÇÇ) ‚ü©
  expandÀ¢ (o‚ÇÇ +‚Ñï o‚ÇÅ) (‚àô·µñ-spine c‚ÇÇ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p)) ‚âà‚ü® expandÀ¢-‚àô·µñ-spine-homo o‚ÇÇ c‚ÇÇ o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) ‚ü©
  expandÀ¢ o‚ÇÇ (K c‚ÇÇ) *‚Å± expandÀ¢ o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p)  ‚âà‚ü® *‚Å±-comm _ _ ‚ü©
  expandÀ¢ o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) *‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ)  ‚àé
expand-*·µñ-spine-homo o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) o‚ÇÇ (c‚ÇÇ +x^ n‚ÇÇ ‚àô q) = begin‚ü® ‚âà‚Å±-setoid ‚ü©
  expand ( x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ) +·µñ
           c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q +·µñ
           c‚ÇÇ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) ‚àô p +·µñ
           *·µñ-spine (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q )
  ‚âà‚ü® expand-+·µñ-homo
        ( x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ) +·µñ c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q +·µñ c‚ÇÇ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) ‚àô p )
        (*·µñ-spine (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q)
   ‚ü©
  expand ( x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ) +·µñ
           c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q +·µñ
           c‚ÇÇ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) ‚àô p ) +‚Å±
  expand ( *·µñ-spine (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q )
  ‚âà‚ü® +‚Å±-cong (expand-+·µñ-homo (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ) +·µñ c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q)
                             (c‚ÇÇ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) ‚àô p))
             (expand-*·µñ-spine-homo (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q)
   ‚ü©
  expand ( x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ)  +·µñ
           c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q ) +‚Å±
  expandÀ¢ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) (‚àô·µñ-spine c‚ÇÇ p) +‚Å±
  expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p *‚Å± expandÀ¢ (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q
  ‚âà‚ü® +‚Å±-cong ≥ (+‚Å±-cong (expand-+·µñ-homo (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ))
                                       (c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q))
                       (expandÀ¢-‚â°-cong (‚â°-cong (Œª x ‚Üí x +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) (Nat.+-comm o‚ÇÅ o‚ÇÇ))))

   ‚ü©
  expandÀ¢ (o‚ÇÅ +‚Ñï o‚ÇÇ) (K (c‚ÇÅ *-nonzero c‚ÇÇ)) +‚Å±
  expandÀ¢ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) (‚àô·µñ-spine c‚ÇÅ q) +‚Å±
  expandÀ¢ (o‚ÇÇ +‚Ñï o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) (‚àô·µñ-spine c‚ÇÇ p) +‚Å±
  expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p *‚Å± expandÀ¢ (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q
  ‚âà‚ü® +‚Å±-cong ≥ (+‚Å±-cong (+‚Å±-congÀ° {expandÀ¢ (o‚ÇÅ +‚Ñï o‚ÇÇ) (K (c‚ÇÅ *-nonzero c‚ÇÇ))}
                                 (expandÀ¢-‚â°-cong {p = ‚àô·µñ-spine c‚ÇÅ q} (Nat.+-assoc o‚ÇÅ o‚ÇÇ ‚üÖ n‚ÇÇ ‚áì‚üÜ)))
                       (expandÀ¢-‚â°-cong (Nat.+-assoc o‚ÇÇ o‚ÇÅ ‚üÖ n‚ÇÅ ‚áì‚üÜ)))
   ‚ü©
  expandÀ¢ (o‚ÇÅ +‚Ñï o‚ÇÇ) (K (c‚ÇÅ *-nonzero c‚ÇÇ)) +‚Å±
  expandÀ¢ (o‚ÇÅ +‚Ñï (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ)) (‚àô·µñ-spine c‚ÇÅ q) +‚Å±
  expandÀ¢ (o‚ÇÇ +‚Ñï (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ)) (‚àô·µñ-spine c‚ÇÇ p) +‚Å±
  expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p *‚Å± expandÀ¢ (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q
  ‚âà‚ü® +‚Å±-cong ≥ (+‚Å±-cong (+‚Å±-cong (expandÀ¢-*·µñ-K-lemma o‚ÇÅ o‚ÇÇ c‚ÇÅ c‚ÇÇ)
                                (expandÀ¢-‚àô·µñ-spine-homo o‚ÇÅ c‚ÇÅ (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q))
                       (expandÀ¢-‚àô·µñ-spine-homo o‚ÇÇ c‚ÇÇ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p))
   ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) *‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ) +‚Å±
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) *‚Å± expandÀ¢ (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q +‚Å±
  expandÀ¢ o‚ÇÇ (K c‚ÇÇ) *‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p +‚Å±
  expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p *‚Å± expandÀ¢ (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q
  ‚âà‚ü® +‚Å±-cong ≥ {expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p *‚Å± expandÀ¢ (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q}
              (+‚Å±-congÀ° (*‚Å±-comm (expandÀ¢ o‚ÇÇ (K c‚ÇÇ)) (expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p) ))
   ‚ü©
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) *‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ) +‚Å±
  expandÀ¢ o‚ÇÅ (K c‚ÇÅ) *‚Å± expandÀ¢ (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q +‚Å±
  expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p *‚Å± expandÀ¢ o‚ÇÇ (K c‚ÇÇ) +‚Å±
  expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p *‚Å± expandÀ¢ (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q
  ‚âà‚ü® ‚âà‚Å±-sym (foil (expandÀ¢ o‚ÇÅ (K c‚ÇÅ)) _ (expandÀ¢ o‚ÇÇ (K c‚ÇÇ)) _) ‚ü©
  (expandÀ¢ o‚ÇÅ (K c‚ÇÅ) +‚Å± expandÀ¢ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p) *‚Å± (expandÀ¢ o‚ÇÇ (K c‚ÇÇ) +‚Å± expandÀ¢ (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q)
  ‚âà‚ü® *‚Å±-cong (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o‚ÇÅ n‚ÇÅ c‚ÇÅ p)) (‚âà‚Å±-sym (expandÀ¢-+x^-lemma o‚ÇÇ n‚ÇÇ c‚ÇÇ q)) ‚ü©
  expandÀ¢ o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) *‚Å± expandÀ¢ o‚ÇÇ (c‚ÇÇ +x^ n‚ÇÇ ‚àô q) ‚àé
  where
  foil : ‚àÄ a b c d ‚Üí (a +‚Å± b) *‚Å± (c +‚Å± d) ‚âà‚Å± a *‚Å± c +‚Å± a *‚Å± d +‚Å± b *‚Å± c +‚Å± b *‚Å± d
  foil = solve +‚Å±-*‚Å±-almostCommutativeRing

expand-*·µñ-homo : ‚àÄ p q ‚Üí expand (p *·µñ q) ‚âà‚Å± expand p *‚Å± expand q
expand-*·µñ-homo 0·µñ q = *‚Å±-zeroÀ° (expand q)
expand-*·µñ-homo (x^ o‚ÇÅ ‚àô p) 0·µñ = ‚âà‚Å±-sym (*‚Å±-zero ≥ (expand (x^ o‚ÇÅ ‚àô p)))
expand-*·µñ-homo (x^ o‚ÇÅ ‚àô p) (x^ o‚ÇÇ ‚àô q) = expand-*·µñ-spine-homo o‚ÇÅ p o‚ÇÇ q

expand-‚àô·µñ-homo : ‚àÄ c p ‚Üí expand (c ‚àô·µñ p) ‚âà‚Å± proj‚ÇÅ c ‚àô‚Å± expand p
expand-‚àô·µñ-homo c‚ÇÅ 0·µñ = ‚âà‚Å±-refl
expand-‚àô·µñ-homo c‚ÇÅ (x^ n ‚àô p) = loop c‚ÇÅ n p
  where
  loop : ‚àÄ c n p ‚Üí expandÀ¢ n (‚àô·µñ-spine c p) ‚âà‚Å± proj‚ÇÅ c ‚àô‚Å± expandÀ¢ n p
  loop c‚ÇÅ zero (K c‚ÇÇ) = ‚âà‚Å±-refl
  loop c‚ÇÅ zero (c‚ÇÇ +x^ n‚ÇÇ ‚àô p) = +‚âà+ refl (loop c‚ÇÅ (pred ‚üÖ n‚ÇÇ ‚áì‚üÜ) p)
  loop c‚ÇÅ (suc n) p = +‚âà+ (sym (zero ≥ (proj‚ÇÅ c‚ÇÅ))) (loop c‚ÇÅ n p)

expand‚Äø-·µñ‚Äøhomo : ‚àÄ p ‚Üí expand (-·µñ p) ‚âà‚Å± -‚Å± (expand p)
expand‚Äø-·µñ‚Äøhomo = expand-‚àô·µñ-homo -1#-nonzero

---- Witness me ----

expand-isRelHomomorphism : IsRelHomomorphism _‚âà·µñ_ _‚âà‚Å±_ expand
expand-isRelHomomorphism = record { cong = expand-cong }

expand-isRingHomomorphism : IsRingHomomorphism +·µñ-*·µñ-rawRing +‚Å±-*‚Å±-rawRing expand
expand-isRingHomomorphism = record
  { isRelHomomorphism = expand-isRelHomomorphism
  ; +-homo = expand-+·µñ-homo
  ; *-homo = expand-*·µñ-homo
  ; -‚Äøhomo = expand‚Äø-·µñ‚Äøhomo
  ; 0#-homo = ‚âà‚Å±-refl
  ; 1#-homo = ‚âà‚Å±-refl
  }

expand-isRingMonomorphism : IsRingMonomorphism +·µñ-*·µñ-rawRing +‚Å±-*‚Å±-rawRing expand
expand-isRingMonomorphism = record
  { isRingHomomorphism = expand-isRingHomomorphism
  ; injective = expand-injective
  }

open RingConsequences expand-isRingMonomorphism using (R‚ÇÇ-isIntegralDomain‚ÜíR‚ÇÅ-isIntegralDomain)

+·µñ-*·µñ-isIntegralDomain : IsIntegralDomain Polynomial _‚âà·µñ_ _+·µñ_ _*·µñ_ -·µñ_ 0·µñ 1·µñ
+·µñ-*·µñ-isIntegralDomain = R‚ÇÇ-isIntegralDomain‚ÜíR‚ÇÅ-isIntegralDomain +‚Å±-*‚Å±-isIntegralDomain

+·µñ-*·µñ-integralDomain : IntegralDomain (c ‚äîÀ° ‚Ñì) (c ‚äîÀ° ‚Ñì)
+·µñ-*·µñ-integralDomain = record { isIntegralDomain = +·µñ-*·µñ-isIntegralDomain }
open IntegralDomain +·µñ-*·µñ-integralDomain using () renaming (commutativeRing to +·µñ-*·µñ-commutativeRing)
open CommutativeRing +·µñ-*·µñ-commutativeRing using () renaming (+-cong to +·µñ-cong; +-congÀ° to +·µñ-congÀ°; +-cong ≥ to +·µñ-cong ≥; +-identity ≥ to +·µñ-identity ≥; +-assoc to +·µñ-assoc; +-comm to +·µñ-comm)
open CommutativeRing +·µñ-*·µñ-commutativeRing using () renaming (zero ≥ to *·µñ-zero ≥; -‚ÄøinverseÀ° to -·µñ‚ÄøinverseÀ°; -‚Äøinverse ≥ to -·µñ‚Äøinverse ≥; *-comm to *·µñ-comm; distrib ≥ to *·µñ-distrib ≥-+·µñ; distribÀ° to *·µñ-distribÀ°-+·µñ)

+·µñ-*·µñ-almostCommutativeRing : AlmostCommutativeRing (c ‚äîÀ° ‚Ñì) (c ‚äîÀ° ‚Ñì)
+·µñ-*·µñ-almostCommutativeRing = fromCommutativeRing +·µñ-*·µñ-commutativeRing isZero
  where
  isZero : ‚àÄ x ‚Üí Maybe (0·µñ ‚âà·µñ x)
  isZero 0·µñ = just ‚âà·µñ-refl
  isZero (x^ _ ‚àô _) = nothing


degree‚Å±‚â°degreeÀ¢ : ‚àÄ n p ‚Üí degree‚Å± (expandÀ¢ n p) ‚â° ‚ü® n +‚Ñï degreeÀ¢ p ‚ü©
degree‚Å±‚â°degreeÀ¢ zero (K c) with proj‚ÇÅ c ‚âà? 0#
... | yes c‚âà0 = contradiction c‚âà0 (proj‚ÇÇ c)
... | no  _   = ‚â°-refl
degree‚Å±‚â°degreeÀ¢ zero (c +x^ (‚Ñï+ i) ‚àô p) rewrite degree‚Å±‚â°degreeÀ¢ i p = ‚â°-refl
degree‚Å±‚â°degreeÀ¢ (suc n) p rewrite degree‚Å±‚â°degreeÀ¢ n p = ‚â°-refl

degree‚Å±‚â°degree : ‚àÄ p ‚Üí degree‚Å± (expand p) ‚â° degree p
degree‚Å±‚â°degree 0·µñ = ‚â°-refl
degree‚Å±‚â°degree (x^ n ‚àô p) = degree‚Å±‚â°degreeÀ¢ n p

degreeÀ¢-cong : ‚àÄ {p q} ‚Üí p ‚âàÀ¢ q ‚Üí degreeÀ¢ p ‚â° degreeÀ¢ q
degreeÀ¢-cong {K c‚ÇÅ} {K c‚ÇÇ} (K‚âà c‚ÇÅ‚âàc‚ÇÇ) = ‚â°-refl
degreeÀ¢-cong {c‚ÇÅ +x^ n ‚àô p} {c‚ÇÇ +x^ n ‚àô q} (+‚âà c‚ÇÅ‚âàc‚ÇÇ ‚â°-refl p‚âàq) rewrite degreeÀ¢-cong p‚âàq = ‚â°-refl

degree-cong : ‚àÄ {p q} ‚Üí p ‚âà·µñ q ‚Üí degree p ‚â° degree q
degree-cong {0·µñ} {0·µñ} 0·µñ‚âà = ‚â°-refl
degree-cong {x^ n ‚àô p} {x^ n ‚àô q} (0·µñ‚ââ ‚â°-refl p‚âàq) rewrite degreeÀ¢-cong p‚âàq = ‚â°-refl

degree‚Å±-cong : ‚àÄ {p q} ‚Üí p ‚âà‚Å± q ‚Üí degree‚Å± p ‚â° degree‚Å± q
degree‚Å±-cong {0‚Å±} {0‚Å±} 0‚âà0 = ‚â°-refl
degree‚Å±-cong {0‚Å±} {c‚ÇÇ +x‚àô q} (0‚âà+ c‚ÇÇ‚âà0 0‚âàq) with degree‚Å± q | degree‚Å±-cong 0‚âàq
... | ‚ü® _ ‚ü© | ()
... | -‚àû    | ‚â°-refl with c‚ÇÇ ‚âà? 0#
...   | yes _ = ‚â°-refl
...   | no c‚ÇÇ‚ââ0 = contradiction c‚ÇÇ‚âà0 c‚ÇÇ‚ââ0
degree‚Å±-cong {c‚ÇÅ +x‚àô p} {0‚Å±} (+‚âà0 c‚ÇÅ‚âà0 0‚âàp) with degree‚Å± p | degree‚Å±-cong 0‚âàp
... | ‚ü® _ ‚ü© | ()
... | -‚àû    | ‚â°-refl with c‚ÇÅ ‚âà? 0#
...   | yes _   = ‚â°-refl
...   | no c‚ÇÅ‚ââ0 = contradiction c‚ÇÅ‚âà0 c‚ÇÅ‚ââ0
degree‚Å±-cong {c‚ÇÅ +x‚àô p} {c‚ÇÇ +x‚àô q} (+‚âà+ c‚ÇÅ‚âàc‚ÇÇ p‚âàq) with degree‚Å± p | degree‚Å± q | degree‚Å±-cong p‚âàq
... | ‚ü® n ‚ü© | ‚ü® n ‚ü© | ‚â°-refl = ‚â°-refl
... | -‚àû    | -‚àû    | ‚â°-refl with c‚ÇÅ ‚âà? 0# | c‚ÇÇ ‚âà? 0#
...   | yes c‚ÇÅ‚âà0 | yes c‚ÇÇ‚âà0 = ‚â°-refl
...   | yes c‚ÇÅ‚âà0 | no  c‚ÇÇ‚ââ0 = contradiction (begin‚ü® setoid ‚ü© c‚ÇÇ ‚âà‚ü® sym c‚ÇÅ‚âàc‚ÇÇ ‚ü© c‚ÇÅ ‚âà‚ü® c‚ÇÅ‚âà0 ‚ü© 0# ‚àé) c‚ÇÇ‚ââ0
...   | no  c‚ÇÅ‚ââ0 | yes c‚ÇÇ‚âà0 = contradiction (begin‚ü® setoid ‚ü© c‚ÇÅ ‚âà‚ü® c‚ÇÅ‚âàc‚ÇÇ     ‚ü© c‚ÇÇ ‚âà‚ü® c‚ÇÇ‚âà0 ‚ü© 0# ‚àé) c‚ÇÅ‚ââ0
...   | no  c‚ÇÅ‚ââ0 | no  c‚ÇÇ‚ââ0 = ‚â°-refl

module _ where
  open ‚â§-Reasoning using (begin_; _‚â§‚ü®_‚ü©_) renaming (_‚â°‚ü®_‚ü©_ to _‚â°‚â§‚ü®_‚ü©_; _‚àé to _‚â§‚àé)

  degree‚Å±-+‚Å± : ‚àÄ p q ‚Üí degree‚Å± (p +‚Å± q) ‚â§·µà degree‚Å± p ‚äî·µà degree‚Å± q
  degree‚Å±-+‚Å± 0‚Å± q = ‚â§·µà-refl
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) 0‚Å± with degree‚Å± (c‚ÇÅ +x‚àô p)
  ... | -‚àû = ‚â§·µà-refl
  ... | ‚ü® _ ‚ü© = ‚â§·µà-refl
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) with degree‚Å± (p +‚Å± q) | degree‚Å± p | degree‚Å± q | degree‚Å±-+‚Å± p q
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | n     | m     | (-‚àû‚â§ _) with c‚ÇÅ + c‚ÇÇ ‚âà? 0#
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | n     | m     | (-‚àû‚â§ _) | yes c‚ÇÅ+c‚ÇÇ‚âà0 = -‚àû‚â§ _
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | -‚àû    | m     | (-‚àû‚â§ _) | no  c‚ÇÅ+c‚ÇÇ‚ââ0 with c‚ÇÅ ‚âà? 0#
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | -‚àû    | -‚àû    | (-‚àû‚â§ _) | no  c‚ÇÅ+c‚ÇÇ‚ââ0 | yes c‚ÇÅ‚âà0 with c‚ÇÇ ‚âà? 0#
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | -‚àû    | -‚àû    | (-‚àû‚â§ _) | no  c‚ÇÅ+c‚ÇÇ‚ââ0 | yes c‚ÇÅ‚âà0 | yes c‚ÇÇ‚âà0 = contradiction (begin‚ü® setoid ‚ü© c‚ÇÅ + c‚ÇÇ ‚âà‚ü® +-cong c‚ÇÅ‚âà0 c‚ÇÇ‚âà0 ‚ü© 0# + 0# ‚âà‚ü® +-identity ≥ 0# ‚ü© 0# ‚àé) c‚ÇÅ+c‚ÇÇ‚ââ0
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | -‚àû    | -‚àû    | (-‚àû‚â§ _) | no  c‚ÇÅ+c‚ÇÇ‚ââ0 | yes c‚ÇÅ‚âà0 | no  c‚ÇÇ‚ââ0 = ‚â§·µà-refl
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | -‚àû    | ‚ü® m ‚ü© | (-‚àû‚â§ _) | no  c‚ÇÅ+c‚ÇÇ‚ââ0 | yes c‚ÇÅ‚âà0 = ‚ü® 0‚â§n ‚ü©
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | -‚àû    | -‚àû    | (-‚àû‚â§ _) | no  c‚ÇÅ+c‚ÇÇ‚ââ0 | no  c‚ÇÅ‚ââ0 with c‚ÇÇ ‚âà? 0#
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | -‚àû    | -‚àû    | (-‚àû‚â§ _) | no  c‚ÇÅ+c‚ÇÇ‚ââ0 | no  c‚ÇÅ‚ââ0 | yes c‚ÇÇ‚âà0 = ‚â§·µà-refl
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | -‚àû    | -‚àû    | (-‚àû‚â§ _) | no  c‚ÇÅ+c‚ÇÇ‚ââ0 | no  c‚ÇÅ‚ââ0 | no  c‚ÇÇ‚ââ0 = ‚ü® ‚â§-reflexive (‚äî-identity ≥ (Œª x ‚Üí 0‚â§n) 0) ‚ü©
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | -‚àû    | ‚ü® m ‚ü© | (-‚àû‚â§ _) | no  c‚ÇÅ+c‚ÇÇ‚ââ0 | no  c‚ÇÅ‚ââ0 = ‚ü® begin 0 ‚â§‚ü® 0‚â§n ‚ü© suc m ‚â°‚â§‚ü® ‚â°-sym (‚äî-identity ≥ (Œª x ‚Üí 0‚â§n) (suc m)) ‚ü© 0 ‚äî suc m ‚â§‚àé ‚ü©
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | ‚ü® n ‚ü© | -‚àû    | (-‚àû‚â§ _) | no  c‚ÇÅ+c‚ÇÇ‚ââ0 with c‚ÇÇ ‚âà? 0#
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | ‚ü® n ‚ü© | -‚àû    | (-‚àû‚â§ _) | no  c‚ÇÅ+c‚ÇÇ‚ââ0 | yes c‚ÇÇ‚âà0 = ‚ü® 0‚â§n ‚ü©
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | ‚ü® n ‚ü© | -‚àû    | (-‚àû‚â§ _) | no  c‚ÇÅ+c‚ÇÇ‚ââ0 | no  c‚ÇÇ‚ââ0 = ‚ü® begin 0 ‚â§‚ü® 0‚â§n ‚ü© suc n ‚â°‚â§‚ü® ‚â°-sym (‚äî-identityÀ° (Œª x ‚Üí 0‚â§n) (suc n)) ‚ü© suc n ‚äî 0 ‚â§‚àé ‚ü©
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | -‚àû    | ‚ü® n ‚ü© | ‚ü® m ‚ü© | (-‚àû‚â§ _) | no  c‚ÇÅ+c‚ÇÇ‚ââ0 = ‚ü® 0‚â§n ‚ü©
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | ‚ü® r ‚ü© | -‚àû    | m     | _ with c‚ÇÅ ‚âà? 0#
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | ‚ü® r ‚ü© | -‚àû    | -‚àû    | _       | yes c‚ÇÅ‚âà0 with c‚ÇÇ ‚âà? 0#
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | ‚ü® r ‚ü© | -‚àû    | -‚àû    | ()      | yes c‚ÇÅ‚âà0 | yes c‚ÇÇ‚âà0
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | ‚ü® r ‚ü© | -‚àû    | -‚àû    | ()      | yes c‚ÇÅ‚âà0 | no  c‚ÇÇ‚ââ0
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | ‚ü® r ‚ü© | -‚àû    | ‚ü® m ‚ü© | ‚ü® r‚â§m ‚ü© | yes c‚ÇÅ‚âà0 = ‚ü® suc-mono-‚â§ r‚â§m ‚ü©
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | ‚ü® r ‚ü© | -‚àû    | -‚àû    | pf      | no  c‚ÇÅ‚ââ0 with c‚ÇÇ ‚âà? 0#
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | ‚ü® r ‚ü© | -‚àû    | -‚àû    | ()      | no  c‚ÇÅ‚ââ0 | yes c‚ÇÇ‚âà0
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | ‚ü® r ‚ü© | -‚àû    | -‚àû    | ()      | no  c‚ÇÅ‚ââ0 | no  c‚ÇÇ‚ââ0
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | ‚ü® r ‚ü© | -‚àû    | ‚ü® m ‚ü© | ‚ü® r‚â§m ‚ü© | no  c‚ÇÅ‚ââ0 = ‚ü® begin suc r ‚â§‚ü® suc-mono-‚â§ r‚â§m ‚ü© suc m ‚â°‚â§‚ü® ‚â°-sym (‚äî-identity ≥ (Œª x ‚Üí 0‚â§n) (suc m)) ‚ü© 0 ‚äî suc m ‚â§‚àé ‚ü©
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | ‚ü® r ‚ü© | ‚ü® n ‚ü© | -‚àû    | ‚ü® r‚â§n ‚ü© with c‚ÇÇ ‚âà? 0#
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | ‚ü® r ‚ü© | ‚ü® n ‚ü© | -‚àû    | ‚ü® r‚â§n ‚ü© | yes c‚ÇÇ‚âà0 = ‚ü® suc-mono-‚â§ r‚â§n ‚ü©
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | ‚ü® r ‚ü© | ‚ü® n ‚ü© | -‚àû    | ‚ü® r‚â§n ‚ü© | no  c‚ÇÇ‚ââ0 = ‚ü® begin suc r ‚â§‚ü® suc-mono-‚â§ r‚â§n ‚ü© suc n ‚â°‚â§‚ü® ‚â°-sym (‚äî-identityÀ° (Œª x ‚Üí 0‚â§n) (suc n)) ‚ü© suc n ‚äî 0 ‚â§‚àé ‚ü©
  degree‚Å±-+‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) | ‚ü® r ‚ü© | ‚ü® n ‚ü© | ‚ü® m ‚ü© | ‚ü® r‚â§n‚äîm ‚ü© = ‚ü® begin suc r ‚â§‚ü® suc-mono-‚â§ r‚â§n‚äîm ‚ü© suc (n ‚äî m) ‚â°‚â§‚ü® +-distribÀ°-‚äî 1 n m ‚ü© suc n ‚äî suc m ‚â§‚àé ‚ü©

  -- degree‚Å±-*‚Å± : ‚àÄ p q ‚Üí degree‚Å± (p *‚Å± q) ‚â° degree‚Å± p +·µà degree‚Å± q
  -- degree‚Å±-*‚Å± 0‚Å± q = ‚â°-refl
  -- degree‚Å±-*‚Å± (c‚ÇÅ +x‚àô p) 0‚Å± with degree‚Å± p
  -- ... | ‚ü® n ‚ü© = ‚â°-refl
  -- ... | -‚àû with c‚ÇÅ ‚âà? 0#
  -- ...   | yes _ = ‚â°-refl
  -- ...   | no  _ = ‚â°-refl
  -- degree‚Å±-*‚Å± (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) = {!!}
  --   -- lemma : degree‚Å± ((c‚ÇÅ * c‚ÇÇ) +x‚àô (c‚ÇÅ ‚àô‚Å± q +‚Å± c‚ÇÇ ‚àô‚Å± p +‚Å± x‚àô (p *‚Å± q))) ‚â° degree‚Å± (c‚ÇÅ +x‚àô p) +·µà degree‚Å± (c‚ÇÇ +x‚àô q)
  --   -- lemma = {!!}


degree·µñ-+·µñ : ‚àÄ p q ‚Üí degree (p +·µñ q) ‚â§·µà degree p ‚äî·µà degree q
degree·µñ-+·µñ p q = begin
  degree (p +·µñ q)                          ‚â°·µà‚ü® ‚â°-sym (degree‚Å±‚â°degree (p +·µñ q)) ‚ü©
  degree‚Å± (expand (p +·µñ q))                ‚â°·µà‚ü® degree‚Å±-cong (expand-+·µñ-homo p q) ‚ü©
  degree‚Å± (expand p +‚Å± expand q)           ‚â§·µà‚ü® degree‚Å±-+‚Å± (expand p) (expand q) ‚ü©
  degree‚Å± (expand p) ‚äî·µà degree‚Å± (expand q) ‚â°·µà‚ü® ‚â°-cong‚ÇÇ _‚äî·µà_ (degree‚Å±‚â°degree p) (degree‚Å±‚â°degree q) ‚ü©
  degree p ‚äî·µà degree q                     ‚àé·µà
  where
  open ‚â§·µà-Reasoning

‚àô·µñ-spine-degreeÀ¢ : ‚àÄ a p ‚Üí degreeÀ¢ (‚àô·µñ-spine a p) ‚â° degreeÀ¢ p
‚àô·µñ-spine-degreeÀ¢ a (K c) = ‚â°-refl
‚àô·µñ-spine-degreeÀ¢ a (c +x^ n ‚àô p) = ‚â°-cong (Œª x ‚Üí ‚üÖ n ‚áì‚üÜ +‚Ñï x) (‚àô·µñ-spine-degreeÀ¢ a p)

‚àô·µñ-degree : ‚àÄ a p ‚Üí degree (a ‚àô·µñ p) ‚â° degree p
‚àô·µñ-degree a 0·µñ = ‚â°-refl
‚àô·µñ-degree a (x^ n ‚àô p) = ‚â°-cong (Œª x ‚Üí ‚ü® n +‚Ñï x ‚ü©) (‚àô·µñ-spine-degreeÀ¢ a p)

open import Relation.Binary using (Antisymmetric)
open import AKS.Nat using (‚â§-antisym; ‚â§-total)

‚â§·µà-antisym : Antisymmetric _‚â°_ _‚â§·µà_
‚â§·µà-antisym (-‚àû‚â§ _) (-‚àû‚â§ _) = ‚â°-refl
‚â§·µà-antisym ‚ü® x‚â§y ‚ü© ‚ü® y‚â§x ‚ü© = ‚â°-cong ‚ü®_‚ü© (‚â§-antisym x‚â§y y‚â§x)

m‚â§·µàn‚áím‚äî·µàn‚â°n : ‚àÄ {m n} ‚Üí m ‚â§·µà n ‚Üí m ‚äî·µà n ‚â° n
m‚â§·µàn‚áím‚äî·µàn‚â°n { -‚àû}   {n} m‚â§n = ‚â°-refl
m‚â§·µàn‚áím‚äî·µàn‚â°n {‚ü® m ‚ü©} {‚ü® n ‚ü©} ‚ü® m‚â§n ‚ü© with ‚â§-total n m
... | inj‚ÇÅ n‚â§m = ‚â°-cong ‚ü®_‚ü© (‚â§-antisym m‚â§n n‚â§m)
... | inj‚ÇÇ _   = ‚â°-refl

degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] : ‚àÄ p q ‚Üí degree‚Å± p ‚â§·µà degree‚Å± q ‚Üí degree‚Å± q ‚â§·µà degree‚Å± (p +‚Å± q)
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] 0‚Å± q _ = ‚â§·µà-refl
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (c‚ÇÅ +x‚àô p) 0‚Å± _ = -‚àû‚â§ _
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) _ with degree‚Å± q
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) _      | -‚àû    with c‚ÇÇ ‚âà? 0#
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) _      | -‚àû    | yes c‚ÇÇ‚âà0 = -‚àû‚â§ _
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) _      | -‚àû    | no  c‚ÇÇ‚ââ0 with degree‚Å± (p +‚Å± q)
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) _      | -‚àû    | no  c‚ÇÇ‚ââ0 | -‚àû    with c‚ÇÅ + c‚ÇÇ ‚âà? 0#
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) _      | -‚àû    | no  c‚ÇÇ‚ââ0 | -‚àû    | yes c‚ÇÅ+c‚ÇÇ‚âà0 with degree‚Å± p
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) _      | -‚àû    | no  c‚ÇÇ‚ââ0 | -‚àû    | yes c‚ÇÅ+c‚ÇÇ‚âà0 | -‚àû    with c‚ÇÅ ‚âà? 0#
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) _      | -‚àû    | no  c‚ÇÇ‚ââ0 | -‚àû    | yes c‚ÇÅ+c‚ÇÇ‚âà0 | -‚àû    | yes c‚ÇÅ‚âà0 = contradiction TODO c‚ÇÇ‚ââ0
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) _      | -‚àû    | no  c‚ÇÇ‚ââ0 | -‚àû    | yes c‚ÇÅ+c‚ÇÇ‚âà0 | -‚àû    | no  c‚ÇÅ‚ââ0 = contradiction TODO c‚ÇÇ‚ââ0
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) ‚ü® () ‚ü© | -‚àû    | no  c‚ÇÇ‚ââ0 | -‚àû    | yes c‚ÇÅ+c‚ÇÇ‚âà0 | ‚ü® n ‚ü©
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) _      | -‚àû    | no  c‚ÇÇ‚ââ0 | -‚àû    | no  c‚ÇÅ+c‚ÇÇ‚ââ0 = ‚â§·µà-refl
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) _      | -‚àû    | no  c‚ÇÇ‚ââ0 | ‚ü® r ‚ü© = ‚ü® 0‚â§n ‚ü©
degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (c‚ÇÅ +x‚àô p) (c‚ÇÇ +x‚àô q) _      | ‚ü® m ‚ü© = TODO

degree[q]‚â§degree[p+·µñq] : ‚àÄ p q ‚Üí degree p ‚â§·µà degree q ‚Üí degree q ‚â§·µà degree (p +·µñ q)
degree[q]‚â§degree[p+·µñq] p q degree[p]‚â§degree[q] = begin
  degree q                       ‚â°·µà‚ü® ‚â°-sym (degree‚Å±‚â°degree q) ‚ü©
  degree‚Å± (expand q)             ‚â§·µà‚ü® degree‚Å±[q]‚â§degree‚Å±[p+‚Å±q] (expand p) (expand q) degree‚Å±[p]‚â§degree‚Å±[q] ‚ü©
  degree‚Å± (expand p +‚Å± expand q) ‚â°·µà‚ü® ‚â°-sym (degree‚Å±-cong (expand-+·µñ-homo p q)) ‚ü©
  degree‚Å± (expand (p +·µñ q))      ‚â°·µà‚ü® degree‚Å±‚â°degree (p +·µñ q) ‚ü©
  degree (p +·µñ q)                ‚àé·µà
  where
  open ‚â§·µà-Reasoning
  degree‚Å±[p]‚â§degree‚Å±[q] : degree‚Å± (expand p) ‚â§·µà degree‚Å± (expand q)
  degree‚Å±[p]‚â§degree‚Å±[q] = begin
    degree‚Å± (expand p) ‚â°·µà‚ü® degree‚Å±‚â°degree p ‚ü©
    degree p           ‚â§·µà‚ü® degree[p]‚â§degree[q] ‚ü©
    degree q           ‚â°·µà‚ü® ‚â°-sym (degree‚Å±‚â°degree q) ‚ü©
    degree‚Å± (expand q) ‚àé·µà

-- idea : ‚àÄ o‚ÇÅ p o‚ÇÇ q ‚Üí o‚ÇÅ < o‚ÇÇ ‚Üí degree (x^ o‚ÇÅ ‚àô p +·µñ x^ o‚ÇÇ ‚àô q) ‚â° degree (x^ o‚ÇÇ ‚àô q)
-- idea o‚ÇÅ p o‚ÇÇ q o‚ÇÅ<o‚ÇÇ with <-cmp o‚ÇÅ o‚ÇÇ
-- idea o‚ÇÅ (K c‚ÇÅ)          o‚ÇÇ q o‚ÇÅ<o‚ÇÇ | tri< _ _ _ = {!!}
-- idea o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) o‚ÇÇ q o‚ÇÅ<o‚ÇÇ | tri< _ _ _ with +·µñ-spine ‚üÖ n‚ÇÅ ‚áì‚üÜ p (o‚ÇÇ ‚à∏ o‚ÇÅ) q
-- idea o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) o‚ÇÇ q o‚ÇÅ<o‚ÇÇ | tri< _ _ _ | 0·µñ = {!!}
-- idea o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) o‚ÇÇ q o‚ÇÅ<o‚ÇÇ | tri< _ _ _ | x^ zero ‚àô r = {!!}
-- idea o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) o‚ÇÇ q o‚ÇÅ<o‚ÇÇ | tri< _ _ _ | x^ suc n‚ÇÉ ‚àô r = {!!}
-- idea o‚ÇÅ p o‚ÇÇ q o‚ÇÅ<o‚ÇÇ | tri‚âà o‚ÇÅ‚âÆo‚ÇÇ _ _ = contradiction o‚ÇÅ<o‚ÇÇ o‚ÇÅ‚âÆo‚ÇÇ
-- idea o‚ÇÅ p o‚ÇÇ q o‚ÇÅ<o‚ÇÇ | tri> o‚ÇÅ‚âÆo‚ÇÇ _ _ = contradiction o‚ÇÅ<o‚ÇÇ o‚ÇÅ‚âÆo‚ÇÇ

*·µñ-degree : ‚àÄ p q ‚Üí degree (p *·µñ q) ‚â° degree p +·µà degree q
*·µñ-degree 0·µñ q = ‚â°-refl
*·µñ-degree (x^ o‚ÇÅ ‚àô p) 0·µñ = ‚â°-refl
*·µñ-degree (x^ o‚ÇÅ ‚àô p) (x^ o‚ÇÇ ‚àô q) = *·µñ-spine-degree o‚ÇÅ p o‚ÇÇ q
  where
  *·µñ-spine-degree : ‚àÄ o‚ÇÅ p o‚ÇÇ q ‚Üí degree (*·µñ-spine o‚ÇÅ p o‚ÇÇ q) ‚â° ‚ü® (o‚ÇÅ +‚Ñï degreeÀ¢ p) +‚Ñï (o‚ÇÇ +‚Ñï degreeÀ¢ q) ‚ü©
  *·µñ-spine-degree o‚ÇÅ (K c‚ÇÅ) o‚ÇÇ q = begin‚ü® ‚â°-setoid Degree ‚ü©
    ‚ü® (o‚ÇÅ +‚Ñï o‚ÇÇ) +‚Ñï degreeÀ¢ (‚àô·µñ-spine c‚ÇÅ q) ‚ü© ‚â°‚ü® ‚â°-cong (Œª t ‚Üí ‚ü® o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï t ‚ü©) (‚àô·µñ-spine-degreeÀ¢ c‚ÇÅ q) ‚ü©
    ‚ü® (o‚ÇÅ +‚Ñï o‚ÇÇ) +‚Ñï degreeÀ¢ q ‚ü©               ‚â°‚ü® ‚â°-cong ‚ü®_‚ü© (Nat.+-assoc o‚ÇÅ o‚ÇÇ (degreeÀ¢ q))  ‚ü©
    ‚ü® o‚ÇÅ +‚Ñï (o‚ÇÇ +‚Ñï degreeÀ¢ q) ‚ü©               ‚â°‚ü® ‚â°-cong (Œª t ‚Üí ‚ü® t +‚Ñï (o‚ÇÇ +‚Ñï degreeÀ¢ q) ‚ü©) (‚â°-sym (Nat.+-identity ≥ o‚ÇÅ)) ‚ü©
    ‚ü® (o‚ÇÅ +‚Ñï 0) +‚Ñï (o‚ÇÇ +‚Ñï degreeÀ¢ q) ‚ü©        ‚àé
  *·µñ-spine-degree o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) o‚ÇÇ (K c‚ÇÇ) = begin‚ü® ‚â°-setoid Degree ‚ü©
    ‚ü® o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï (‚üÖ n‚ÇÅ ‚áì‚üÜ +‚Ñï degreeÀ¢ (‚àô·µñ-spine c‚ÇÇ p)) ‚ü© ‚â°‚ü® ‚â°-cong (Œª t ‚Üí ‚ü® o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï (‚üÖ n‚ÇÅ ‚áì‚üÜ +‚Ñï t) ‚ü©) (‚àô·µñ-spine-degreeÀ¢ c‚ÇÇ p) ‚ü©
    ‚ü® o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï (‚üÖ n‚ÇÅ ‚áì‚üÜ +‚Ñï degreeÀ¢ p) ‚ü©               ‚â°‚ü® ‚â°-cong ‚ü®_‚ü© (lemma o‚ÇÅ o‚ÇÇ ‚üÖ n‚ÇÅ ‚áì‚üÜ (degreeÀ¢ p)) ‚ü©
    ‚ü® o‚ÇÅ +‚Ñï (‚üÖ n‚ÇÅ ‚áì‚üÜ +‚Ñï degreeÀ¢ p) +‚Ñï (o‚ÇÇ +‚Ñï 0) ‚ü©        ‚àé
    where
    lemma : ‚àÄ x y n d ‚Üí x +‚Ñï y +‚Ñï (n +‚Ñï d) ‚â° x +‚Ñï (n +‚Ñï d) +‚Ñï (y +‚Ñï 0)
    lemma = solve Nat.ring
  *·µñ-spine-degree o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) o‚ÇÇ (c‚ÇÇ +x^ n‚ÇÇ ‚àô q) = ‚â§·µà-antisym deg<deg+deg deg+deg<deg
    where
    open ‚â§·µà-Reasoning
    last-larger : degree (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ) +·µñ c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q +·µñ c‚ÇÇ ‚àô·µñ (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) ‚àô p)) ‚â§·µà degree (*·µñ-spine (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q)
    last-larger = TODO
    deg<deg+deg : degree (*·µñ-spine o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) o‚ÇÇ (c‚ÇÇ +x^ n‚ÇÇ ‚àô q)) ‚â§·µà ‚ü® (o‚ÇÅ +‚Ñï degreeÀ¢ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p)) +‚Ñï (o‚ÇÇ +‚Ñï degreeÀ¢ (c‚ÇÇ +x^ n‚ÇÇ ‚àô q)) ‚ü©
    deg<deg+deg = begin
      degree
       (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ) +·µñ c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q +·µñ
        c‚ÇÇ ‚àô·µñ (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) ‚àô p) +·µñ *·µñ-spine (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q)
      ‚â§·µà‚ü® degree·µñ-+·µñ (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ) +·µñ c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q +·µñ c‚ÇÇ ‚àô·µñ (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) ‚àô p))
                     (*·µñ-spine (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q)
        ‚ü©
      degree (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ) +·µñ c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q +·µñ c‚ÇÇ ‚àô·µñ (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) ‚àô p))
      ‚äî·µà
      degree (*·µñ-spine (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q)
      ‚â°·µà‚ü® m‚â§·µàn‚áím‚äî·µàn‚â°n last-larger ‚ü©
      degree (*·µñ-spine (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q)
      ‚â°·µà‚ü® *·µñ-spine-degree (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q  ‚ü©
      ‚ü® ((o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) +‚Ñï degreeÀ¢ p) +‚Ñï ((o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) +‚Ñï degreeÀ¢ q) ‚ü©
      ‚â°·µà‚ü® ‚â°-cong‚ÇÇ (Œª x y ‚Üí ‚ü® x +‚Ñï y ‚ü©) (Nat.+-assoc o‚ÇÅ ‚üÖ n‚ÇÅ ‚áì‚üÜ (degreeÀ¢ p)) (Nat.+-assoc o‚ÇÇ ‚üÖ n‚ÇÇ ‚áì‚üÜ (degreeÀ¢ q)) ‚ü©
      ‚ü® o‚ÇÅ +‚Ñï (‚üÖ n‚ÇÅ ‚áì‚üÜ +‚Ñï degreeÀ¢ p) +‚Ñï (o‚ÇÇ +‚Ñï (‚üÖ n‚ÇÇ ‚áì‚üÜ +‚Ñï degreeÀ¢ q))   ‚ü© ‚àé·µà

    deg+deg<deg : ‚ü® o‚ÇÅ +‚Ñï degreeÀ¢ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) +‚Ñï (o‚ÇÇ +‚Ñï degreeÀ¢ (c‚ÇÇ +x^ n‚ÇÇ ‚àô q)) ‚ü© ‚â§·µà degree (*·µñ-spine o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) o‚ÇÇ (c‚ÇÇ +x^ n‚ÇÇ ‚àô q))
    deg+deg<deg = begin
      ‚ü® (o‚ÇÅ +‚Ñï (‚üÖ n‚ÇÅ ‚áì‚üÜ +‚Ñï degreeÀ¢ p)) +‚Ñï (o‚ÇÇ +‚Ñï (‚üÖ n‚ÇÇ ‚áì‚üÜ +‚Ñï degreeÀ¢ q)) ‚ü©
      ‚â°·µà‚ü® ‚â°-cong‚ÇÇ (Œª x y ‚Üí ‚ü® x +‚Ñï y ‚ü©) (‚â°-sym (Nat.+-assoc o‚ÇÅ ‚üÖ n‚ÇÅ ‚áì‚üÜ (degreeÀ¢ p))) (‚â°-sym (Nat.+-assoc o‚ÇÇ ‚üÖ n‚ÇÇ ‚áì‚üÜ (degreeÀ¢ q))) ‚ü©
      ‚ü® ((o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) +‚Ñï degreeÀ¢ p) +‚Ñï ((o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) +‚Ñï degreeÀ¢ q) ‚ü©
      ‚â°·µà‚ü® ‚â°-sym (*·µñ-spine-degree (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q) ‚ü©
      degree (*·µñ-spine (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q)
        ‚â§·µà‚ü® degree[q]‚â§degree[p+·µñq] (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ) +·µñ c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q +·µñ c‚ÇÇ ‚àô·µñ (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) ‚àô p)) (*·µñ-spine (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q) last-larger  ‚ü©
      degree (*·µñ-spine o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) o‚ÇÇ (c‚ÇÇ +x^ n‚ÇÇ ‚àô q)) ‚àé·µà


-·µñ-degree : ‚àÄ p ‚Üí degree (-·µñ p) ‚â° degree p
-·µñ-degree = ‚àô·µñ-degree -1#-nonzero

deg-+·µñ : ‚àÄ p q {p‚ââ0} {q‚ââ0} {p+q‚ââ0} ‚Üí deg (p +·µñ q) {p+q‚ââ0} ‚â§ deg p {p‚ââ0} ‚äî deg q {q‚ââ0}
deg-+·µñ 0·µñ q {p‚ââ0} {q‚ââ0} {p+q‚ââ0} = contradiction ‚âà·µñ-refl p‚ââ0
deg-+·µñ (x^ o‚ÇÅ ‚àô p) 0·µñ {p‚ââ0} {q‚ââ0} {p+q‚ââ0} = contradiction ‚âà·µñ-refl q‚ââ0
deg-+·µñ (x^ o‚ÇÅ ‚àô p) (x^ o‚ÇÇ ‚àô q) {p‚ââ0} {q‚ââ0} {p+q‚ââ0} = helper (x^ o‚ÇÅ ‚àô p +·µñ x^ o‚ÇÇ ‚àô q) {p+q‚ââ0} (degree·µñ-+·µñ (x^ o‚ÇÅ ‚àô p) (x^ o‚ÇÇ ‚àô q))
  where
  helper : ‚àÄ d {d‚ââ0} {x} ‚Üí degree d ‚â§·µà ‚ü® x ‚ü© ‚Üí deg d {d‚ââ0} ‚â§ x
  helper 0·µñ {d‚ââ0} = contradiction ‚âà·µñ-refl d‚ââ0
  helper (x^ o‚ÇÉ ‚àô d) {d‚ââ0} ‚ü® pf ‚ü© = pf

deg-cong : ‚àÄ {p q} {p‚ââ0} {q‚ââ0} ‚Üí p ‚âà·µñ q ‚Üí deg p {p‚ââ0} ‚â° deg q {q‚ââ0}
deg-cong {0·µñ} {q} {p‚ââ0} {q‚ââ0} p‚âàq = contradiction ‚âà·µñ-refl p‚ââ0
deg-cong {x^ o‚ÇÅ ‚àô p} {0·µñ} {p‚ââ0} {q‚ââ0} p‚âàq = contradiction ‚âà·µñ-refl q‚ââ0
deg-cong {x^ o‚ÇÅ ‚àô p} {x^ o‚ÇÇ ‚àô q} {p‚ââ0} {q‚ââ0} (0·µñ‚ââ ‚â°-refl p‚âàq) rewrite degreeÀ¢-cong p‚âàq = ‚â°-refl

data Coefficients : Set (c ‚äîÀ° ‚Ñì) where
  0·∂ú : Coefficients
  _‚àôx^_+_ : C/0 ‚Üí ‚Ñï ‚Üí Coefficients ‚Üí Coefficients

coefficientsÀ¢ : ‚Ñï ‚Üí Spine ‚Üí Coefficients ‚Üí Coefficients
coefficientsÀ¢ o (K c) coeffs = c ‚àôx^ o + coeffs
coefficientsÀ¢ o (c +x^ n ‚àô p) coeffs = coefficientsÀ¢ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) p (c ‚àôx^ o + coeffs)

coefficients : Polynomial ‚Üí Coefficients
coefficients 0·µñ = 0·∂ú
coefficients (x^ o ‚àô p) = coefficientsÀ¢ o p 0·∂ú

polynomial : Coefficients ‚Üí Polynomial
polynomial 0·∂ú = 0·µñ
polynomial (c ‚àôx^ n + p) = c ‚àôùëã^ n +·µñ polynomial p

polynomial‚àòcoefficients‚â°id : ‚àÄ p ‚Üí polynomial (coefficients p) ‚âà·µñ p
polynomial‚àòcoefficients‚â°id 0·µñ = ‚âà·µñ-refl
polynomial‚àòcoefficients‚â°id (x^ o ‚àô p) = loop o p 0·∂ú
  where
  lemma : ‚àÄ o c n p ‚Üí x^ o ‚àô K c +·µñ x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p ‚âà·µñ x^ o ‚àô (c +x^ n ‚àô p)
  lemma o c n p = expand-injective $ begin‚ü® ‚âà‚Å±-setoid ‚ü©
    expand (x^ o ‚àô K c +·µñ x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p) ‚âà‚ü® expand-+·µñ-homo (x^ o ‚àô K c) (x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p) ‚ü©
    expandÀ¢ o (K c) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) p  ‚âà‚ü® ‚âà‚Å±-sym (expandÀ¢-+x^-lemma o n c p) ‚ü©
    expandÀ¢ o (c +x^ n ‚àô p)                     ‚àé
  loop : ‚àÄ o p coeffs ‚Üí polynomial (coefficientsÀ¢ o p coeffs) ‚âà·µñ x^ o ‚àô p +·µñ polynomial coeffs
  loop o (K c) coeffs = ‚âà·µñ-refl
  loop o (c +x^ n ‚àô p) coeffs = begin‚ü® ‚âà·µñ-setoid ‚ü©
    polynomial (coefficientsÀ¢ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) p (c ‚àôx^ o + coeffs)) ‚âà‚ü® loop (o +‚Ñï ‚üÖ n ‚áì‚üÜ) p (c ‚àôx^ o + coeffs) ‚ü©
    x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p +·µñ (x^ o ‚àô K c +·µñ polynomial coeffs)    ‚âà‚ü® ‚âà·µñ-sym (+·µñ-assoc (x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p) (x^ o ‚àô K c) (polynomial coeffs)) ‚ü©
    (x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p +·µñ x^ o ‚àô K c) +·µñ polynomial coeffs    ‚âà‚ü® +·µñ-cong ≥ (+·µñ-comm (x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p) (x^ o ‚àô K c)) ‚ü©
    (x^ o ‚àô K c +·µñ x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p) +·µñ polynomial coeffs    ‚âà‚ü® +·µñ-cong ≥ {polynomial coeffs} {x^ o ‚àô K c +·µñ x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p} {x^ o ‚àô (c +x^ n ‚àô p)} (lemma _ _ _ _) ‚ü©
    (x^ o ‚àô (c +x^ n ‚àô p)) +·µñ polynomial coeffs                  ‚àé

coefficientsÀ¢‚â¢0·∂ú : ‚àÄ o p coeffs ‚Üí coefficientsÀ¢ o p coeffs ‚â¢ 0·∂ú
coefficientsÀ¢‚â¢0·∂ú o (K c) coeffs = Œª ()
coefficientsÀ¢‚â¢0·∂ú o (c +x^ n ‚àô p) coeffs = coefficientsÀ¢‚â¢0·∂ú (o +‚Ñï ‚üÖ n ‚áì‚üÜ) p (c ‚àôx^ o + coeffs)

coefficients‚â¢0·∂ú : ‚àÄ p {p‚ââ0 : p ‚ââ·µñ 0·µñ} ‚Üí coefficients p ‚â¢ 0·∂ú
coefficients‚â¢0·∂ú 0·µñ {p‚ââ0} = contradiction ‚âà·µñ-refl p‚ââ0
coefficients‚â¢0·∂ú (x^ o ‚àô p) {p‚ââ0} = coefficientsÀ¢‚â¢0·∂ú o p 0·∂ú

deg·∂ú : ‚àÄ c {c‚ââ0 : c ‚â¢ 0·∂ú} ‚Üí ‚Ñï
deg·∂ú 0·∂ú {c‚ââ0} = contradiction ‚â°-refl c‚ââ0
deg·∂ú (_ ‚àôx^ n + _) = n

deg·∂ú[coefficients] : ‚àÄ p {p‚ââ0} ‚Üí deg·∂ú (coefficients p) {coefficients‚â¢0·∂ú p {p‚ââ0}} ‚â° deg p {p‚ââ0}
deg·∂ú[coefficients] 0·µñ {p‚ââ0} = contradiction ‚âà·µñ-refl p‚ââ0
deg·∂ú[coefficients] (x^ o ‚àô p) = loop o p 0·∂ú
  where
  loop : ‚àÄ o p coeffs ‚Üí deg·∂ú (coefficientsÀ¢ o p coeffs) {coefficientsÀ¢‚â¢0·∂ú o p coeffs} ‚â° o +‚Ñï degreeÀ¢ p
  loop o (K c) coeffs = ‚â°-sym (Nat.+-identity ≥ o)
  loop o (c +x^ n ‚àô p) coeffs = begin‚ü® ‚â°-setoid ‚Ñï ‚ü©
    deg·∂ú (coefficientsÀ¢ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) p (c ‚àôx^ o + coeffs)) ‚â°‚ü® loop (o +‚Ñï ‚üÖ n ‚áì‚üÜ) p (c ‚àôx^ o + coeffs) ‚ü©
    (o +‚Ñï ‚üÖ n ‚áì‚üÜ) +‚Ñï degreeÀ¢ p                              ‚â°‚ü® Nat.+-assoc o ‚üÖ n ‚áì‚üÜ (degreeÀ¢ p) ‚ü©
    o +‚Ñï (‚üÖ n ‚áì‚üÜ +‚Ñï degreeÀ¢ p)                              ‚àé

-- leading : ‚àÄ p {p‚ââ0 : p ‚ââ·µñ 0·µñ} ‚Üí Leading p {p‚ââ0}
-- leading p {p‚ââ0} = helper (coefficients p) {coefficients‚â¢0·∂ú p {p‚ââ0}} (polynomial‚àòcoefficients‚â°id p) (deg·∂ú[coefficients] p)
--   where
--   helper : ‚àÄ coeffs {coeffs‚â¢0} ‚Üí polynomial coeffs ‚âà·µñ p ‚Üí deg·∂ú coeffs {coeffs‚â¢0} ‚â° deg p {p‚ââ0} ‚Üí Leading p {p‚ââ0}
--   helper 0·∂ú {coeffs‚â¢0} = contradiction ‚â°-refl coeffs‚â¢0
--   helper (leading-coefficient ‚àôx^ leading-degree + next-term) roundtrip leading-degree‚â°degree =
--     Leading‚úì leading-coefficient leading-degree leading-degree‚â°degree (polynomial next-term) {!!} roundtrip


data Remainder (r : Polynomial) (m : Polynomial) {m‚ââ0 : m ‚ââ·µñ 0·µñ} : Set (c ‚äîÀ° ‚Ñì) where
  0·µñ‚âà : (r‚âà0 : r ‚âà·µñ 0·µñ) ‚Üí Remainder r m
  0·µñ‚ââ : (r‚ââ0 : r ‚ââ·µñ 0·µñ) ‚Üí deg r {r‚ââ0} < deg m {m‚ââ0} ‚Üí Remainder r m

record Leading (p : Polynomial) {p‚ââ0 : p ‚ââ·µñ 0·µñ} : Set (c ‚äîÀ° ‚Ñì) where
  constructor Leading‚úì
  field
    leading-coefficent : C/0
    leading-degree : ‚Ñï
    leading-degree‚â°degree : leading-degree ‚â° deg p {p‚ââ0}
    next-term : Polynomial
    next-term<p : Remainder next-term p {p‚ââ0}
    proof : leading-coefficent ‚àôùëã^ leading-degree +·µñ next-term ‚âà·µñ p

leading : ‚àÄ p {p‚ââ0 : p ‚ââ·µñ 0·µñ} ‚Üí Leading p {p‚ââ0}
leading 0·µñ {p‚ââ0} = contradiction ‚âà·µñ-refl p‚ââ0
leading (x^ o ‚àô p) {p‚ââ0} = loop o p {p‚ââ0}
  where
  open ‚â§-Reasoning using (begin-strict_; _<‚ü®_‚ü©_; _‚â§‚ü®_‚ü©_) renaming (_‚â°‚ü®_‚ü©_ to _‚â°‚â§‚ü®_‚ü©_; _‚àé to _‚â§‚àé)
  degree-step : ‚àÄ o n c p ‚Üí deg (x^ o +‚Ñï ‚üÖ n ‚áì‚üÜ ‚àô p) {Œª ()} ‚â° deg (x^ o ‚àô (c +x^ n ‚àô p)) {Œª ()}
  degree-step o n c p = Nat.+-assoc o ‚üÖ n ‚áì‚üÜ (degreeÀ¢ p)

  remainder-smaller : ‚àÄ o n c p {r‚ââ0} {r'‚ââ0} ‚Üí deg (x^ o ‚àô K c) {r‚ââ0} < deg (x^ o ‚àô (c +x^ n ‚àô p)) {r'‚ââ0}
  remainder-smaller o (‚Ñï+ n) c p = lte (n +‚Ñï degreeÀ¢ p) (lemma o n (degreeÀ¢ p))
    where
    lemma : ‚àÄ x y z ‚Üí suc (x +‚Ñï 0 +‚Ñï (y +‚Ñï z)) ‚â° x +‚Ñï suc (y +‚Ñï z)
    lemma = solve Nat.ring

  remainder-base : ‚àÄ next o n c p {r‚ââ0} ‚Üí next ‚âà·µñ 0·µñ ‚Üí Remainder ((x^ o ‚àô K c) +·µñ next) (x^ o ‚àô (c +x^ n ‚àô p)) {r‚ââ0}
  remainder-base next o n c p {r‚ââ0} next‚âà0 = 0·µñ‚ââ c‚àôùëã^o+next‚ââ0 smaller
    where
    c‚àôùëã^o‚âàc‚àôùëã^o+next : c ‚àôùëã^ o ‚âà·µñ c ‚àôùëã^ o +·µñ next
    c‚àôùëã^o‚âàc‚àôùëã^o+next = begin‚ü® ‚âà·µñ-setoid ‚ü©
      c ‚àôùëã^ o         ‚âà‚ü® ‚âà·µñ-sym (+·µñ-identity ≥ _) ‚ü©
      c ‚àôùëã^ o +·µñ 0·µñ   ‚âà‚ü® +·µñ-congÀ° {c ‚àôùëã^ o} (‚âà·µñ-sym next‚âà0) ‚ü©
      c ‚àôùëã^ o +·µñ next ‚àé
    c‚àôùëã^o+next‚ââ0 : c ‚àôùëã^ o +·µñ next ‚ââ·µñ 0·µñ
    c‚àôùëã^o+next‚ââ0 c‚àôùëã^o+next‚âà0 = contradiction (begin‚ü® ‚âà·µñ-setoid ‚ü© c ‚àôùëã^ o ‚âà‚ü® c‚àôùëã^o‚âàc‚àôùëã^o+next ‚ü© c ‚àôùëã^ o +·µñ next ‚âà‚ü® c‚àôùëã^o+next‚âà0 ‚ü© 0·µñ ‚àé) (Œª ())
    smaller : deg ((x^ o ‚àô K c) +·µñ next) {c‚àôùëã^o+next‚ââ0} < deg (x^ o ‚àô (c +x^ n ‚àô p)) {r‚ââ0}
    smaller = begin-strict
      deg (x^ o ‚àô K c +·µñ next)          ‚â°‚â§‚ü® deg-cong {p‚ââ0 = c‚àôùëã^o+next‚ââ0} {q‚ââ0 = Œª ()} (‚âà·µñ-sym (c‚àôùëã^o‚âàc‚àôùëã^o+next)) ‚ü©
      deg (x^ o ‚àô K c) {Œª ()}            <‚ü® remainder-smaller o n c p {Œª ()} {r‚ââ0} ‚ü©
      deg (x^ o ‚àô (c +x^ n ‚àô p)) {r‚ââ0}   ‚â§‚àé

  remainder-step : ‚àÄ next o n c p {r‚ââ0} ‚Üí Remainder next (x^ o +‚Ñï ‚üÖ n ‚áì‚üÜ ‚àô p) {Œª ()} ‚Üí Remainder ((x^ o ‚àô K c) +·µñ next) (x^ o ‚àô (c +x^ n ‚àô p)) {r‚ââ0}
  remainder-step next o n c p {r‚ââ0} (0·µñ‚âà next‚âà0) = remainder-base next o n c p next‚âà0
  remainder-step next o n c p {r‚ââ0} (0·µñ‚ââ next‚ââ0 next<r) with x^ o ‚àô K c +·µñ next ‚âà·µñ? 0·µñ
  ... | yes r'‚âà0 = 0·µñ‚âà r'‚âà0
  ... | no  r'‚ââ0 = 0·µñ‚ââ r'‚ââ0 smaller
    where
    smaller : deg ((x^ o ‚àô K c) +·µñ next) {r'‚ââ0} < deg (x^ o ‚àô (c +x^ n ‚àô p)) {r‚ââ0}
    smaller rewrite degree-step o n c p = begin-strict
      deg ((x^ o ‚àô K c) +·µñ next) {r'‚ââ0}           ‚â§‚ü® deg-+·µñ (x^ o ‚àô K c) next {p‚ââ0 = Œª ()} ‚ü©
      deg (x^ o ‚àô K c) {Œª ()} ‚äî deg next {next‚ââ0} <‚ü® ‚äî-least-< (deg (x^ o ‚àô K c) {Œª ()}) (deg next) (deg (x^ o ‚àô (c +x^ n ‚àô p)) {r‚ââ0}) (remainder-smaller o n c p {Œª ()} {r‚ââ0}) next<r ‚ü©
      deg (x^ o ‚àô (c +x^ n ‚àô p)) {r‚ââ0}            ‚â§‚àé

  lemma : ‚àÄ o c n p ‚Üí x^ o ‚àô K c +·µñ x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p ‚âà·µñ x^ o ‚àô (c +x^ n ‚àô p)
  lemma o c n p = expand-injective $ begin‚ü® ‚âà‚Å±-setoid ‚ü©
    expand (x^ o ‚àô K c +·µñ x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p) ‚âà‚ü® expand-+·µñ-homo (x^ o ‚àô K c) (x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p) ‚ü©
    expandÀ¢ o (K c) +‚Å± expandÀ¢ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) p  ‚âà‚ü® ‚âà‚Å±-sym (expandÀ¢-+x^-lemma o n c p) ‚ü©
    expandÀ¢ o (c +x^ n ‚àô p)                     ‚àé

  proof-step
    : ‚àÄ lc o n c p next
    ‚Üí lc ‚àôùëã^ deg (x^ o +‚Ñï ‚üÖ n ‚áì‚üÜ ‚àô p) {Œª ()} +·µñ next ‚âà·µñ x^ o +‚Ñï ‚üÖ n ‚áì‚üÜ ‚àô p
    ‚Üí lc ‚àôùëã^ deg (x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p) {Œª ()} +·µñ ((x^ o ‚àô K c) +·µñ next) ‚âà·µñ x^ o ‚àô (c +x^ n ‚àô p)
  proof-step lc o n c p next pf = begin‚ü® ‚âà·µñ-setoid ‚ü©
    lc ‚àôùëã^ deg (x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p) {Œª ()} +·µñ (x^ o ‚àô K c +·µñ next) ‚âà‚ü® +·µñ-congÀ° {lc ‚àôùëã^ deg (x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p) {Œª ()}} (+·µñ-comm (x^ o ‚àô K c) next) ‚ü©
    lc ‚àôùëã^ deg (x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p) {Œª ()} +·µñ (next +·µñ x^ o ‚àô K c) ‚âà‚ü® ‚âà·µñ-sym (+·µñ-assoc (lc ‚àôùëã^ deg (x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p) {Œª ()}) next (x^ o ‚àô K c)) ‚ü©
    (lc ‚àôùëã^ deg (x^ (o +‚Ñï ‚üÖ n ‚áì‚üÜ) ‚àô p) {Œª ()} +·µñ next) +·µñ x^ o ‚àô K c ‚âà‚ü® +·µñ-cong ≥ {x^ o ‚àô K c} pf ‚ü©
    x^ o +‚Ñï ‚üÖ n ‚áì‚üÜ ‚àô p +·µñ x^ o ‚àô K c                                  ‚âà‚ü® +·µñ-comm (x^ o +‚Ñï ‚üÖ n ‚áì‚üÜ ‚àô p) (x^ o ‚àô K c) ‚ü©
    x^ o ‚àô K c +·µñ x^ o +‚Ñï ‚üÖ n ‚áì‚üÜ ‚àô p                                  ‚âà‚ü® lemma o c n p ‚ü©
    x^ o ‚àô (c +x^ n ‚àô p)                                              ‚àé

  loop : ‚àÄ o p {p‚ââ0 : x^ o ‚àô p ‚ââ·µñ 0·µñ} ‚Üí Leading (x^ o ‚àô p) {p‚ââ0}
  loop o (K c) = Leading‚úì c o (‚â°-sym (Nat.+-identity ≥ o)) 0·µñ (0·µñ‚âà ‚âà·µñ-refl) (+·µñ-identity ≥ (c ‚àôùëã^ o))
  loop o (c +x^ n ‚àô p) with loop (o +‚Ñï ‚üÖ n ‚áì‚üÜ) p {Œª ()}
  ... | Leading‚úì lc d ‚â°-refl next next<p pf = Leading‚úì lc d (degree-step o n c p) (c ‚àôùëã^ o +·µñ next) (remainder-step next o n c p next<p) (proof-step lc o n c p next pf)

record Euclidean (n : Polynomial) (m : Polynomial) {m‚ââ0 : m ‚ââ·µñ 0·µñ} : Set (c ‚äîÀ° ‚Ñì) where
  constructor Euclidean‚úì
  field
    q : Polynomial
    r : Polynomial
    division : n ‚âà·µñ m *·µñ q +·µñ r
    remainder : Remainder r m {m‚ââ0}

divMod-base‚ÇÅ : ‚àÄ n m ‚Üí n ‚âà·µñ 0·µñ ‚Üí n ‚âà·µñ m *·µñ 0·µñ +·µñ 0·µñ
divMod-base‚ÇÅ n m n‚âà0 = begin‚ü® ‚âà·µñ-setoid ‚ü©
  n ‚âà‚ü® n‚âà0 ‚ü© 0·µñ ‚âà‚ü® ‚âà·µñ-sym (*·µñ-zero ≥ m) ‚ü©
  m *·µñ 0·µñ       ‚âà‚ü® ‚âà·µñ-sym (+·µñ-identity ≥ _) ‚ü©
  m *·µñ 0·µñ +·µñ 0·µñ ‚àé

-- open import Strict using (force)
open import Agda.Builtin.Strict using (primForce; primForceLemma)

force : ‚àÄ {a b} {A : Set a} {B : A ‚Üí Set b} (x : A) ‚Üí (‚àÄ y ‚Üí x ‚â° y ‚Üí B y) ‚Üí B x
force {B = B} x f = primForce ‚â°-refl (primForce {B = Œª y ‚Üí x ‚â° y ‚Üí B y} x f)

force-‚â° : ‚àÄ {a b} {A : Set a} {B : A ‚Üí Set b} (x : A) (f : ‚àÄ y ‚Üí x ‚â° y ‚Üí B y) ‚Üí force x f ‚â° f x ‚â°-refl
force-‚â° {B = B} x f rewrite primForceLemma {B = Œª y ‚Üí x ‚â° y ‚Üí B y} x f = ‚â°-refl

divMod : ‚àÄ n m {m‚ââ0} ‚Üí Euclidean n m {m‚ââ0}
divMod n m {m‚ââ0} with n ‚âà·µñ? 0·µñ
... | yes n‚âà0 = Euclidean‚úì 0·µñ 0·µñ (divMod-base‚ÇÅ n m n‚âà0) (0·µñ‚âà ‚âà·µñ-refl)
... | no  n‚ââ0 = loop 0·µñ n {n‚ââ0} (solveOver (n ‚à∑ m ‚à∑ []) +·µñ-*·µñ-almostCommutativeRing) <-well-founded
  where
  open ‚â§-Reasoning using (begin-strict_; _<‚ü®_‚ü©_; _‚â§‚ü®_‚ü©_) renaming (_‚â°‚ü®_‚ü©_ to _‚â°‚â§‚ü®_‚ü©_; _‚àé to _‚â§‚àé)

  term : ‚àÄ r {r‚ââ0} ‚Üí Polynomial
  term r {r‚ââ0} with leading r {r‚ââ0} | leading m {m‚ââ0}
  ... | Leading‚úì lc ≥ deg ≥ _ _ _ _ | Leading‚úì lc·µê deg·µê _ _ _ _ = (lc ≥ /-nonzero lc·µê) ‚àôùëã^ (deg ≥ ‚à∏ deg·µê)

  term-smaller : ‚àÄ r {r‚ââ0 : r ‚ââ·µñ 0·µñ} {r'‚ââ0 : r -·µñ term r {r‚ââ0} *·µñ m ‚ââ·µñ 0·µñ} ‚Üí deg m {m‚ââ0} ‚â§ deg r {r‚ââ0} ‚Üí deg (r -·µñ term r {r‚ââ0} *·µñ m) {r'‚ââ0} < deg r {r‚ââ0}
  term-smaller r {r‚ââ0} {r'‚ââ0} m‚â§r with leading r {r‚ââ0} | leading m {m‚ââ0}
  ... | Leading‚úì lc ≥ deg ≥ deg ≥-pf rest ≥ rest ≥<r pf ≥ | Leading‚úì lc·µê deg·µê ‚â°-refl deg·µê-pf rest·µê<m pf·µê = begin-strict
    deg (r -·µñ ((lc ≥ /-nonzero lc·µê) ‚àôùëã^ (deg ≥ ‚à∏ deg·µê)) *·µñ m) {r'‚ââ0} <‚ü® {!!} ‚ü©
    deg r {r‚ââ0}                                                    ‚â§‚àé
  -- rest ≥ -·µñ (lc ≥ /-nonzero lc·µê) ‚àôùëã^ (deg ≥ ‚à∏ deg·µê) *·µñ rest·µê)
  -- deg[r] ‚à∏ deg[m] + deg[rest·µê] < deg[r]

  divMod-base‚ÇÇ : ‚àÄ q r {r‚ââ0} ‚Üí n ‚âà·µñ m *·µñ q +·µñ r ‚Üí r -·µñ term r {r‚ââ0} *·µñ m ‚âà·µñ 0·µñ ‚Üí n ‚âà·µñ m *·µñ (q +·µñ term r {r‚ââ0}) +·µñ 0·µñ
  divMod-base‚ÇÇ q r {r‚ââ0} n‚âàmq+r r-t*m‚âà0 = begin‚ü® ‚âà·µñ-setoid ‚ü©
    n                                                              ‚âà‚ü® n‚âàmq+r ‚ü©
    m *·µñ q +·µñ r                                                    ‚âà‚ü® ‚âà·µñ-sym (+·µñ-identity ≥ _) ‚ü©
    m *·µñ q +·µñ r +·µñ 0·µñ                                              ‚âà‚ü® +·µñ-congÀ° {m *·µñ q +·µñ r} (‚âà·µñ-sym (-·µñ‚ÄøinverseÀ° (term r {r‚ââ0} *·µñ m))) ‚ü©
    m *·µñ q +·µñ r +·µñ ((-·µñ (term r {r‚ââ0} *·µñ m)) +·µñ term r {r‚ââ0} *·µñ m) ‚âà‚ü® ‚âà·µñ-sym (+·µñ-assoc (m *·µñ q +·µñ r) (-·µñ (term r *·µñ m)) (term r *·µñ m)) ‚ü©
    ((m *·µñ q +·µñ r) -·µñ term r {r‚ââ0} *·µñ m) +·µñ term r {r‚ââ0} *·µñ m      ‚âà‚ü® +·µñ-cong (+·µñ-assoc (m *·µñ q) r (-·µñ (term r *·µñ m))) (*·µñ-comm (term r) m) ‚ü©
    (m *·µñ q +·µñ (r -·µñ term r {r‚ââ0} *·µñ m)) +·µñ m *·µñ term r {r‚ââ0}      ‚âà‚ü® +·µñ-cong ≥ {m *·µñ term r} (+·µñ-congÀ° {m *·µñ q} r-t*m‚âà0) ‚ü©
    (m *·µñ q +·µñ 0·µñ) +·µñ m *·µñ term r {r‚ââ0}                            ‚âà‚ü® +·µñ-cong ≥ {m *·µñ term r} (+·µñ-identity ≥ (m *·µñ q)) ‚ü©
    m *·µñ q +·µñ m *·µñ term r {r‚ââ0}                                    ‚âà‚ü® ‚âà·µñ-sym (*·µñ-distribÀ°-+·µñ m q (term r)) ‚ü©
    m *·µñ (q +·µñ term r {r‚ââ0})                                       ‚âà‚ü® ‚âà·µñ-sym (+·µñ-identity ≥ (m *·µñ (q +·µñ term r))) ‚ü©
    m *·µñ (q +·µñ term r {r‚ââ0}) +·µñ 0·µñ                                 ‚àé

  divMod-step : ‚àÄ q r {r‚ââ0} ‚Üí n ‚âà·µñ m *·µñ q +·µñ r ‚Üí n ‚âà·µñ m *·µñ (q +·µñ term r {r‚ââ0}) +·µñ (r -·µñ term r {r‚ââ0} *·µñ m)
  divMod-step q r {r‚ââ0} n‚âàmq+r = begin‚ü® ‚âà·µñ-setoid ‚ü©
    n                                                       ‚âà‚ü® n‚âàmq+r ‚ü©
    m *·µñ q +·µñ r                                             ‚âà‚ü® ‚âà·µñ-sym (+·µñ-identity ≥ _) ‚ü©
    m *·µñ q +·µñ r +·µñ 0·µñ                                       ‚âà‚ü® +·µñ-congÀ° {m *·µñ q +·µñ r} (‚âà·µñ-sym (-·µñ‚Äøinverse ≥ (term r {r‚ââ0} *·µñ m))) ‚ü©
    m *·µñ q +·µñ r +·µñ (term r {r‚ââ0} *·µñ m -·µñ term r {r‚ââ0} *·µñ m) ‚âà‚ü® final m q r (term r) (-·µñ (term r *·µñ m)) ‚ü©
    m *·µñ (q +·µñ term r {r‚ââ0}) +·µñ (r -·µñ term r {r‚ââ0} *·µñ m)    ‚àé
    where
    final : ‚àÄ m q r x y ‚Üí m *·µñ q +·µñ r +·µñ (x *·µñ m +·µñ y) ‚âà·µñ m *·µñ (q +·µñ x) +·µñ (r +·µñ y)
    final = solve +·µñ-*·µñ-almostCommutativeRing

  loop : ‚àÄ q r {r‚ââ0} ‚Üí n ‚âà·µñ m *·µñ q +·µñ r ‚Üí Acc _<_ (deg r {r‚ââ0}) ‚Üí Euclidean n m {m‚ââ0}
  loop q r {r‚ââ0} n‚âàmq+r (acc downward) with <-‚â§-connex (deg r {r‚ââ0}) (deg m {m‚ââ0})
  ... | inj‚ÇÅ r<m = Euclidean‚úì q r n‚âàmq+r (0·µñ‚ââ r‚ââ0 r<m)
  ... | inj‚ÇÇ r‚â•m with (r -·µñ term r {r‚ââ0} *·µñ m) ‚âà·µñ? 0·µñ
  ...   | yes r'‚âà0 = Euclidean‚úì (q +·µñ term r {r‚ââ0}) 0·µñ (divMod-base‚ÇÇ q r {r‚ââ0} n‚âàmq+r r'‚âà0) (0·µñ‚âà ‚âà·µñ-refl)
  ...   | no  r'‚ââ0 = force (q +·µñ term r {r‚ââ0}) Œª { q' ‚â°-refl ‚Üí loop q' (r -·µñ term r {r‚ââ0} *·µñ m) {r'‚ââ0} (divMod-step q r {r‚ââ0} n‚âàmq+r) (downward _ (term-smaller r r‚â•m)) }

-- factor : ‚àÄ p a ‚Üí ‚ü¶ p ‚üß a ‚âà 0# ‚Üí (ùëã -·µñ ùêæ a) ‚à£ p
-- factor = TODO
