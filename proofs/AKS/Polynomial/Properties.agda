open import Level using () renaming (_‚äî_ to _‚äîÀ°_)
open import Function using (_$_)

open import Function.Equivalence as FE using ()
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Decidable using (map)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary using (Setoid; IsEquivalence; Decidable; Tri)
open import Relation.Binary.PropositionalEquality using (_‚â°_) renaming (refl to ‚â°-refl; cong to ‚â°-cong; setoid to ‚â°-setoid)
open Tri

open import Data.Maybe using (nothing)
open import Data.List using ([]; _‚à∑_)
open import Data.Product using (_,_; proj‚ÇÅ)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)

open import Algebra.Bundles using (CommutativeRing)
open import AKS.Algebra.Bundles using (DecField)

module AKS.Polynomial.Properties {c ‚Ñì} (F : DecField c ‚Ñì) where

open import AKS.Nat using (‚Ñï; zero; suc; _<_; _‚âü_; _‚âü‚Å∫_; _‚à∏_; ‚Ñï‚Å∫; ‚üÖ_‚áì‚üÜ; ‚üÖ_‚áë‚üÜ) renaming (_+_ to _+‚Ñï_)
open import AKS.Nat using (<-cmp; <-‚â§-connex; m+[n‚à∏m]‚â°n; ‚Ñï‚Üí‚Ñï‚Å∫‚Üí‚Ñï; m<n‚áín‚à∏m‚â¢0; ‚â¢‚áí¬¨‚âü; <‚áí‚â§)
open import AKS.Nat using (Acc; acc; <-well-founded)

open import Polynomial.Simple.AlmostCommutativeRing using (AlmostCommutativeRing; fromCommutativeRing)
open import Polynomial.Simple.Reflection using (solve; solveOver)

open DecField F
  using (0#; 1#; _+_; _*_; -_; _-_; _‚Åª¬π; _/_)
  renaming (Carrier to C)
open DecField F
  using (C/0; _*-nonzero_; _/-nonzero_; -1#-nonzero; 0#‚ââ1#; *-cancelÀ°)
open DecField F using (_‚âà_; _‚ââ_; _‚âà?_; setoid)
open Setoid setoid using (refl; sym; trans)
open import Relation.Binary.Reasoning.MultiSetoid
open DecField F using (ring; commutativeRing; *-commutativeMonoid)
open CommutativeRing commutativeRing using (+-assoc; +-comm; +-cong; +-congÀ°; +-cong ≥; +-identityÀ°; +-identity ≥; distribÀ°; distrib ≥; -‚Äøcong; -‚ÄøinverseÀ°)
open CommutativeRing commutativeRing using (*-assoc; *-comm; *-cong; *-congÀ°; *-cong ≥; *-identityÀ°; *-identity ≥; zeroÀ°; zero ≥)
open import Algebra.Properties.Ring ring using (-‚ÄødistribÀ°-*)
open import AKS.Exponentiation *-commutativeMonoid using (_^_; _^‚Å∫_; ^-homo; ^-^‚Å∫-homo; x^n‚âàx^‚Å∫n)

open import AKS.Polynomial.Base F using
  ( Spine; K; _+x^_‚àô_; Polynomial; 0·µñ; x^_‚àô_; ‚ü¶_‚üß; ‚ü¶_‚üßÀ¢; _+?_; _‚àôùëã^_; deg
  ; 1·µñ; _+·µñ_; +·µñ-spine; +·µñ-spine-‚â°-K; +·µñ-spine-‚â°; +·µñ-spine-<; -·µñ_; _-·µñ_; _*·µñ_; *·µñ-spine; _‚àô·µñ_; ‚àô·µñ-spine
  ; _‚âà·µñ_; _‚ââ·µñ_; ‚âà‚úì; _‚âà‚Å±_; 0·µñ‚âà; 0·µñ‚ââ; _‚âàÀ¢_; K‚âà; +‚âà
  ; ‚âà‚Å±-refl; ‚âà‚Å±-sym; ‚âà‚Å±-trans; ‚âà·µñ-refl; ‚âà·µñ-sym; ‚âà·µñ-trans
  )

open import Algebra.Structures {A = Polynomial} _‚âà·µñ_ using (IsCommutativeRing; IsRing; IsAbelianGroup; IsGroup; IsMonoid; IsSemigroup; IsMagma)
open import Algebra.Definitions {A = Polynomial} _‚âà·µñ_ using
  ( _DistributesOver_; _DistributesOver ≥_; _DistributesOverÀ°_
  ; RightIdentity; LeftIdentity; Identity; Associative; Commutative
  ; RightInverse; LeftInverse; Inverse; Congruent‚ÇÇ; Congruent‚ÇÅ
  )
open import AKS.Algebra.Structures Polynomial _‚âà·µñ_ using (IsNonZeroCommutativeRing; IsIntegralDomain)

ACR : AlmostCommutativeRing c ‚Ñì
ACR = fromCommutativeRing commutativeRing (Œª _ ‚Üí nothing)

foil : ‚àÄ a b c d ‚Üí (a + b) * (c + d) ‚âà a * c + a * d + b * c + b * d
foil = solve ACR

‚âà‚Å±-isEquivalence : IsEquivalence _‚âà‚Å±_
‚âà‚Å±-isEquivalence = record
  { refl = ‚âà‚Å±-refl
  ; sym = ‚âà‚Å±-sym
  ; trans = ‚âà‚Å±-trans
  }

‚âà‚Å±-setoid : Setoid (c ‚äîÀ° ‚Ñì) (c ‚äîÀ° ‚Ñì)
‚âà‚Å±-setoid = record
  { Carrier = Polynomial
  ; _‚âà_ = _‚âà‚Å±_
  ; isEquivalence = ‚âà‚Å±-isEquivalence
  }

_‚âàÀ¢?_ : Decidable _‚âàÀ¢_
(K c‚ÇÅ) ‚âàÀ¢? (K c‚ÇÇ) with proj‚ÇÅ c‚ÇÅ ‚âà? proj‚ÇÅ c‚ÇÇ
... | no ¬¨c‚ÇÅ‚âàc‚ÇÇ = no Œª { (K‚âà c‚ÇÅ‚âàc‚ÇÇ) ‚Üí contradiction c‚ÇÅ‚âàc‚ÇÇ ¬¨c‚ÇÅ‚âàc‚ÇÇ }
... | yes c‚ÇÅ‚âàc‚ÇÇ = yes (K‚âà c‚ÇÅ‚âàc‚ÇÇ)
(K c‚ÇÅ) ‚âàÀ¢? (c‚ÇÇ +x^ m ‚àô q) = no Œª ()
(c‚ÇÅ +x^ n ‚àô p) ‚âàÀ¢? (K c‚ÇÇ) = no Œª ()
(c‚ÇÅ +x^ n ‚àô p) ‚âàÀ¢? (c‚ÇÇ +x^ m ‚àô q) with proj‚ÇÅ c‚ÇÅ ‚âà? proj‚ÇÅ c‚ÇÇ
... | no ¬¨c‚ÇÅ‚âàc‚ÇÇ = no Œª { (+‚âà c‚ÇÅ‚âàc‚ÇÇ _ _) ‚Üí contradiction c‚ÇÅ‚âàc‚ÇÇ ¬¨c‚ÇÅ‚âàc‚ÇÇ }
... | yes c‚ÇÅ‚âàc‚ÇÇ with n ‚âü‚Å∫ m
...   | no  n‚â¢m = no Œª { (+‚âà _ n‚â°m _) ‚Üí contradiction n‚â°m n‚â¢m }
...   | yes n‚â°m with p ‚âàÀ¢? q
...     | no ¬¨p‚âàÀ¢q = no Œª { (+‚âà _ _ p‚âàÀ¢q) ‚Üí contradiction p‚âàÀ¢q ¬¨p‚âàÀ¢q }
...     | yes p‚âàÀ¢q = yes (+‚âà c‚ÇÅ‚âàc‚ÇÇ n‚â°m p‚âàÀ¢q)

_‚âà‚Å±?_ : Decidable _‚âà‚Å±_
0·µñ ‚âà‚Å±? 0·µñ = yes ‚âà‚Å±-refl
0·µñ ‚âà‚Å±? (x^ m ‚àô q) = no Œª ()
(x^ n ‚àô p) ‚âà‚Å±? 0·µñ = no Œª ()
(x^ n ‚àô p) ‚âà‚Å±? (x^ m ‚àô q) with n ‚âü m
... | no  n‚â¢m = no Œª { (0·µñ‚ââ n‚â°m _) ‚Üí contradiction n‚â°m n‚â¢m }
... | yes n‚â°m with p ‚âàÀ¢? q
...   | no ¬¨p‚âàÀ¢q = no Œª { (0·µñ‚ââ _ p‚âàÀ¢q) ‚Üí contradiction p‚âàÀ¢q ¬¨p‚âàÀ¢q }
...   | yes p‚âàÀ¢q = yes (0·µñ‚ââ n‚â°m p‚âàÀ¢q)

‚âà·µñ-isEquivalence : IsEquivalence _‚âà·µñ_
‚âà·µñ-isEquivalence = record
  { refl = ‚âà·µñ-refl
  ; sym = ‚âà·µñ-sym
  ; trans = ‚âà·µñ-trans
  }

‚âà·µñ-setoid : Setoid (c ‚äîÀ° ‚Ñì) (c ‚äîÀ° ‚Ñì)
‚âà·µñ-setoid = record
  { Carrier = Polynomial
  ; _‚âà_ = _‚âà·µñ_
  ; isEquivalence = ‚âà·µñ-isEquivalence
  }

‚âà‚Å±‚áí‚âà·µñ : ‚àÄ {p q} ‚Üí p ‚âà‚Å± q ‚Üí p ‚âà·µñ q
‚âà‚Å±‚áí‚âà·µñ {0·µñ} {0·µñ} 0·µñ‚âà = ‚âà·µñ-refl
‚âà‚Å±‚áí‚âà·µñ {x^ n ‚àô p} {x^ n ‚àô q} (0·µñ‚ââ ‚â°-refl p‚âàÀ¢q) = ‚âà‚úì Œª x ‚Üí *-congÀ° (‚âàÀ¢‚áí‚àÄx[p‚Çì‚âàq‚Çì] p q p‚âàÀ¢q x)
  where
  ‚âàÀ¢‚áí‚àÄx[p‚Çì‚âàq‚Çì] : ‚àÄ p q ‚Üí p ‚âàÀ¢ q ‚Üí ‚àÄ x ‚Üí ‚ü¶ p ‚üßÀ¢ x ‚âà ‚ü¶ q ‚üßÀ¢ x
  ‚âàÀ¢‚áí‚àÄx[p‚Çì‚âàq‚Çì] (K c‚ÇÅ) (K c‚ÇÇ) (K‚âà c‚ÇÅ‚âàc‚ÇÇ) x = c‚ÇÅ‚âàc‚ÇÇ
  ‚âàÀ¢‚áí‚àÄx[p‚Çì‚âàq‚Çì] (c‚ÇÅ +x^ n ‚àô p) (c‚ÇÇ +x^ n ‚àô q) (+‚âà c‚ÇÅ‚âàc‚ÇÇ ‚â°-refl p‚âàÀ¢q) x = begin‚ü® setoid ‚ü©
    proj‚ÇÅ c‚ÇÅ + x ^‚Å∫ n * ‚ü¶ p ‚üßÀ¢ x ‚âà‚ü® +-cong c‚ÇÅ‚âàc‚ÇÇ (*-congÀ° (‚âàÀ¢‚áí‚àÄx[p‚Çì‚âàq‚Çì] p q p‚âàÀ¢q x)) ‚ü©
    proj‚ÇÅ c‚ÇÇ + x ^‚Å∫ n * ‚ü¶ q ‚üßÀ¢ x ‚àé

1·µñ-homo : ‚àÄ x ‚Üí ‚ü¶ 1·µñ ‚üß x ‚âà 1#
1·µñ-homo x = begin‚ü® setoid ‚ü©
  1# * 1# ‚âà‚ü® *-identity ≥ 1# ‚ü© 1# ‚àé

+·µñ-spine-‚â°-K-homo : ‚àÄ n c p x ‚Üí ‚ü¶ +·µñ-spine-‚â°-K n c p ‚üß x ‚âà x ^ n * (proj‚ÇÅ c + ‚ü¶ p ‚üßÀ¢ x)
+·µñ-spine-‚â°-K-homo n c‚ÇÅ (K c‚ÇÇ) x with proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ ‚âà? 0#
... | yes c‚ÇÅ+c‚ÇÇ‚âà0 = begin‚ü® setoid ‚ü©
  0#                            ‚âà‚ü® sym (zero ≥ (x ^ n)) ‚ü©
  x ^ n * 0#                    ‚âà‚ü® *-congÀ° (sym c‚ÇÅ+c‚ÇÇ‚âà0) ‚ü©
  x ^ n * (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ) ‚àé
... | no  c‚ÇÅ+c‚ÇÇ‚ââ0 = refl
+·µñ-spine-‚â°-K-homo n c‚ÇÅ (c‚ÇÇ +x^ i‚ÇÇ ‚àô p) x with proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ ‚âà? 0#
... | yes c‚ÇÅ+c‚ÇÇ‚âà0 = begin‚ü® setoid ‚ü©
  x ^ (n +‚Ñï ‚üÖ i‚ÇÇ ‚áì‚üÜ) * ‚ü¶ p ‚üßÀ¢ x                       ‚âà‚ü® *-cong ≥ (^-^‚Å∫-homo x n i‚ÇÇ) ‚ü©
  (x ^ n * x ^‚Å∫ i‚ÇÇ) * ‚ü¶ p ‚üßÀ¢ x                         ‚âà‚ü® *-assoc (x ^ n) (x ^‚Å∫ i‚ÇÇ) (‚ü¶ p ‚üßÀ¢ x) ‚ü©
  x ^ n * (x ^‚Å∫ i‚ÇÇ * ‚ü¶ p ‚üßÀ¢ x)                         ‚âà‚ü® *-congÀ° (sym (+-identityÀ° (x ^‚Å∫ i‚ÇÇ * ‚ü¶ p ‚üßÀ¢ x))) ‚ü©
  x ^ n * (0# + x ^‚Å∫ i‚ÇÇ * ‚ü¶ p ‚üßÀ¢ x)                    ‚âà‚ü® *-congÀ° (+-cong ≥ (sym c‚ÇÅ+c‚ÇÇ‚âà0)) ‚ü©
  x ^ n * ((proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ) + x ^‚Å∫ i‚ÇÇ * ‚ü¶ p ‚üßÀ¢ x) ‚âà‚ü® *-congÀ° (+-assoc (proj‚ÇÅ c‚ÇÅ) (proj‚ÇÅ c‚ÇÇ) (x ^‚Å∫ i‚ÇÇ * ‚ü¶ p ‚üßÀ¢ x)) ‚ü©
  x ^ n * (proj‚ÇÅ c‚ÇÅ + (proj‚ÇÅ c‚ÇÇ + x ^‚Å∫ i‚ÇÇ * ‚ü¶ p ‚üßÀ¢ x)) ‚àé
... | no  c‚ÇÅ+c‚ÇÇ‚ââ0 = begin‚ü® setoid ‚ü©
  x ^ n * ((proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ) + x ^‚Å∫ i‚ÇÇ * ‚ü¶ p ‚üßÀ¢ x) ‚âà‚ü® *-congÀ° (+-assoc (proj‚ÇÅ c‚ÇÅ) (proj‚ÇÅ c‚ÇÇ) (x ^‚Å∫ i‚ÇÇ * ‚ü¶ p ‚üßÀ¢ x)) ‚ü©
  x ^ n * (proj‚ÇÅ c‚ÇÅ + (proj‚ÇÅ c‚ÇÇ + x ^‚Å∫ i‚ÇÇ * ‚ü¶ p ‚üßÀ¢ x)) ‚àé


+·µñ-spine-‚â°-homo : ‚àÄ n p q x ‚Üí ‚ü¶ +·µñ-spine-‚â° n p q ‚üß x ‚âà x ^ n * ‚ü¶ p ‚üßÀ¢ x + x ^ n * ‚ü¶ q ‚üßÀ¢ x
+·µñ-spine-<-homo : ‚àÄ n‚ÇÅ p n‚ÇÇ q n‚ÇÅ<n‚ÇÇ x ‚Üí ‚ü¶ +·µñ-spine-< n‚ÇÅ p n‚ÇÇ q n‚ÇÅ<n‚ÇÇ ‚üß x ‚âà x ^ n‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x + x ^ n‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x
+·µñ-spine-homo : ‚àÄ n‚ÇÅ p n‚ÇÇ q x ‚Üí ‚ü¶ +·µñ-spine n‚ÇÅ p n‚ÇÇ q ‚üß x ‚âà x ^ n‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x + x ^ n‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x

+·µñ-spine-‚â°-lemma‚ÇÅ : ‚àÄ x a b p q ‚Üí x * p + x * q + x * (a + b) ‚âà x * (a + p) + x * (b + q)
+·µñ-spine-‚â°-lemma‚ÇÅ = solve ACR

+·µñ-spine-‚â°-lemma‚ÇÇ : ‚àÄ x a b p q ‚Üí x * a + x * b + x * (p + q) ‚âà x * (a + p) + x * (b + q)
+·µñ-spine-‚â°-lemma‚ÇÇ = solve ACR

+·µñ-spine-‚â°-homo n (K c‚ÇÅ) q x = begin‚ü® setoid ‚ü©
  ‚ü¶ +·µñ-spine-‚â°-K n c‚ÇÅ q ‚üß x             ‚âà‚ü® +·µñ-spine-‚â°-K-homo n c‚ÇÅ q x ‚ü©
  x ^ n * (proj‚ÇÅ c‚ÇÅ + ‚ü¶ q ‚üßÀ¢ x)         ‚âà‚ü® distribÀ° _ _ _ ‚ü©
  x ^ n * proj‚ÇÅ c‚ÇÅ + (x ^ n) * ‚ü¶ q ‚üßÀ¢ x ‚àé
+·µñ-spine-‚â°-homo n (c‚ÇÅ +x^ i‚ÇÅ ‚àô p) (K c‚ÇÇ) x = begin‚ü® setoid ‚ü©
  ‚ü¶ +·µñ-spine-‚â°-K n c‚ÇÇ (c‚ÇÅ +x^ i‚ÇÅ ‚àô p) ‚üß x         ‚âà‚ü® +·µñ-spine-‚â°-K-homo n c‚ÇÇ (c‚ÇÅ +x^ i‚ÇÅ ‚àô p) x  ‚ü©
  x ^ n * (proj‚ÇÅ c‚ÇÇ + ‚ü¶ c‚ÇÅ +x^ i‚ÇÅ ‚àô p ‚üßÀ¢ x)       ‚âà‚ü® *-congÀ° (+-comm _ _) ‚ü©
  x ^ n * (‚ü¶ c‚ÇÅ +x^ i‚ÇÅ ‚àô p ‚üßÀ¢ x + proj‚ÇÅ c‚ÇÇ)       ‚âà‚ü® distribÀ° _ _ _ ‚ü©
  x ^ n * ‚ü¶ c‚ÇÅ +x^ i‚ÇÅ ‚àô p ‚üßÀ¢ x + x ^ n * proj‚ÇÅ c‚ÇÇ ‚àé
+·µñ-spine-‚â°-homo n (c‚ÇÅ +x^ i‚ÇÅ ‚àô p) (c‚ÇÇ +x^ i‚ÇÇ ‚àô q) x with proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ ‚âà? 0#
... | yes c‚ÇÅ+c‚ÇÇ‚âà0 = begin‚ü® setoid ‚ü©
  ‚ü¶ +·µñ-spine (n +‚Ñï ‚üÖ i‚ÇÅ ‚áì‚üÜ) p (n +‚Ñï ‚üÖ i‚ÇÇ ‚áì‚üÜ) q ‚üß x                                           ‚âà‚ü® +·µñ-spine-homo (n +‚Ñï ‚üÖ i‚ÇÅ ‚áì‚üÜ) p (n +‚Ñï ‚üÖ i‚ÇÇ ‚áì‚üÜ) q x ‚ü©
  x ^ (n +‚Ñï ‚üÖ i‚ÇÅ ‚áì‚üÜ) * ‚ü¶ p ‚üßÀ¢ x + x ^ (n +‚Ñï ‚üÖ i‚ÇÇ ‚áì‚üÜ) * ‚ü¶ q ‚üßÀ¢ x                              ‚âà‚ü® sym (+-identity ≥ _) ‚ü©
  x ^ (n +‚Ñï ‚üÖ i‚ÇÅ ‚áì‚üÜ) * ‚ü¶ p ‚üßÀ¢ x + x ^ (n +‚Ñï ‚üÖ i‚ÇÇ ‚áì‚üÜ) * ‚ü¶ q ‚üßÀ¢ x + 0#                         ‚âà‚ü® +-cong (+-cong (*-cong ≥ (^-^‚Å∫-homo x n i‚ÇÅ)) (*-cong ≥ (^-^‚Å∫-homo x n i‚ÇÇ))) (sym (zero ≥ _)) ‚ü©
  x ^ n * x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x + x ^ n * x ^‚Å∫ i‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x + x ^ n * 0#                        ‚âà‚ü® +-cong (+-cong (*-assoc _ _ _) (*-assoc _ _ _)) (*-congÀ° (sym c‚ÇÅ+c‚ÇÇ‚âà0)) ‚ü©
  x ^ n * (x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) + x ^ n * (x ^‚Å∫ i‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x) + x ^ n * (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ) ‚âà‚ü® +·µñ-spine-‚â°-lemma‚ÇÅ _ _ _ _ _ ‚ü©
  x ^ n * (proj‚ÇÅ c‚ÇÅ + x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) + x ^ n * (proj‚ÇÅ c‚ÇÇ + x ^‚Å∫ i‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x)           ‚àé
... | no  c‚ÇÅ+c‚ÇÇ‚ââ0 with +·µñ-spine ‚üÖ i‚ÇÅ ‚áì‚üÜ p ‚üÖ i‚ÇÇ ‚áì‚üÜ q | +·µñ-spine-homo ‚üÖ i‚ÇÅ ‚áì‚üÜ p ‚üÖ i‚ÇÇ ‚áì‚üÜ q x
...   | 0·µñ | 0‚âàx^i‚ÇÅ*p+x^i‚ÇÇ*q = begin‚ü® setoid ‚ü©
  x ^ n * (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ)                                                                   ‚âà‚ü® sym (+-identity ≥ _) ‚ü©
  x ^ n * (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ) + 0#                                                              ‚âà‚ü® +-cong (distribÀ° _ _ _) (sym (zero ≥ _)) ‚ü©
  x ^ n * proj‚ÇÅ c‚ÇÅ + x ^ n * proj‚ÇÅ c‚ÇÇ + x ^ n * 0#                                                ‚âà‚ü® +-congÀ° (*-congÀ° 0‚âàx^i‚ÇÅ*p+x^i‚ÇÇ*q) ‚ü©
  x ^ n * proj‚ÇÅ c‚ÇÅ + x ^ n * proj‚ÇÅ c‚ÇÇ + x ^ n * (x ^ ‚üÖ i‚ÇÅ ‚áì‚üÜ * ‚ü¶ p ‚üßÀ¢ x + x ^ ‚üÖ i‚ÇÇ ‚áì‚üÜ * ‚ü¶ q ‚üßÀ¢ x) ‚âà‚ü® +-congÀ° (*-congÀ° (+-cong (*-cong ≥ (x^n‚âàx^‚Å∫n x i‚ÇÅ)) (*-cong ≥ (x^n‚âàx^‚Å∫n x i‚ÇÇ)))) ‚ü©
  x ^ n * proj‚ÇÅ c‚ÇÅ + x ^ n * proj‚ÇÅ c‚ÇÇ + x ^ n * (x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x + x ^‚Å∫ i‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x)          ‚âà‚ü® +·µñ-spine-‚â°-lemma‚ÇÇ _ _ _ _ _ ‚ü©
  x ^ n * (proj‚ÇÅ c‚ÇÅ + x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) + x ^ n * (proj‚ÇÅ c‚ÇÇ + x ^‚Å∫ i‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x)                ‚àé
...   | x^ zero ‚àô r   | x^0*r‚âàx^i‚ÇÅ*p+x^i‚ÇÇ*q = begin‚ü® setoid ‚ü©
  ‚ü¶ +·µñ-spine-‚â°-K n (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ , c‚ÇÅ+c‚ÇÇ‚ââ0) r ‚üß x                                          ‚âà‚ü® +·µñ-spine-‚â°-K-homo n (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ , c‚ÇÅ+c‚ÇÇ‚ââ0) r x ‚ü©
  x ^ n * ((proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ) + ‚ü¶ r ‚üßÀ¢ x)                                                      ‚âà‚ü® distribÀ° _ _ _ ‚ü©
  x ^ n * (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ) + x ^ n * ‚ü¶ r ‚üßÀ¢ x                                                ‚âà‚ü® +-cong (distribÀ° _ _ _) (*-congÀ° (sym (*-identityÀ° _))) ‚ü©
  x ^ n * proj‚ÇÅ c‚ÇÅ + x ^ n * proj‚ÇÅ c‚ÇÇ + x ^ n * (x ^ zero * ‚ü¶ r ‚üßÀ¢ x)                             ‚âà‚ü® +-congÀ° (*-congÀ° x^0*r‚âàx^i‚ÇÅ*p+x^i‚ÇÇ*q) ‚ü©
  x ^ n * proj‚ÇÅ c‚ÇÅ + x ^ n * proj‚ÇÅ c‚ÇÇ + x ^ n * (x ^ ‚üÖ i‚ÇÅ ‚áì‚üÜ * ‚ü¶ p ‚üßÀ¢ x + x ^ ‚üÖ i‚ÇÇ ‚áì‚üÜ * ‚ü¶ q ‚üßÀ¢ x) ‚âà‚ü® +-congÀ° (*-congÀ° (+-cong (*-cong ≥ (x^n‚âàx^‚Å∫n x i‚ÇÅ)) (*-cong ≥ (x^n‚âàx^‚Å∫n x i‚ÇÇ)))) ‚ü©
  x ^ n * proj‚ÇÅ c‚ÇÅ + x ^ n * proj‚ÇÅ c‚ÇÇ + x ^ n * (x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x + x ^‚Å∫ i‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x)          ‚âà‚ü® +·µñ-spine-‚â°-lemma‚ÇÇ _ _ _ _ _ ‚ü©
  x ^ n * (proj‚ÇÅ c‚ÇÅ + x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) + x ^ n * (proj‚ÇÅ c‚ÇÇ + x ^‚Å∫ i‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x)                ‚àé
...   | x^ suc n‚ÇÉ ‚àô r | x^n‚ÇÉ*r‚âàx^i‚ÇÅ*p+x^i‚ÇÇ*q = begin‚ü® setoid ‚ü©
  x ^ n * (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ + x ^‚Å∫ ‚üÖ suc n‚ÇÉ ‚áë‚üÜ * ‚ü¶ r ‚üßÀ¢ x)                                     ‚âà‚ü® distribÀ° _ _ _ ‚ü©
  x ^ n * (proj‚ÇÅ c‚ÇÅ + proj‚ÇÅ c‚ÇÇ) + x ^ n * (x ^‚Å∫ ‚üÖ suc n‚ÇÉ ‚áë‚üÜ * ‚ü¶ r ‚üßÀ¢ x)                           ‚âà‚ü® +-cong (distribÀ° _ _ _) (*-congÀ° x^n‚ÇÉ*r‚âàx^i‚ÇÅ*p+x^i‚ÇÇ*q) ‚ü©
  x ^ n * proj‚ÇÅ c‚ÇÅ + x ^ n * proj‚ÇÅ c‚ÇÇ + x ^ n * (x ^ ‚üÖ i‚ÇÅ ‚áì‚üÜ * ‚ü¶ p ‚üßÀ¢ x + x ^ ‚üÖ i‚ÇÇ ‚áì‚üÜ * ‚ü¶ q ‚üßÀ¢ x) ‚âà‚ü® +-congÀ° (*-congÀ° (+-cong (*-cong ≥ (x^n‚âàx^‚Å∫n x i‚ÇÅ)) (*-cong ≥ (x^n‚âàx^‚Å∫n x i‚ÇÇ)))) ‚ü©
  x ^ n * proj‚ÇÅ c‚ÇÅ + x ^ n * proj‚ÇÅ c‚ÇÇ + x ^ n * (x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x + x ^‚Å∫ i‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x)          ‚âà‚ü® +·µñ-spine-‚â°-lemma‚ÇÇ _ _ _ _ _ ‚ü©
  x ^ n * (proj‚ÇÅ c‚ÇÅ + x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) + x ^ n * (proj‚ÇÅ c‚ÇÇ + x ^‚Å∫ i‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x)                ‚àé


+·µñ-spine-<-lemma
  : ‚àÄ n‚ÇÅ c‚ÇÅ i‚ÇÅ p n‚ÇÇ q (n‚ÇÅ<n‚ÇÇ : n‚ÇÅ < n‚ÇÇ) x
  ‚Üí x ^ n‚ÇÅ * (c‚ÇÅ + (x ^ ‚üÖ i‚ÇÅ ‚áì‚üÜ * ‚ü¶ p ‚üßÀ¢ x + x ^ (n‚ÇÇ ‚à∏ n‚ÇÅ) * ‚ü¶ q ‚üßÀ¢ x))
  ‚âà x ^ n‚ÇÅ * (c‚ÇÅ + x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) + x ^ n‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x
+·µñ-spine-<-lemma n‚ÇÅ c‚ÇÅ i‚ÇÅ p n‚ÇÇ q n‚ÇÅ<n‚ÇÇ x = begin‚ü® setoid ‚ü©
  x ^ n‚ÇÅ * (c‚ÇÅ + (x ^ ‚üÖ i‚ÇÅ ‚áì‚üÜ * ‚ü¶ p ‚üßÀ¢ x + x ^ (n‚ÇÇ ‚à∏ n‚ÇÅ) * ‚ü¶ q ‚üßÀ¢ x))          ‚âà‚ü® *-congÀ° (sym (+-assoc _ _ _)) ‚ü©
  x ^ n‚ÇÅ * ((c‚ÇÅ + x ^ ‚üÖ i‚ÇÅ ‚áì‚üÜ * ‚ü¶ p ‚üßÀ¢ x) + x ^ (n‚ÇÇ ‚à∏ n‚ÇÅ) * ‚ü¶ q ‚üßÀ¢ x)          ‚âà‚ü® distribÀ° _ _ _ ‚ü©
  x ^ n‚ÇÅ * (c‚ÇÅ + x ^ ‚üÖ i‚ÇÅ ‚áì‚üÜ * ‚ü¶ p ‚üßÀ¢ x) + x ^ n‚ÇÅ * (x ^ (n‚ÇÇ ‚à∏ n‚ÇÅ) * ‚ü¶ q ‚üßÀ¢ x) ‚âà‚ü® +-cong (*-congÀ° (+-congÀ° (*-cong ≥ (x^n‚âàx^‚Å∫n x i‚ÇÅ)))) (sym (*-assoc _ _ _)) ‚ü©
  x ^ n‚ÇÅ * (c‚ÇÅ + x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) + (x ^ n‚ÇÅ * x ^ (n‚ÇÇ ‚à∏ n‚ÇÅ)) * ‚ü¶ q ‚üßÀ¢ x     ‚âà‚ü® +-congÀ° (*-cong ≥ (sym (^-homo x n‚ÇÅ (n‚ÇÇ ‚à∏ n‚ÇÅ)))) ‚ü©
  x ^ n‚ÇÅ * (c‚ÇÅ + x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) + x ^ (n‚ÇÅ +‚Ñï (n‚ÇÇ ‚à∏ n‚ÇÅ)) * ‚ü¶ q ‚üßÀ¢ x        ‚â°‚ü® ‚â°-cong (Œª t ‚Üí x ^ n‚ÇÅ * (c‚ÇÅ + x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) + x ^ t * ‚ü¶ q ‚üßÀ¢ x) (m+[n‚à∏m]‚â°n (<‚áí‚â§ n‚ÇÅ<n‚ÇÇ)) ‚ü©
  x ^ n‚ÇÅ * (c‚ÇÅ + x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) + x ^ n‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x                       ‚àé

+·µñ-spine-<-homo n‚ÇÅ (K c‚ÇÅ) n‚ÇÇ q n‚ÇÅ<n‚ÇÇ x = begin‚ü® setoid ‚ü©
  x ^ n‚ÇÅ * (proj‚ÇÅ c‚ÇÅ + x ^‚Å∫ ‚üÖ n‚ÇÇ ‚à∏ n‚ÇÅ ‚áë‚üÜ * ‚ü¶ q ‚üßÀ¢ x)          ‚âà‚ü® distribÀ° (x ^ n‚ÇÅ) (proj‚ÇÅ c‚ÇÅ) (x ^‚Å∫ ‚üÖ n‚ÇÇ ‚à∏ n‚ÇÅ ‚áë‚üÜ * ‚ü¶ q ‚üßÀ¢ x) ‚ü©
  x ^ n‚ÇÅ * proj‚ÇÅ c‚ÇÅ + x ^ n‚ÇÅ * (x ^‚Å∫ ‚üÖ n‚ÇÇ ‚à∏ n‚ÇÅ ‚áë‚üÜ * ‚ü¶ q ‚üßÀ¢ x) ‚âà‚ü® +-congÀ° (sym (*-assoc (x ^ n‚ÇÅ) (x ^‚Å∫ ‚üÖ n‚ÇÇ ‚à∏ n‚ÇÅ ‚áë‚üÜ) (‚ü¶ q ‚üßÀ¢ x))) ‚ü©
  x ^ n‚ÇÅ * proj‚ÇÅ c‚ÇÅ + (x ^ n‚ÇÅ * x ^‚Å∫ ‚üÖ n‚ÇÇ ‚à∏ n‚ÇÅ ‚áë‚üÜ) * ‚ü¶ q ‚üßÀ¢ x ‚âà‚ü® +-congÀ° (*-cong ≥ (sym (^-^‚Å∫-homo x n‚ÇÅ ‚üÖ n‚ÇÇ ‚à∏ n‚ÇÅ ‚áë‚üÜ))) ‚ü©
  x ^ n‚ÇÅ * proj‚ÇÅ c‚ÇÅ + x ^ (n‚ÇÅ +‚Ñï ‚üÖ ‚üÖ n‚ÇÇ ‚à∏ n‚ÇÅ ‚áë‚üÜ ‚áì‚üÜ) * ‚ü¶ q ‚üßÀ¢ x ‚â°‚ü® ‚â°-cong (Œª t ‚Üí x ^ n‚ÇÅ * proj‚ÇÅ c‚ÇÅ + x ^ t * ‚ü¶ q ‚üßÀ¢ x) lemma ‚ü©
  x ^ n‚ÇÅ * proj‚ÇÅ c‚ÇÅ + x ^ n‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x ‚àé
  where
  lemma : n‚ÇÅ +‚Ñï ‚üÖ ‚üÖ n‚ÇÇ ‚à∏ n‚ÇÅ ‚áë‚üÜ ‚áì‚üÜ ‚â° n‚ÇÇ
  lemma = begin‚ü® ‚â°-setoid ‚Ñï ‚ü©
    n‚ÇÅ +‚Ñï ‚üÖ ‚üÖ n‚ÇÇ ‚à∏ n‚ÇÅ ‚áë‚üÜ ‚áì‚üÜ ‚â°‚ü® ‚â°-cong (Œª x ‚Üí n‚ÇÅ +‚Ñï x) (‚Ñï‚Üí‚Ñï‚Å∫‚Üí‚Ñï (n‚ÇÇ ‚à∏ n‚ÇÅ) {‚â¢‚áí¬¨‚âü (m<n‚áín‚à∏m‚â¢0 n‚ÇÅ<n‚ÇÇ)}) ‚ü©
    n‚ÇÅ +‚Ñï (n‚ÇÇ ‚à∏ n‚ÇÅ)         ‚â°‚ü® m+[n‚à∏m]‚â°n {n‚ÇÅ} {n‚ÇÇ} (<‚áí‚â§ n‚ÇÅ<n‚ÇÇ) ‚ü©
    n‚ÇÇ ‚àé
+·µñ-spine-<-homo n‚ÇÅ (c‚ÇÅ +x^ i‚ÇÅ ‚àô p) n‚ÇÇ q n‚ÇÅ<n‚ÇÇ x with +·µñ-spine ‚üÖ i‚ÇÅ ‚áì‚üÜ p (n‚ÇÇ ‚à∏ n‚ÇÅ) q | +·µñ-spine-homo ‚üÖ i‚ÇÅ ‚áì‚üÜ p (n‚ÇÇ ‚à∏ n‚ÇÅ) q x
... | 0·µñ | 0‚âàx^i‚ÇÅ*p+x^[n‚ÇÇ‚à∏n‚ÇÅ]*q = begin‚ü® setoid ‚ü©
  x ^ n‚ÇÅ * proj‚ÇÅ c‚ÇÅ                                                         ‚âà‚ü® *-congÀ° (sym (+-identity ≥ (proj‚ÇÅ c‚ÇÅ))) ‚ü©
  x ^ n‚ÇÅ * (proj‚ÇÅ c‚ÇÅ + 0#)                                                  ‚âà‚ü® *-congÀ° (+-congÀ° 0‚âàx^i‚ÇÅ*p+x^[n‚ÇÇ‚à∏n‚ÇÅ]*q) ‚ü©
  x ^ n‚ÇÅ * (proj‚ÇÅ c‚ÇÅ + (x ^ ‚üÖ i‚ÇÅ ‚áì‚üÜ * ‚ü¶ p ‚üßÀ¢ x + x ^ (n‚ÇÇ ‚à∏ n‚ÇÅ) * ‚ü¶ q ‚üßÀ¢ x)) ‚âà‚ü® +·µñ-spine-<-lemma n‚ÇÅ (proj‚ÇÅ c‚ÇÅ) i‚ÇÅ p n‚ÇÇ q n‚ÇÅ<n‚ÇÇ x ‚ü©
  x ^ n‚ÇÅ * (proj‚ÇÅ c‚ÇÅ + x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) + x ^ n‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x              ‚àé
... | x^ zero   ‚àô r | x^0*r‚âàx^i‚ÇÅ*p+x^[n‚ÇÇ‚à∏n‚ÇÅ]*q = begin‚ü® setoid ‚ü©
  ‚ü¶ +·µñ-spine-‚â°-K n‚ÇÅ c‚ÇÅ r ‚üß x                                                ‚âà‚ü® +·µñ-spine-‚â°-K-homo n‚ÇÅ c‚ÇÅ r x ‚ü©
  x ^ n‚ÇÅ * (proj‚ÇÅ c‚ÇÅ + ‚ü¶ r ‚üßÀ¢ x)                                            ‚âà‚ü® *-congÀ° (+-congÀ° (sym (*-identityÀ° (‚ü¶ r ‚üßÀ¢ x)))) ‚ü©
  x ^ n‚ÇÅ * (proj‚ÇÅ c‚ÇÅ + x ^ zero * ‚ü¶ r ‚üßÀ¢ x)                                 ‚âà‚ü® *-congÀ° (+-congÀ° x^0*r‚âàx^i‚ÇÅ*p+x^[n‚ÇÇ‚à∏n‚ÇÅ]*q) ‚ü©
  x ^ n‚ÇÅ * (proj‚ÇÅ c‚ÇÅ + (x ^ ‚üÖ i‚ÇÅ ‚áì‚üÜ * ‚ü¶ p ‚üßÀ¢ x + x ^ (n‚ÇÇ ‚à∏ n‚ÇÅ) * ‚ü¶ q ‚üßÀ¢ x)) ‚âà‚ü® +·µñ-spine-<-lemma n‚ÇÅ (proj‚ÇÅ c‚ÇÅ) i‚ÇÅ p n‚ÇÇ q n‚ÇÅ<n‚ÇÇ x ‚ü©
  x ^ n‚ÇÅ * (proj‚ÇÅ c‚ÇÅ + x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) + x ^ n‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x              ‚àé
... | x^ suc n‚ÇÉ ‚àô r | x^n‚ÇÉ*r‚âàx^i‚ÇÅ*p+x^[n‚ÇÇ‚à∏n‚ÇÅ]*q = begin‚ü® setoid ‚ü©
  x ^ n‚ÇÅ * (proj‚ÇÅ c‚ÇÅ + x ^‚Å∫ ‚üÖ suc n‚ÇÉ ‚áë‚üÜ * ‚ü¶ r ‚üßÀ¢ x)                         ‚âà‚ü® *-congÀ° (+-congÀ° x^n‚ÇÉ*r‚âàx^i‚ÇÅ*p+x^[n‚ÇÇ‚à∏n‚ÇÅ]*q) ‚ü©
  x ^ n‚ÇÅ * (proj‚ÇÅ c‚ÇÅ + (x ^ ‚üÖ i‚ÇÅ ‚áì‚üÜ * ‚ü¶ p ‚üßÀ¢ x + x ^ (n‚ÇÇ ‚à∏ n‚ÇÅ) * ‚ü¶ q ‚üßÀ¢ x)) ‚âà‚ü® +·µñ-spine-<-lemma n‚ÇÅ (proj‚ÇÅ c‚ÇÅ) i‚ÇÅ p n‚ÇÇ q n‚ÇÅ<n‚ÇÇ x ‚ü©
  x ^ n‚ÇÅ * (proj‚ÇÅ c‚ÇÅ + x ^‚Å∫ i‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) + x ^ n‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x              ‚àé

+·µñ-spine-homo n‚ÇÅ p n‚ÇÇ q x with <-cmp n‚ÇÅ n‚ÇÇ
... | tri< n‚ÇÅ<n‚ÇÇ _ _  = +·µñ-spine-<-homo n‚ÇÅ p n‚ÇÇ q n‚ÇÅ<n‚ÇÇ x
... | tri‚âà _ ‚â°-refl _ = +·µñ-spine-‚â°-homo n‚ÇÅ p q x
... | tri> _ _ n‚ÇÅ>n‚ÇÇ  = begin‚ü® setoid ‚ü©
  ‚ü¶ +·µñ-spine-< n‚ÇÇ q n‚ÇÅ p n‚ÇÅ>n‚ÇÇ ‚üß x      ‚âà‚ü® +·µñ-spine-<-homo n‚ÇÇ q n‚ÇÅ p n‚ÇÅ>n‚ÇÇ x ‚ü©
  x ^ n‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x + x ^ n‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x ‚âà‚ü® +-comm (x ^ n‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x) (x ^ n‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) ‚ü©
  x ^ n‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x + x ^ n‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x ‚àé

+·µñ-homo : ‚àÄ p q x ‚Üí ‚ü¶ p +·µñ q ‚üß x ‚âà ‚ü¶ p ‚üß x + ‚ü¶ q ‚üß x
+·µñ-homo 0·µñ q x = sym (+-identityÀ° (‚ü¶ q ‚üß x))
+·µñ-homo (x^ o‚ÇÅ ‚àô p) 0·µñ x = sym (+-identity ≥ (‚ü¶ x^ o‚ÇÅ ‚àô p ‚üß x))
+·µñ-homo (x^ o‚ÇÅ ‚àô p) (x^ o‚ÇÇ ‚àô q) x = +·µñ-spine-homo o‚ÇÅ p o‚ÇÇ q x

‚àô·µñ-spine-homo : ‚àÄ a p x ‚Üí ‚ü¶ ‚àô·µñ-spine a p ‚üßÀ¢ x ‚âà proj‚ÇÅ a * ‚ü¶ p ‚üßÀ¢ x
‚àô·µñ-spine-homo a (K c) x = refl
‚àô·µñ-spine-homo a (c +x^ m ‚àô p) x = begin‚ü® setoid ‚ü©
  proj‚ÇÅ a * proj‚ÇÅ c + (x ^‚Å∫ m) * ‚ü¶ ‚àô·µñ-spine a p ‚üßÀ¢ x  ‚âà‚ü® +-congÀ° (*-congÀ° (‚àô·µñ-spine-homo a p x)) ‚ü©
  proj‚ÇÅ a * proj‚ÇÅ c + (x ^‚Å∫ m) * (proj‚ÇÅ a * ‚ü¶ p ‚üßÀ¢ x) ‚âà‚ü® +-congÀ° (x*[y*z]‚âày*[x*z] (x ^‚Å∫ m) (proj‚ÇÅ a) (‚ü¶ p ‚üßÀ¢ x)) ‚ü©
  proj‚ÇÅ a * proj‚ÇÅ c + proj‚ÇÅ a * (x ^‚Å∫ m * ‚ü¶ p ‚üßÀ¢ x)   ‚âà‚ü® sym (distribÀ° (proj‚ÇÅ a) (proj‚ÇÅ c) ((x ^‚Å∫ m) * ‚ü¶ p ‚üßÀ¢ x)) ‚ü©
  proj‚ÇÅ a * (proj‚ÇÅ c + (x ^‚Å∫ m) * ‚ü¶ p ‚üßÀ¢ x)           ‚àé
  where
  x*[y*z]‚âày*[x*z] : ‚àÄ x y z ‚Üí x * (y * z) ‚âà y * (x * z)
  x*[y*z]‚âày*[x*z] = solve ACR

‚àô·µñ-homo : ‚àÄ a p x ‚Üí ‚ü¶ a ‚àô·µñ p ‚üß x ‚âà proj‚ÇÅ a * ‚ü¶ p ‚üß x
‚àô·µñ-homo a 0·µñ x = sym (zero ≥ (proj‚ÇÅ a))
‚àô·µñ-homo a (x^ n ‚àô p) x = begin‚ü® setoid ‚ü©
  x ^ n * ‚ü¶ ‚àô·µñ-spine a p ‚üßÀ¢ x  ‚âà‚ü® *-congÀ° (‚àô·µñ-spine-homo a p x) ‚ü©
  x ^ n * (proj‚ÇÅ a * ‚ü¶ p ‚üßÀ¢ x) ‚âà‚ü® sym (*-assoc (x ^ n) (proj‚ÇÅ a) (‚ü¶ p ‚üßÀ¢ x)) ‚ü©
  (x ^ n * proj‚ÇÅ a) * ‚ü¶ p ‚üßÀ¢ x ‚âà‚ü® *-cong ≥ (*-comm (x ^ n) (proj‚ÇÅ a)) ‚ü©
  (proj‚ÇÅ a * x ^ n) * ‚ü¶ p ‚üßÀ¢ x ‚âà‚ü® *-assoc (proj‚ÇÅ a) (x ^ n) (‚ü¶ p ‚üßÀ¢ x) ‚ü©
  proj‚ÇÅ a * (x ^ n * ‚ü¶ p ‚üßÀ¢ x) ‚àé

*·µñ-homo : ‚àÄ p q x ‚Üí ‚ü¶ p *·µñ q ‚üß x ‚âà ‚ü¶ p ‚üß x * ‚ü¶ q ‚üß x
*·µñ-homo 0·µñ q x = sym (zeroÀ° (‚ü¶ q ‚üß x))
*·µñ-homo (x^ o‚ÇÅ ‚àô p) 0·µñ x = sym (zero ≥ (x ^ o‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x))
*·µñ-homo (x^ o‚ÇÅ ‚àô p) (x^ o‚ÇÇ ‚àô q) x = *·µñ-spine-homo o‚ÇÅ p o‚ÇÇ q
  where
  final : ‚àÄ x y z w ‚Üí (x * y) * (z * w) ‚âà (x * z) * (y * w)
  final = solve ACR
  lemma‚ÇÅ : ‚àÄ a b d k q ‚Üí a * b * d * (k * q) ‚âà a * b * (k * (d * q))
  lemma‚ÇÅ a b d k q =  begin‚ü® setoid ‚ü©
    a * b * d * (k * q)   ‚âà‚ü® *-assoc (a * b) d (k * q) ‚ü©
    a * b * (d * (k * q)) ‚âà‚ü® *-congÀ° (sym (*-assoc d k q)) ‚ü©
    a * b * ((d * k) * q) ‚âà‚ü® *-congÀ° (*-cong ≥ (*-comm d k)) ‚ü©
    a * b * ((k * d) * q) ‚âà‚ü® *-congÀ° (*-assoc k d q) ‚ü©
    a * b * (k * (d * q)) ‚àé
  lemma‚ÇÇ : ‚àÄ o c l p ‚Üí o * c * (l * p) ‚âà o * (c * p * l)
  lemma‚ÇÇ o c l p = begin‚ü® setoid ‚ü©
    o * c * (l * p)   ‚âà‚ü® *-assoc o c (l * p) ‚ü©
    o * (c * (l * p)) ‚âà‚ü® *-congÀ° (*-congÀ° (*-comm l p)) ‚ü©
    o * (c * (p * l)) ‚âà‚ü® *-congÀ° (sym (*-assoc c p l)) ‚ü©
    o * ((c * p) * l) ‚àé
  lemma‚ÇÉ : ‚àÄ a c p b d q ‚Üí a * c * p * (b * d * q) ‚âà a * b * (c * p * (d * q))
  lemma‚ÇÉ a c p b d q = begin‚ü® setoid ‚ü©
    (a * c) * p * ((b * d) * q) ‚âà‚ü® *-cong (*-assoc a c p) (*-assoc b d q) ‚ü©
    a * (c * p) * (b * (d * q)) ‚âà‚ü® final a (c * p) b (d * q) ‚ü©
    a * b * (c * p * (d * q)) ‚àé
  mult
    : ‚àÄ a b c d k l p q
    ‚Üí (a * b) * (k * l)
    + (a * b * d) * (k * q)
    + (a * b * c) * (l * p)
    + (a * c * p) * (b * d * q)
    ‚âà (a * (k + c * p)) * (b * (l + d * q))
  mult a b c d k l p q = begin‚ü® setoid ‚ü©
    (a * b) * (k * l) + (a * b * d) * (k * q) +
    (a * b * c) * (l * p) + (a * c * p) * (b * d * q)
    ‚âà‚ü® +-cong (+-cong (+-congÀ° (lemma‚ÇÅ a b d k q))
                      (lemma‚ÇÇ (a * b) c l p))
              (lemma‚ÇÉ a c p b d q)
     ‚ü©
    (a * b) * (k * l) + (a * b) * (k * (d * q)) +
    (a * b) * ((c * p) * l) + (a * b) * ((c * p) * (d * q))
    ‚âà‚ü® +-assoc _ _ _ ‚ü©
    ((a * b) * (k * l) + (a * b) * (k * (d * q))) +
    ((a * b) * ((c * p) * l) + (a * b) * ((c * p) * (d * q)))
    ‚âà‚ü® +-cong (sym (distribÀ° (a * b) (k * l) (k * (d * q))))
              (sym (distribÀ° (a * b) (c * p * l) ((c * p) * (d * q))))
     ‚ü©
    (a * b) * (k * l + k * (d * q)) +
    (a * b) * ((c * p) * l + (c * p) * (d * q))
    ‚âà‚ü® sym (distribÀ° (a * b) _ _) ‚ü©
    (a * b) * ((k * l + k * (d * q)) + ((c * p) * l + (c * p) * (d * q)))
    ‚âà‚ü® *-congÀ° (sym (+-assoc _ _ _)) ‚ü©
    (a * b) * (k * l + k * (d * q) + (c * p) * l + (c * p) * (d * q))
    ‚âà‚ü® *-congÀ° (sym (foil k (c * p) l (d * q))) ‚ü©
    (a * b) * ((k + c * p) * (l + d * q))
    ‚âà‚ü® final a b (k + c * p) (l + d * q) ‚ü©
    (a * (k + c * p)) * (b * (l + d * q)) ‚àé

  *·µñ-spine-homo : ‚àÄ o‚ÇÅ p o‚ÇÇ q ‚Üí ‚ü¶ *·µñ-spine o‚ÇÅ p o‚ÇÇ q ‚üß x ‚âà (x ^ o‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) * (x ^ o‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x)
  *·µñ-spine-homo o‚ÇÅ (K c‚ÇÅ) o‚ÇÇ q = begin‚ü® setoid ‚ü©
    x ^ (o‚ÇÅ +‚Ñï o‚ÇÇ) * ‚ü¶ ‚àô·µñ-spine c‚ÇÅ q ‚üßÀ¢ x     ‚âà‚ü® *-congÀ° (‚àô·µñ-spine-homo c‚ÇÅ q x) ‚ü©
    x ^ (o‚ÇÅ +‚Ñï o‚ÇÇ) * (proj‚ÇÅ c‚ÇÅ * ‚ü¶ q ‚üßÀ¢ x)    ‚âà‚ü® *-cong ≥ (^-homo x o‚ÇÅ o‚ÇÇ) ‚ü©
    (x ^ o‚ÇÅ * x ^ o‚ÇÇ) * (proj‚ÇÅ c‚ÇÅ * ‚ü¶ q ‚üßÀ¢ x) ‚âà‚ü® final (x ^ o‚ÇÅ) (x ^ o‚ÇÇ) (proj‚ÇÅ c‚ÇÅ) (‚ü¶ q ‚üßÀ¢ x)  ‚ü©
    (x ^ o‚ÇÅ * proj‚ÇÅ c‚ÇÅ) * (x ^ o‚ÇÇ * ‚ü¶ q ‚üßÀ¢ x) ‚àé
  *·µñ-spine-homo o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) o‚ÇÇ (K c‚ÇÇ) = begin‚ü® setoid ‚ü©
    x ^ (o‚ÇÅ +‚Ñï o‚ÇÇ) * (proj‚ÇÅ c‚ÇÇ * proj‚ÇÅ c‚ÇÅ + (x ^‚Å∫ n‚ÇÅ) * ‚ü¶ ‚àô·µñ-spine c‚ÇÇ p ‚üßÀ¢ x)     ‚âà‚ü® *-cong (^-homo x o‚ÇÅ o‚ÇÇ) (+-cong (*-comm (proj‚ÇÅ c‚ÇÇ) (proj‚ÇÅ c‚ÇÅ)) (*-congÀ° (‚àô·µñ-spine-homo c‚ÇÇ p x))) ‚ü©
    (x ^ o‚ÇÅ * x ^ o‚ÇÇ) * (proj‚ÇÅ c‚ÇÅ * proj‚ÇÅ c‚ÇÇ + (x ^‚Å∫ n‚ÇÅ) * (proj‚ÇÅ c‚ÇÇ * ‚ü¶ p ‚üßÀ¢ x)) ‚âà‚ü® *-congÀ° (+-congÀ° (*-congÀ° (*-comm (proj‚ÇÅ c‚ÇÇ) (‚ü¶ p ‚üßÀ¢ x)))) ‚ü©
    (x ^ o‚ÇÅ * x ^ o‚ÇÇ) * (proj‚ÇÅ c‚ÇÅ * proj‚ÇÅ c‚ÇÇ + (x ^‚Å∫ n‚ÇÅ) * (‚ü¶ p ‚üßÀ¢ x * proj‚ÇÅ c‚ÇÇ)) ‚âà‚ü® *-congÀ° (+-congÀ° (sym (*-assoc (x ^‚Å∫ n‚ÇÅ) (‚ü¶ p ‚üßÀ¢ x) (proj‚ÇÅ c‚ÇÇ)))) ‚ü©
    (x ^ o‚ÇÅ * x ^ o‚ÇÇ) * (proj‚ÇÅ c‚ÇÅ * proj‚ÇÅ c‚ÇÇ + (x ^‚Å∫ n‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x) * proj‚ÇÅ c‚ÇÇ)   ‚âà‚ü® *-congÀ° (sym (distrib ≥ (proj‚ÇÅ c‚ÇÇ) (proj‚ÇÅ c‚ÇÅ) (x ^‚Å∫ n‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x))) ‚ü©
    (x ^ o‚ÇÅ * x ^ o‚ÇÇ) * ((proj‚ÇÅ c‚ÇÅ + (x ^‚Å∫ n‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x)) * proj‚ÇÅ c‚ÇÇ)            ‚âà‚ü® final (x ^ o‚ÇÅ) (x ^ o‚ÇÇ) (proj‚ÇÅ c‚ÇÅ + (x ^‚Å∫ n‚ÇÅ * ‚ü¶ p ‚üßÀ¢ x)) (proj‚ÇÅ c‚ÇÇ) ‚ü©
    x ^ o‚ÇÅ * (proj‚ÇÅ c‚ÇÅ + (x ^‚Å∫ n‚ÇÅ) * ‚ü¶ p ‚üßÀ¢ x) * (x ^ o‚ÇÇ * proj‚ÇÅ c‚ÇÇ)              ‚àé
  *·µñ-spine-homo o‚ÇÅ (c‚ÇÅ +x^ n‚ÇÅ ‚àô p) o‚ÇÇ (c‚ÇÇ +x^ n‚ÇÇ ‚àô q) = begin‚ü® setoid ‚ü©
    ‚ü¶ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ)
    +·µñ c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q
    +·µñ c‚ÇÇ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) ‚àô p
    +·µñ *·µñ-spine (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q ‚üß x
    ‚âà‚ü® +·µñ-homo (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ) +·µñ
                c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q +·µñ
                c‚ÇÇ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) ‚àô p)
               (*·µñ-spine (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q) x
     ‚ü©
    ‚ü¶ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ)
    +·µñ c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q
    +·µñ c‚ÇÇ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) ‚àô p ‚üß x
    + ‚ü¶ *·µñ-spine (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q ‚üß x
    ‚âà‚ü® +-cong (+·µñ-homo (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ) +·µñ
                        c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q)
                       (c‚ÇÇ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) ‚àô p) x)
              (*·µñ-spine-homo (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) p (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) q)
     ‚ü©
    ‚ü¶ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ)
    +·µñ c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q ‚üß x
    + ‚ü¶ c‚ÇÇ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) ‚àô p ‚üß x
    + (x ^ (o‚ÇÅ +‚Ñï ‚üÖ n‚ÇÅ ‚áì‚üÜ) * ‚ü¶ p ‚üßÀ¢ x) * (x ^ (o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) * ‚ü¶ q ‚üßÀ¢ x)
    ‚âà‚ü® +-cong (+-cong (+·µñ-homo (x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ))
                               (c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q) x)
                      (*-cong  (^-^‚Å∫-homo x (o‚ÇÅ +‚Ñï o‚ÇÇ) n‚ÇÅ)
                               (‚àô·µñ-spine-homo c‚ÇÇ p x)))
              (*-cong (*-cong ≥ (^-^‚Å∫-homo x o‚ÇÅ n‚ÇÅ))
                      (*-cong ≥ (^-^‚Å∫-homo x o‚ÇÇ n‚ÇÇ)))
     ‚ü©
    ‚ü¶ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ) ‚àô K (c‚ÇÅ *-nonzero c‚ÇÇ) ‚üß x
    + ‚ü¶ c‚ÇÅ ‚àô·µñ x^ (o‚ÇÅ +‚Ñï o‚ÇÇ +‚Ñï ‚üÖ n‚ÇÇ ‚áì‚üÜ) ‚àô q ‚üß x
    + (x ^ (o‚ÇÅ +‚Ñï o‚ÇÇ) * x ^‚Å∫ n‚ÇÅ) * (proj‚ÇÅ c‚ÇÇ * ‚ü¶ p ‚üßÀ¢ x)
    + ((x ^ o‚ÇÅ * x ^‚Å∫ n‚ÇÅ) * ‚ü¶ p ‚üßÀ¢ x) * ((x ^ o‚ÇÇ * x ^‚Å∫ n‚ÇÇ) * ‚ü¶ q ‚üßÀ¢ x)
    ‚âà‚ü® +-cong ≥ (+-cong (+-cong (*-cong ≥ (^-homo x o‚ÇÅ o‚ÇÇ))
                               (*-cong  (^-^‚Å∫-homo x (o‚ÇÅ +‚Ñï o‚ÇÇ) n‚ÇÇ)
                                        (‚àô·µñ-spine-homo c‚ÇÅ q x)))
                       (*-cong ≥ (*-cong ≥ (^-homo x o‚ÇÅ o‚ÇÇ)))) ‚ü©
      (x ^ o‚ÇÅ * x ^ o‚ÇÇ) * (proj‚ÇÅ c‚ÇÅ * proj‚ÇÅ c‚ÇÇ)
    + (x ^ (o‚ÇÅ +‚Ñï o‚ÇÇ) * x ^‚Å∫ n‚ÇÇ) * (proj‚ÇÅ c‚ÇÅ * ‚ü¶ q ‚üßÀ¢ x)
    + (x ^ o‚ÇÅ * x ^ o‚ÇÇ * x ^‚Å∫ n‚ÇÅ) * (proj‚ÇÅ c‚ÇÇ * ‚ü¶ p ‚üßÀ¢ x)
    + ((x ^ o‚ÇÅ * x ^‚Å∫ n‚ÇÅ) * ‚ü¶ p ‚üßÀ¢ x) * ((x ^ o‚ÇÇ * x ^‚Å∫ n‚ÇÇ) * ‚ü¶ q ‚üßÀ¢ x)
    ‚âà‚ü® +-cong ≥ (+-cong ≥ (+-congÀ° (*-cong ≥ (*-cong ≥ (^-homo x o‚ÇÅ o‚ÇÇ))))) ‚ü©
      (x ^ o‚ÇÅ * x ^ o‚ÇÇ) * (proj‚ÇÅ c‚ÇÅ * proj‚ÇÅ c‚ÇÇ)
    + ((x ^ o‚ÇÅ * x ^ o‚ÇÇ) * x ^‚Å∫ n‚ÇÇ) * (proj‚ÇÅ c‚ÇÅ * ‚ü¶ q ‚üßÀ¢ x)
    + (x ^ o‚ÇÅ * x ^ o‚ÇÇ * x ^‚Å∫ n‚ÇÅ) * (proj‚ÇÅ c‚ÇÇ * ‚ü¶ p ‚üßÀ¢ x)
    + ((x ^ o‚ÇÅ * x ^‚Å∫ n‚ÇÅ) * ‚ü¶ p ‚üßÀ¢ x) * ((x ^ o‚ÇÇ * x ^‚Å∫ n‚ÇÇ) * ‚ü¶ q ‚üßÀ¢ x)
    ‚âà‚ü® mult (x ^ o‚ÇÅ) (x ^ o‚ÇÇ) (x ^‚Å∫ n‚ÇÅ) (x ^‚Å∫ n‚ÇÇ) (proj‚ÇÅ c‚ÇÅ) (proj‚ÇÅ c‚ÇÇ) (‚ü¶ p ‚üßÀ¢ x) (‚ü¶ q ‚üßÀ¢ x) ‚ü©
    ((x ^ o‚ÇÅ) * (proj‚ÇÅ c‚ÇÅ + (x ^‚Å∫ n‚ÇÅ) * ‚ü¶ p ‚üßÀ¢ x)) *
    ((x ^ o‚ÇÇ) * (proj‚ÇÅ c‚ÇÇ + (x ^‚Å∫ n‚ÇÇ) * ‚ü¶ q ‚üßÀ¢ x)) ‚àé

-·µñ‚Äøhomo : ‚àÄ p x ‚Üí ‚ü¶ -·µñ p ‚üß x ‚âà - ‚ü¶ p ‚üß x
-·µñ‚Äøhomo p x = begin‚ü® setoid ‚ü©
  ‚ü¶ -1#-nonzero ‚àô·µñ p ‚üß x ‚âà‚ü® ‚àô·µñ-homo -1#-nonzero p x ‚ü©
  - 1# * ‚ü¶ p ‚üß x         ‚âà‚ü® sym (-‚ÄødistribÀ°-* 1# (‚ü¶ p ‚üß x)) ‚ü©
  - (1# * ‚ü¶ p ‚üß x)       ‚âà‚ü® -‚Äøcong (*-identityÀ° (‚ü¶ p ‚üß x)) ‚ü©
  - ‚ü¶ p ‚üß x              ‚àé

+·µñ-cong : Congruent‚ÇÇ _+·µñ_
+·µñ-cong {p} {q} {r} {s} (‚âà‚úì ‚àÄx[p‚Çì‚âàq‚Çì]) (‚âà‚úì ‚àÄx[r‚Çì‚âàs‚Çì]) = ‚âà‚úì Œª x ‚Üí begin‚ü® setoid ‚ü©
  ‚ü¶ p +·µñ r ‚üß x ‚âà‚ü® +·µñ-homo p r x ‚ü©
  ‚ü¶ p ‚üß x + ‚ü¶ r ‚üß x ‚âà‚ü® +-cong (‚àÄx[p‚Çì‚âàq‚Çì] x) (‚àÄx[r‚Çì‚âàs‚Çì] x)  ‚ü©
  ‚ü¶ q ‚üß x + ‚ü¶ s ‚üß x ‚âà‚ü® sym (+·µñ-homo q s x) ‚ü©
  ‚ü¶ q +·µñ s ‚üß x ‚àé

+·µñ-isMagma : IsMagma _+·µñ_
+·µñ-isMagma = record
  { isEquivalence = ‚âà·µñ-isEquivalence
  ; ‚àô-cong = +·µñ-cong
  }

+·µñ-assoc : Associative _+·µñ_
+·µñ-assoc p q r = ‚âà‚úì Œª x ‚Üí begin‚ü® setoid ‚ü©
  ‚ü¶ p +·µñ q +·µñ r ‚üß x ‚âà‚ü® +·µñ-homo (p +·µñ q) r x ‚ü©
  ‚ü¶ p +·µñ q ‚üß x + ‚ü¶ r ‚üß x ‚âà‚ü® +-cong ≥ (+·µñ-homo p q x) ‚ü©
  ‚ü¶ p ‚üß x + ‚ü¶ q ‚üß x + ‚ü¶ r ‚üß x ‚âà‚ü® +-assoc (‚ü¶ p ‚üß x) (‚ü¶ q ‚üß x) (‚ü¶ r ‚üß x) ‚ü©
  ‚ü¶ p ‚üß x + (‚ü¶ q ‚üß x + ‚ü¶ r ‚üß x) ‚âà‚ü® +-congÀ° (sym (+·µñ-homo q r x)) ‚ü©
  ‚ü¶ p ‚üß x + ‚ü¶ q +·µñ r ‚üß x ‚âà‚ü® sym (+·µñ-homo p (q +·µñ r) x) ‚ü©
  ‚ü¶ p +·µñ (q +·µñ r) ‚üß x ‚àé

+·µñ-isSemigroup : IsSemigroup _+·µñ_
+·µñ-isSemigroup = record
  { isMagma = +·µñ-isMagma
  ; assoc = +·µñ-assoc
  }

+·µñ-comm : Commutative _+·µñ_
+·µñ-comm p q = ‚âà‚úì Œª x ‚Üí begin‚ü® setoid ‚ü©
  ‚ü¶ p +·µñ q ‚üß x ‚âà‚ü® +·µñ-homo p q x ‚ü©
  ‚ü¶ p ‚üß x + ‚ü¶ q ‚üß x ‚âà‚ü® +-comm (‚ü¶ p ‚üß x) (‚ü¶ q ‚üß x) ‚ü©
  ‚ü¶ q ‚üß x + ‚ü¶ p ‚üß x ‚âà‚ü® sym (+·µñ-homo q p x) ‚ü©
  ‚ü¶ q +·µñ p ‚üß x ‚àé

+·µñ-identityÀ° : LeftIdentity 0·µñ _+·µñ_
+·µñ-identityÀ° p = ‚âà‚úì Œª x ‚Üí begin‚ü® setoid ‚ü©
  ‚ü¶ 0·µñ +·µñ p ‚üß x ‚âà‚ü® +·µñ-homo 0·µñ p x ‚ü©
  0# + ‚ü¶ p ‚üß x ‚âà‚ü® +-identityÀ° (‚ü¶ p ‚üß x) ‚ü©
  ‚ü¶ p ‚üß x ‚àé

open import Algebra.FunctionProperties.Consequences ‚âà·µñ-setoid using (comm+idÀ°‚áíid ≥; comm+invÀ°‚áíinv ≥; comm+distrÀ°‚áídistr ≥)

+·µñ-identity ≥ : RightIdentity 0·µñ _+·µñ_
+·µñ-identity ≥ = comm+idÀ°‚áíid ≥ +·µñ-comm +·µñ-identityÀ°

+·µñ-identity : Identity 0·µñ _+·µñ_
+·µñ-identity = +·µñ-identityÀ° , +·µñ-identity ≥

+·µñ-isMonoid : IsMonoid _+·µñ_ 0·µñ
+·µñ-isMonoid = record
  { isSemigroup = +·µñ-isSemigroup
  ; identity = +·µñ-identity
  }

-·µñ‚ÄøinverseÀ° : LeftInverse 0·µñ -·µñ_ _+·µñ_
-·µñ‚ÄøinverseÀ° p = ‚âà‚úì Œª x ‚Üí begin‚ü® setoid ‚ü©
  ‚ü¶ -·µñ p +·µñ p ‚üß x      ‚âà‚ü® +·µñ-homo (-·µñ p) p x ‚ü©
  ‚ü¶ -·µñ p ‚üß x + ‚ü¶ p ‚üß x ‚âà‚ü® +-cong ≥ (-·µñ‚Äøhomo p x) ‚ü©
  - ‚ü¶ p ‚üß x + ‚ü¶ p ‚üß x  ‚âà‚ü® -‚ÄøinverseÀ° (‚ü¶ p ‚üß x) ‚ü©
  ‚ü¶ 0·µñ ‚üß x             ‚àé

-·µñ‚Äøinverse ≥ : RightInverse 0·µñ -·µñ_ _+·µñ_
-·µñ‚Äøinverse ≥ = comm+invÀ°‚áíinv ≥ +·µñ-comm -·µñ‚ÄøinverseÀ°

-·µñ‚Äøinverse : Inverse 0·µñ -·µñ_ _+·µñ_
-·µñ‚Äøinverse = -·µñ‚ÄøinverseÀ° , -·µñ‚Äøinverse ≥

-·µñ‚Äøcong : Congruent‚ÇÅ (-·µñ_)
-·µñ‚Äøcong {p} {q} (‚âà‚úì ‚àÄx[p‚Çì‚âàq‚Çì]) = ‚âà‚úì Œª x ‚Üí begin‚ü® setoid ‚ü©
  ‚ü¶ -·µñ p ‚üß x ‚âà‚ü® -·µñ‚Äøhomo p x ‚ü©
  - ‚ü¶ p ‚üß x  ‚âà‚ü® -‚Äøcong (‚àÄx[p‚Çì‚âàq‚Çì] x) ‚ü©
  - ‚ü¶ q ‚üß x  ‚âà‚ü® sym (-·µñ‚Äøhomo q x) ‚ü©
  ‚ü¶ -·µñ q ‚üß x ‚àé

+·µñ-isGroup : IsGroup _+·µñ_ 0·µñ (-·µñ_)
+·µñ-isGroup = record
  { isMonoid = +·µñ-isMonoid
  ; inverse = -·µñ‚Äøinverse
  ; ‚Åª¬π-cong = -·µñ‚Äøcong
  }

+·µñ-isAbelianGroup : IsAbelianGroup _+·µñ_ 0·µñ (-·µñ_)
+·µñ-isAbelianGroup = record
  { isGroup = +·µñ-isGroup
  ; comm = +·µñ-comm
  }

*·µñ-cong : Congruent‚ÇÇ _*·µñ_
*·µñ-cong {p} {q} {r} {s} (‚âà‚úì ‚àÄx[p‚Çì‚âàq‚Çì]) (‚âà‚úì ‚àÄx[r‚Çì‚âàs‚Çì]) = ‚âà‚úì Œª x ‚Üí begin‚ü® setoid ‚ü©
  ‚ü¶ p *·µñ r ‚üß x ‚âà‚ü® *·µñ-homo p r x ‚ü©
  ‚ü¶ p ‚üß x * ‚ü¶ r ‚üß x ‚âà‚ü® *-cong (‚àÄx[p‚Çì‚âàq‚Çì] x) (‚àÄx[r‚Çì‚âàs‚Çì] x)  ‚ü©
  ‚ü¶ q ‚üß x * ‚ü¶ s ‚üß x ‚âà‚ü® sym (*·µñ-homo q s x) ‚ü©
  ‚ü¶ q *·µñ s ‚üß x ‚àé

*·µñ-isMagma : IsMagma _*·µñ_
*·µñ-isMagma = record
  { isEquivalence = ‚âà·µñ-isEquivalence
  ; ‚àô-cong = *·µñ-cong
  }

*·µñ-assoc : Associative _*·µñ_
*·µñ-assoc p q r = ‚âà‚úì Œª x ‚Üí begin‚ü® setoid ‚ü©
  ‚ü¶ p *·µñ q *·µñ r ‚üß x ‚âà‚ü® *·µñ-homo (p *·µñ q) r x ‚ü©
  ‚ü¶ p *·µñ q ‚üß x * ‚ü¶ r ‚üß x ‚âà‚ü® *-cong ≥ (*·µñ-homo p q x) ‚ü©
  ‚ü¶ p ‚üß x * ‚ü¶ q ‚üß x * ‚ü¶ r ‚üß x ‚âà‚ü® *-assoc (‚ü¶ p ‚üß x) (‚ü¶ q ‚üß x) (‚ü¶ r ‚üß x) ‚ü©
  ‚ü¶ p ‚üß x * (‚ü¶ q ‚üß x * ‚ü¶ r ‚üß x) ‚âà‚ü® *-congÀ° (sym (*·µñ-homo q r x)) ‚ü©
  ‚ü¶ p ‚üß x * ‚ü¶ q *·µñ r ‚üß x ‚âà‚ü® sym (*·µñ-homo p (q *·µñ r) x) ‚ü©
  ‚ü¶ p *·µñ (q *·µñ r) ‚üß x ‚àé

*·µñ-isSemigroup : IsSemigroup _*·µñ_
*·µñ-isSemigroup = record
  { isMagma = *·µñ-isMagma
  ; assoc = *·µñ-assoc
  }

*·µñ-comm : Commutative _*·µñ_
*·µñ-comm p q = ‚âà‚úì Œª x ‚Üí begin‚ü® setoid ‚ü©
  ‚ü¶ p *·µñ q ‚üß x ‚âà‚ü® *·µñ-homo p q x ‚ü©
  ‚ü¶ p ‚üß x * ‚ü¶ q ‚üß x ‚âà‚ü® *-comm (‚ü¶ p ‚üß x) (‚ü¶ q ‚üß x) ‚ü©
  ‚ü¶ q ‚üß x * ‚ü¶ p ‚üß x ‚âà‚ü® sym (*·µñ-homo q p x) ‚ü©
  ‚ü¶ q *·µñ p ‚üß x ‚àé

*·µñ-identityÀ° : LeftIdentity 1·µñ _*·µñ_
*·µñ-identityÀ° p = ‚âà‚úì Œª x ‚Üí begin‚ü® setoid ‚ü©
  ‚ü¶ 1·µñ *·µñ p ‚üß x      ‚âà‚ü® *·µñ-homo 1·µñ p x ‚ü©
  ‚ü¶ 1·µñ ‚üß x * ‚ü¶ p ‚üß x ‚âà‚ü® *-cong ≥ (1·µñ-homo x) ‚ü©
  1# * ‚ü¶ p ‚üß x       ‚âà‚ü® *-identityÀ° (‚ü¶ p ‚üß x) ‚ü©
  ‚ü¶ p ‚üß x            ‚àé


*·µñ-identity ≥ : RightIdentity 1·µñ _*·µñ_
*·µñ-identity ≥ = comm+idÀ°‚áíid ≥ *·µñ-comm *·µñ-identityÀ°

*·µñ-identity : Identity 1·µñ _*·µñ_
*·µñ-identity = *·µñ-identityÀ° , *·µñ-identity ≥

*·µñ-1·µñ-isMonoid : IsMonoid _*·µñ_ 1·µñ
*·µñ-1·µñ-isMonoid = record
  { isSemigroup = *·µñ-isSemigroup
  ; identity = *·µñ-identity
  }

*·µñ-distribÀ°-+·µñ : _*·µñ_ DistributesOverÀ° _+·µñ_
*·µñ-distribÀ°-+·µñ p q r = ‚âà‚úì Œª x ‚Üí begin‚ü® setoid ‚ü©
  ‚ü¶ p *·µñ (q +·µñ r) ‚üß x                   ‚âà‚ü® *·µñ-homo p (q +·µñ r) x ‚ü©
  ‚ü¶ p ‚üß x * ‚ü¶ q +·µñ r ‚üß x                ‚âà‚ü® *-congÀ° (+·µñ-homo q r x)  ‚ü©
  ‚ü¶ p ‚üß x * (‚ü¶ q ‚üß x + ‚ü¶ r ‚üß x)         ‚âà‚ü® distribÀ° (‚ü¶ p ‚üß x) (‚ü¶ q ‚üß x) (‚ü¶ r ‚üß x) ‚ü©
  ‚ü¶ p ‚üß x * ‚ü¶ q ‚üß x + ‚ü¶ p ‚üß x * ‚ü¶ r ‚üß x ‚âà‚ü® +-cong (sym (*·µñ-homo p q x)) (sym (*·µñ-homo p r x)) ‚ü©
  ‚ü¶ p *·µñ q ‚üß x + ‚ü¶ p *·µñ r ‚üß x           ‚âà‚ü® sym (+·µñ-homo (p *·µñ q) (p *·µñ r) x) ‚ü©
  ‚ü¶ p *·µñ q +·µñ p *·µñ r ‚üß x                ‚àé


*·µñ-distrib ≥-+·µñ : _*·µñ_ DistributesOver ≥ _+·µñ_
*·µñ-distrib ≥-+·µñ = comm+distrÀ°‚áídistr ≥ +·µñ-cong *·µñ-comm *·µñ-distribÀ°-+·µñ

*·µñ-distrib-+·µñ : _*·µñ_ DistributesOver _+·µñ_
*·µñ-distrib-+·µñ = *·µñ-distribÀ°-+·µñ , *·µñ-distrib ≥-+·µñ

+·µñ-*·µñ-isRing : IsRing _+·µñ_ _*·µñ_ -·µñ_ 0·µñ 1·µñ
+·µñ-*·µñ-isRing = record
  { +-isAbelianGroup = +·µñ-isAbelianGroup
  ; *-isMonoid = *·µñ-1·µñ-isMonoid
  ; distrib = *·µñ-distrib-+·µñ
  }

+·µñ-*·µñ-isCommutativeRing : IsCommutativeRing _+·µñ_ _*·µñ_ -·µñ_ 0·µñ 1·µñ
+·µñ-*·µñ-isCommutativeRing = record
  { isRing = +·µñ-*·µñ-isRing
  ; *-comm = *·µñ-comm
  }

0·µñ‚ââ1·µñ : 0·µñ ‚ââ·µñ 1·µñ
0·µñ‚ââ1·µñ (‚âà‚úì ‚àÄx[0‚âàx^0*1])= 0#‚ââ1# $ begin‚ü® setoid ‚ü©
  0# ‚âà‚ü® ‚àÄx[0‚âàx^0*1] 1# ‚ü©
  1# * 1# ‚âà‚ü® *-identity ≥ 1# ‚ü©
  1# ‚àé

+·µñ-*·µñ-isNonZeroCommutativeRing : IsNonZeroCommutativeRing _+·µñ_ _*·µñ_ -·µñ_ 0·µñ 1·µñ
+·µñ-*·µñ-isNonZeroCommutativeRing = record
  { isCommutativeRing = +·µñ-*·µñ-isCommutativeRing
  ; 0#‚ââ1# = 0·µñ‚ââ1·µñ
  }


-- x‚ââ0‚áíx^n‚ââ0 : ‚àÄ x (x‚ââ0 : x ‚ââ 0#) n ‚Üí x ^ n ‚ââ 0#
-- x‚ââ0‚áíx^n‚ââ0 = {!!}

-- *·µñ-cancelÀ° : ‚àÄ p {q r} ‚Üí p ‚ââ·µñ 0·µñ ‚Üí p *·µñ q ‚âà·µñ p *·µñ r ‚Üí q ‚âà·µñ r
-- *·µñ-cancelÀ° 0·µñ {q} {r} p‚ââ0 (‚âà‚úì ‚àÄx[p*q‚âàp*r]) = contradiction ‚âà·µñ-refl p‚ââ0
-- *·µñ-cancelÀ° (x^ n ‚àô p) {q} {r} p‚ââ0 (‚âà‚úì ‚àÄx[p*q‚âàp*r]) = ‚âà‚úì ‚àÄx[q‚Çì‚âàr‚Çì]
--   where
--   ‚àÄx[q‚Çì‚âàr‚Çì] : ‚àÄ x ‚Üí ‚ü¶ q ‚üß x ‚âà ‚ü¶ r ‚üß x
--   ‚àÄx[q‚Çì‚âàr‚Çì] x with x ‚âà? 0#
--   ... | yes x‚âà0 = {!!}
--   ... | no  x‚ââ0 = *-cancelÀ° (x ^ n) (x‚ââ0‚áíx^n‚ââ0 x x‚ââ0 n) {!!}

-- +·µñ-*·µñ-isIntegralDomain : IsIntegralDomain _+·µñ_ _*·µñ_ -·µñ_ 0·µñ 1·µñ
-- +·µñ-*·µñ-isIntegralDomain = record
--   { isNonZeroCommutativeRing = +·µñ-*·µñ-isNonZeroCommutativeRing
--   ; *-cancelÀ° = {!!}
--   }

-- open import AKS.Unsafe using (TODO)

-- lc : ‚àÄ p {p‚ââ0 : p ‚ââ·µñ 0·µñ} ‚Üí C/0
-- lc 0·µñ {p‚ââ0} = contradiction ‚âà·µñ-refl p‚ââ0
-- lc (x^ n ‚àô p) {p‚ââ0} = lc-spine p
--   where
--   lc-spine : Spine ‚Üí C/0
--   lc-spine (K c) = c
--   lc-spine (c +x^ n ‚àô p) = lc-spine p

-- infix 4 _‚âà·µñ?_
-- _‚âà·µñ?_ : Decidable _‚âà·µñ_
-- _div·µñ_ : ‚àÄ (n m : Polynomial) {m‚ââ0 : m ‚ââ·µñ 0·µñ} ‚Üí Polynomial

-- (n div·µñ m) {m‚ââ0} with n ‚âà·µñ? 0·µñ
-- ... | yes n‚âà0 = 0·µñ
-- ... | no  n‚ââ0 = loop 0·µñ n {n‚ââ0} <-well-founded
--   where
--   leading : ‚àÄ r {r‚ââ0 : r ‚ââ·µñ 0·µñ} ‚Üí Polynomial
--   leading r {r‚ââ0} = (lc r {r‚ââ0} /-nonzero lc m {m‚ââ0}) ‚àôùëã^ (deg r {r‚ââ0} ‚à∏ deg m {m‚ââ0})
--   loop : ‚àÄ (q r : Polynomial) {r‚ââ0} ‚Üí Acc _<_ (deg r {r‚ââ0}) ‚Üí Polynomial
--   loop q r {r‚ââ0} (acc downward) with <-‚â§-connex (deg r {r‚ââ0}) (deg m {m‚ââ0})
--   ... | inj‚ÇÅ r<m = q
--   ... | inj‚ÇÇ r‚â•m with r -·µñ leading r {r‚ââ0} *·µñ m ‚âà·µñ? 0·µñ
--   ...   | yes r'‚âà0 = q
--   ...   | no  r'‚ââ0 = loop (q +·µñ leading r {r‚ââ0}) (r -·µñ leading r {r‚ââ0} *·µñ m) {r'‚ââ0} (downward _ TODO)

-- ‚âà·µñ‚áí‚âà‚Å± : ‚àÄ {p q} ‚Üí p ‚âà·µñ q ‚Üí p ‚âà‚Å± q
-- ‚âà·µñ‚áí‚âà‚Å± {0·µñ} {0·µñ} p‚âà·µñq = 0·µñ‚âà
-- ‚âà·µñ‚áí‚âà‚Å± {0·µñ} {x^ o‚ÇÇ ‚àô q} (‚âà‚úì ‚àÄx[p‚Çì‚âàq‚Çì]) = TODO
-- ‚âà·µñ‚áí‚âà‚Å± {x^ o‚ÇÅ ‚àô p} {0·µñ} p‚âà·µñq = TODO
-- ‚âà·µñ‚áí‚âà‚Å± {x^ o‚ÇÅ ‚àô p} {x^ o‚ÇÇ ‚àô q} (‚âà‚úì ‚àÄx[p‚Çì‚âàq‚Çì]) = 0·µñ‚ââ {!!} {!!}

-- p ‚âà·µñ? q = map (FE.equivalence ‚âà‚Å±‚áí‚âà·µñ ‚âà·µñ‚áí‚âà‚Å±) (p ‚âà‚Å±? q)
